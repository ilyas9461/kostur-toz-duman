CCS PCH C Compiler, Version 5.076, 5967               24-Ara-19 10:58

               Filename:   D:\EasyPICV6\CCS_PIC_C\proje_KosturKart\kod_MPLABX_ide\Kostur_05_NISAN_19\P10_yok\kostur_18f45k22.X\build\default\production\main_kostur.lst

               ROM used:   23976 bytes (73%)
                           Largest free fragment is 8792
               RAM used:   359 (23%) at main() level
                           398 (26%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
0000:  GOTO   4AC8
*
0008:  GOTO   00B2
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  FF5,15
004C:  MOVFF  FF6,16
0050:  MOVFF  FF7,17
0054:  MOVFF  00,0E
0058:  MOVFF  01,0F
005C:  MOVFF  02,10
0060:  MOVFF  03,11
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVFF  15,FF5
009E:  MOVFF  16,FF6
00A2:  MOVFF  17,FF7
00A6:  MOVF   04,W
00A8:  MOVFF  06,FE0
00AC:  MOVFF  05,FD8
00B0:  RETFIE 0
00B2:  MOVWF  1A
00B4:  MOVFF  FD8,1B
00B8:  MOVFF  FE0,1C
00BC:  MOVLB  0
00BE:  MOVFF  FE9,22
00C2:  MOVFF  FEA,1D
00C6:  MOVFF  FE1,1E
00CA:  MOVFF  FE2,1F
00CE:  MOVFF  FD9,20
00D2:  MOVFF  FDA,21
00D6:  MOVFF  FF3,28
00DA:  MOVFF  FF4,29
00DE:  MOVFF  FFA,2A
00E2:  MOVFF  FF5,2B
00E6:  MOVFF  FF6,2C
00EA:  MOVFF  FF7,2D
00EE:  MOVFF  00,24
00F2:  MOVFF  01,25
00F6:  MOVFF  02,26
00FA:  MOVFF  03,27
00FE:  BTFSS  FF2.5
0100:  GOTO   010A
0104:  BTFSC  FF2.2
0106:  GOTO   01AA
010A:  BTFSS  FF2.4
010C:  GOTO   0116
0110:  BTFSC  FF2.1
0112:  GOTO   08FE
0116:  MOVFF  24,00
011A:  MOVFF  25,01
011E:  MOVFF  26,02
0122:  MOVFF  27,03
0126:  MOVFF  22,FE9
012A:  MOVFF  1D,FEA
012E:  BSF    1D.7
0130:  MOVFF  1E,FE1
0134:  MOVFF  1F,FE2
0138:  MOVFF  20,FD9
013C:  MOVFF  21,FDA
0140:  MOVFF  28,FF3
0144:  MOVFF  29,FF4
0148:  MOVFF  2A,FFA
014C:  MOVFF  2B,FF5
0150:  MOVFF  2C,FF6
0154:  MOVFF  2D,FF7
0158:  MOVF   1A,W
015A:  MOVFF  1C,FE0
015E:  MOVFF  1B,FD8
0162:  RETFIE 0
.................... /*  
....................  * File:   main_kostur.c 
....................  * Author: ilyas YAGCIOGLU 
....................  * Created on 05 Mayýs 2018 Cumartesi, 11:49 
....................  *  
....................  * P10 yokkkkkk 
....................  */ 
....................  
.................... //#define  TOZ_DUMAN   //TOZ_DUMAN        KOSTUR      //hangi donaným için olduðu tanýmlnamalý. 
.................... #define  KOSTUR 
....................  
.................... #include "main_kostur.h" 
.................... /*  
....................  * File:   main_kostur.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 05 Mayýs 2018 Cumartesi, 11:49 
....................  */ 
....................  
.................... #ifndef MAIN_KOSTUR_H 
.................... #define	MAIN_KOSTUR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................      
....................     #include <18F45K22.h> 
.................... //////////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F45K22 
0164:  CLRF   FF7
0166:  ADDLW  74
0168:  MOVWF  FF6
016A:  MOVLW  01
016C:  ADDWFC FF7,F
016E:  TBLRD*+
0170:  MOVF   FF5,W
0172:  RETURN 0
0174:  DATA 28,0C
0176:  DATA 01,06
0178:  CLRF   FF7
017A:  ADDLW  88
017C:  MOVWF  FF6
017E:  MOVLW  01
0180:  ADDWFC FF7,F
0182:  TBLRD*+
0184:  MOVF   FF5,W
0186:  RETURN 0
0188:  DATA 4B,4F
018A:  DATA 53,54
018C:  DATA 55,52
018E:  DATA 00,00
0190:  CLRF   FF7
0192:  ADDLW  A0
0194:  MOVWF  FF6
0196:  MOVLW  01
0198:  ADDWFC FF7,F
019A:  TBLRD*+
019C:  MOVF   FF5,W
019E:  RETURN 0
01A0:  DATA 59,4F
01A2:  DATA 59,55
01A4:  DATA 4E,43
01A6:  DATA 41,4B
01A8:  DATA 00,00
*
01D4:  DATA 0C,20
01D6:  DATA 20,20
01D8:  DATA 20,20
01DA:  DATA 4B,4F
01DC:  DATA 53,54
01DE:  DATA 55,52
01E0:  DATA 00,00
01E2:  DATA 0A,20
01E4:  DATA 20,20
01E6:  DATA 3A,3A
01E8:  DATA 20,20
01EA:  DATA 25,75
01EC:  DATA 20,20
01EE:  DATA 3A,3A
01F0:  DATA 00,00
01F2:  DATA 0C,6D
01F4:  DATA 69,6E
01F6:  DATA 3A,25
01F8:  DATA 4C,75
01FA:  DATA 2C,25
01FC:  DATA 4C,75
01FE:  DATA 2C,25
0200:  DATA 4C,75
0202:  DATA 00,00
0204:  DATA 0C,6D
0206:  DATA 61,78
0208:  DATA 3A,25
020A:  DATA 4C,75
020C:  DATA 2C,25
020E:  DATA 4C,75
0210:  DATA 2C,25
0212:  DATA 4C,75
0214:  DATA 00,00
0216:  DATA 0C,74
0218:  DATA 69,6D
021A:  DATA 65,72
021C:  DATA 3A,25
021E:  DATA 4C,75
0220:  DATA 00,00
0222:  DATA 0A,74
0224:  DATA 4D,31
0226:  DATA 3A,25
0228:  DATA 4C,75
022A:  DATA 00,00
022C:  DATA 0C,74
022E:  DATA 69,6D
0230:  DATA 65,72
0232:  DATA 3A,25
0234:  DATA 4C,75
0236:  DATA 00,00
0238:  DATA 0A,74
023A:  DATA 4D,32
023C:  DATA 3A,25
023E:  DATA 4C,75
0240:  DATA 00,00
0242:  DATA 0C,20
0244:  DATA 2E,2E
0246:  DATA 2E,4A
0248:  DATA 65,74
024A:  DATA 6F,6E
024C:  DATA 20,54
024E:  DATA 4C,2E
0250:  DATA 2E,2E
0252:  DATA 20,00
0254:  DATA 0A,3C
0256:  DATA 3C,3C
0258:  DATA 20,20
025A:  DATA 20,20
025C:  DATA 3C,3E
025E:  DATA 20,20
0260:  DATA 20,20
0262:  DATA 3E,3E
0264:  DATA 3E,00
0266:  DATA 0C,20
0268:  DATA 2E,2E
026A:  DATA 4F,79
026C:  DATA 75,6E
026E:  DATA 20,53
0270:  DATA 75,72
0272:  DATA 65,73
0274:  DATA 69,2E
0276:  DATA 2E,00
0278:  DATA 0A,3C
027A:  DATA 3C,3C
027C:  DATA 20,20
027E:  DATA 20,20
0280:  DATA 3C,3E
0282:  DATA 20,20
0284:  DATA 20,20
0286:  DATA 3E,3E
0288:  DATA 3E,00
028A:  DATA 0C,2E
028C:  DATA 2E,53
028E:  DATA 45,4E
0290:  DATA 53,20
0292:  DATA 4B,41
0294:  DATA 4C,49
0296:  DATA 42,52
0298:  DATA 45,2E
029A:  DATA 2E,00
029C:  DATA 0A,3C
029E:  DATA 3C,3C
02A0:  DATA 20,20
02A2:  DATA 20,20
02A4:  DATA 3C,3E
02A6:  DATA 20,20
02A8:  DATA 20,20
02AA:  DATA 3E,3E
02AC:  DATA 3E,00
02AE:  DATA 0C,20
02B0:  DATA 2E,2E
02B2:  DATA 53,65
02B4:  DATA 6E,73
02B6:  DATA 6F,72
02B8:  DATA 20,54
02BA:  DATA 65,73
02BC:  DATA 74,2E
02BE:  DATA 2E,00
02C0:  DATA 0A,3C
02C2:  DATA 3C,3C
02C4:  DATA 20,20
02C6:  DATA 20,20
02C8:  DATA 3C,3E
02CA:  DATA 20,20
02CC:  DATA 20,20
02CE:  DATA 3E,3E
02D0:  DATA 3E,00
02D2:  DATA 0C,20
02D4:  DATA 2E,4D
02D6:  DATA 6F,74
02D8:  DATA 6F,72
02DA:  DATA 20,4B
02DC:  DATA 75,72
02DE:  DATA 75,6C
02E0:  DATA 75,6D
02E2:  DATA 2E,00
02E4:  DATA 0A,3C
02E6:  DATA 3C,3C
02E8:  DATA 20,20
02EA:  DATA 20,20
02EC:  DATA 3C,3E
02EE:  DATA 20,20
02F0:  DATA 20,20
02F2:  DATA 3E,3E
02F4:  DATA 3E,00
02F6:  DATA 0C,20
02F8:  DATA 20,2E
02FA:  DATA 2E,2E
02FC:  DATA 52,65
02FE:  DATA 73,65
0300:  DATA 74,2E
0302:  DATA 2E,2E
0304:  DATA 20,20
0306:  DATA 00,00
0308:  DATA 0A,3C
030A:  DATA 3C,3C
030C:  DATA 20,20
030E:  DATA 20,20
0310:  DATA 3C,3E
0312:  DATA 20,20
0314:  DATA 20,20
0316:  DATA 3E,3E
0318:  DATA 3E,00
031A:  DATA 0C,20
031C:  DATA 20,2E
031E:  DATA 2E,2E
0320:  DATA 53,45
0322:  DATA 53,2E
0324:  DATA 2E,2E
0326:  DATA 20,20
0328:  DATA 00,00
032A:  DATA 0A,3C
032C:  DATA 3C,3C
032E:  DATA 20,20
0330:  DATA 20,20
0332:  DATA 3C,3E
0334:  DATA 20,20
0336:  DATA 20,20
0338:  DATA 3E,3E
033A:  DATA 3E,00
033C:  DATA 0C,53
033E:  DATA 45,4E
0340:  DATA 53,20
0342:  DATA 4F,4B
0344:  DATA 55,20
0346:  DATA 53,41
0348:  DATA 59,49
034A:  DATA 53,49
034C:  DATA 00,00
034E:  DATA 0A,3C
0350:  DATA 3C,3C
0352:  DATA 20,20
0354:  DATA 20,20
0356:  DATA 3C,3E
0358:  DATA 20,20
035A:  DATA 20,20
035C:  DATA 3E,3E
035E:  DATA 3E,00
0360:  DATA 0C,20
0362:  DATA 20,2E
0364:  DATA 2E,2E
0366:  DATA 43,49
0368:  DATA 4B,49
036A:  DATA 53,2E
036C:  DATA 2E,2E
036E:  DATA 20,20
0370:  DATA 00,00
0372:  DATA 0A,3C
0374:  DATA 3C,3C
0376:  DATA 20,20
0378:  DATA 20,20
037A:  DATA 3C,3E
037C:  DATA 20,20
037E:  DATA 20,20
0380:  DATA 3E,3E
0382:  DATA 3E,00
0384:  DATA 0C,4B
0386:  DATA 4F,53
0388:  DATA 54,55
038A:  DATA 52,20
038C:  DATA 4B,41
038E:  DATA 52,54
0390:  DATA 20,56
0392:  DATA 31,2E
0394:  DATA 30,00
0396:  DATA 0A,20
0398:  DATA 20,20
039A:  DATA 20,4C
039C:  DATA 59,53
039E:  DATA 2D,32
03A0:  DATA 30,31
03A2:  DATA 39,00
03A4:  DATA 0C,53
03A6:  DATA 61,79
03A8:  DATA 69,3D
03AA:  DATA 25,75
03AC:  DATA 0A,00
03AE:  DATA 0A,3C
03B0:  DATA 3C,3C
03B2:  DATA 20,20
03B4:  DATA 20,20
03B6:  DATA 3C,3E
03B8:  DATA 20,20
03BA:  DATA 20,20
03BC:  DATA 3E,3E
03BE:  DATA 3E,00
03C0:  DATA 0C,53
03C2:  DATA 61,79
03C4:  DATA 69,3D
03C6:  DATA 25,75
03C8:  DATA 0A,00
03CA:  DATA 0A,3C
03CC:  DATA 3C,3C
03CE:  DATA 20,20
03D0:  DATA 20,20
03D2:  DATA 3C,3E
03D4:  DATA 20,20
03D6:  DATA 20,20
03D8:  DATA 3E,3E
03DA:  DATA 3E,00
03DC:  DATA 0C,21
03DE:  DATA 21,20
03E0:  DATA 4B,61
03E2:  DATA 79,64
03E4:  DATA 65,64
03E6:  DATA 69,6C
03E8:  DATA 64,69
03EA:  DATA 20,21
03EC:  DATA 21,00
03EE:  DATA 0A,53
03F0:  DATA 41,59
03F2:  DATA 49,3A
03F4:  DATA 25,75
03F6:  DATA 00,00
03F8:  DATA 0C,53
03FA:  DATA 45,53
03FC:  DATA 3D,25
03FE:  DATA 75,0A
0400:  DATA 00,00
0402:  DATA 0A,3C
0404:  DATA 3C,3C
0406:  DATA 20,20
0408:  DATA 20,20
040A:  DATA 3C,3E
040C:  DATA 20,20
040E:  DATA 20,20
0410:  DATA 3E,3E
0412:  DATA 3E,00
0414:  DATA 0C,53
0416:  DATA 45,53
0418:  DATA 3D,25
041A:  DATA 75,0A
041C:  DATA 00,00
041E:  DATA 0A,3C
0420:  DATA 3C,3C
0422:  DATA 20,20
0424:  DATA 20,20
0426:  DATA 3C,3E
0428:  DATA 20,20
042A:  DATA 20,20
042C:  DATA 3E,3E
042E:  DATA 3E,00
0430:  DATA 0C,21
0432:  DATA 21,20
0434:  DATA 4B,61
0436:  DATA 79,64
0438:  DATA 65,64
043A:  DATA 69,6C
043C:  DATA 64,69
043E:  DATA 20,21
0440:  DATA 21,00
0442:  DATA 0C,6A
0444:  DATA 74,6E
0446:  DATA 20,54
0448:  DATA 4C,3D
044A:  DATA 25,75
044C:  DATA 0A,00
044E:  DATA 0A,3C
0450:  DATA 3C,3C
0452:  DATA 20,20
0454:  DATA 20,20
0456:  DATA 3C,3E
0458:  DATA 20,20
045A:  DATA 20,20
045C:  DATA 3E,3E
045E:  DATA 3E,00
0460:  DATA 0C,6A
0462:  DATA 74,6E
0464:  DATA 20,54
0466:  DATA 4C,3D
0468:  DATA 25,75
046A:  DATA 0A,00
046C:  DATA 0A,3C
046E:  DATA 3C,3C
0470:  DATA 20,20
0472:  DATA 20,20
0474:  DATA 3C,3E
0476:  DATA 20,20
0478:  DATA 20,20
047A:  DATA 3E,3E
047C:  DATA 3E,00
047E:  DATA 0C,21
0480:  DATA 21,20
0482:  DATA 4B,61
0484:  DATA 79,64
0486:  DATA 65,64
0488:  DATA 69,6C
048A:  DATA 64,69
048C:  DATA 20,21
048E:  DATA 21,00
0490:  DATA 0C,4F
0492:  DATA 79,75
0494:  DATA 6E,20
0496:  DATA 53,75
0498:  DATA 72,65
049A:  DATA 3D,25
049C:  DATA 75,20
049E:  DATA 64,6B
04A0:  DATA 00,00
04A2:  DATA 0A,3C
04A4:  DATA 3C,3C
04A6:  DATA 20,20
04A8:  DATA 20,20
04AA:  DATA 3C,3E
04AC:  DATA 20,20
04AE:  DATA 20,20
04B0:  DATA 3E,3E
04B2:  DATA 3E,00
04B4:  DATA 0C,4F
04B6:  DATA 79,75
04B8:  DATA 6E,20
04BA:  DATA 53,75
04BC:  DATA 72,65
04BE:  DATA 3D,25
04C0:  DATA 75,20
04C2:  DATA 64,6B
04C4:  DATA 00,00
04C6:  DATA 0A,3C
04C8:  DATA 3C,3C
04CA:  DATA 20,20
04CC:  DATA 20,20
04CE:  DATA 3C,3E
04D0:  DATA 20,20
04D2:  DATA 20,20
04D4:  DATA 3E,3E
04D6:  DATA 3E,00
04D8:  DATA 0C,21
04DA:  DATA 21,20
04DC:  DATA 4B,61
04DE:  DATA 79,64
04E0:  DATA 65,64
04E2:  DATA 69,6C
04E4:  DATA 64,69
04E6:  DATA 20,21
04E8:  DATA 21,00
04EA:  DATA 0C,53
04EC:  DATA 45,4E
04EE:  DATA 53,20
04F0:  DATA 64,65
04F2:  DATA 67,65
04F4:  DATA 72,20
04F6:  DATA 69,63
04F8:  DATA 69,6E
04FA:  DATA 2C,00
04FC:  DATA 0A,74
04FE:  DATA 6F,70
0500:  DATA 20,61
0502:  DATA 74,69
0504:  DATA 6E,2E
0506:  DATA 2E,2E
0508:  DATA 00,00
050A:  DATA 0C,53
050C:  DATA 45,4E
050E:  DATA 53,3A
0510:  DATA 20,25
0512:  DATA 6C,75
0514:  DATA 20,00
0516:  DATA 0A,53
0518:  DATA 45,4E
051A:  DATA 53,3A
051C:  DATA 20,25
051E:  DATA 31,2E
0520:  DATA 32,66
0522:  DATA 20,56
0524:  DATA 00,00
0526:  DATA 0C,4D
0528:  DATA 41,58
052A:  DATA 20,76
052C:  DATA 65,20
052E:  DATA 4D,49
0530:  DATA 4E,00
0532:  DATA 0A,62
0534:  DATA 65,6C
0536:  DATA 69,72
0538:  DATA 6C,65
053A:  DATA 79,69
053C:  DATA 6E,2E
053E:  DATA 2E,2E
0540:  DATA 00,00
0542:  DATA 0C,4D
0544:  DATA 41,58
0546:  DATA 20,44
0548:  DATA 45,47
054A:  DATA 45,52
054C:  DATA 3A,00
054E:  DATA 0A,53
0550:  DATA 45,4E
0552:  DATA 53,3A
0554:  DATA 20,25
0556:  DATA 6C,75
0558:  DATA 20,00
055A:  DATA 0C,4D
055C:  DATA 49,4E
055E:  DATA 20,44
0560:  DATA 45,47
0562:  DATA 45,52
0564:  DATA 3A,00
0566:  DATA 0A,53
0568:  DATA 45,4E
056A:  DATA 53,3A
056C:  DATA 20,25
056E:  DATA 6C,75
0570:  DATA 20,00
0572:  DATA 0C,53
0574:  DATA 65,6E
0576:  DATA 73,6F
0578:  DATA 72,20
057A:  DATA 53,69
057C:  DATA 6E,79
057E:  DATA 61,6C
0580:  DATA 3F,3F
0582:  DATA 3F,00
0584:  DATA 0A,3C
0586:  DATA 3C,3C
0588:  DATA 20,20
058A:  DATA 20,20
058C:  DATA 3C,3E
058E:  DATA 20,20
0590:  DATA 20,20
0592:  DATA 3E,3E
0594:  DATA 3E,00
0596:  DATA 0C,53
0598:  DATA 45,4E
059A:  DATA 53,3A
059C:  DATA 20,25
059E:  DATA 6C,75
05A0:  DATA 20,00
05A2:  DATA 0A,53
05A4:  DATA 45,4E
05A6:  DATA 53,3A
05A8:  DATA 20,25
05AA:  DATA 31,2E
05AC:  DATA 32,66
05AE:  DATA 20,56
05B0:  DATA 00,00
05B2:  DATA 0C,45
05B4:  DATA 56,45
05B6:  DATA 54,20
05B8:  DATA 20,20
05BA:  DATA 20,20
05BC:  DATA 20,20
05BE:  DATA 48,41
05C0:  DATA 59,49
05C2:  DATA 52,00
05C4:  DATA 0A,3C
05C6:  DATA 3C,3C
05C8:  DATA 20,20
05CA:  DATA 20,20
05CC:  DATA 3C,3E
05CE:  DATA 20,20
05D0:  DATA 20,20
05D2:  DATA 3E,3E
05D4:  DATA 3E,00
05D6:  DATA 0C,20
05D8:  DATA 21,20
05DA:  DATA 52,45
05DC:  DATA 53,45
05DE:  DATA 54,20
05E0:  DATA 54,41
05E2:  DATA 4D,41
05E4:  DATA 4D,20
05E6:  DATA 21,00
05E8:  DATA 0A,3C
05EA:  DATA 3C,3C
05EC:  DATA 20,20
05EE:  DATA 20,20
05F0:  DATA 3C,3E
05F2:  DATA 20,20
05F4:  DATA 20,20
05F6:  DATA 3E,3E
05F8:  DATA 3E,00
05FA:  DATA 0C,4D
05FC:  DATA 41,58
05FE:  DATA 3A,25
0600:  DATA 4C,75
0602:  DATA 2C,25
0604:  DATA 4C,75
0606:  DATA 2C,25
0608:  DATA 4C,75
060A:  DATA 00,00
060C:  DATA 0C,4D
060E:  DATA 49,4E
0610:  DATA 3A,25
0612:  DATA 4C,75
0614:  DATA 2C,25
0616:  DATA 4C,75
0618:  DATA 2C,25
061A:  DATA 4C,75
061C:  DATA 00,00
061E:  DATA 0C,5F
0620:  DATA 4F,31
0622:  DATA 5F,20
0624:  DATA 20,20
0626:  DATA 20,5F
0628:  DATA 4F,32
062A:  DATA 5F,0A
062C:  DATA 00,00
062E:  DATA 20,20
0630:  DATA 25,4C
0632:  DATA 75,20
0634:  DATA 20,20
0636:  DATA 20,20
0638:  DATA 20,25
063A:  DATA 4C,75
063C:  DATA 20,20
063E:  DATA 00,00
0640:  DATA 0C,20
0642:  DATA 20,4F
0644:  DATA 59,55
0646:  DATA 4E,20
0648:  DATA 42,49
064A:  DATA 54,54
064C:  DATA 49,20
064E:  DATA 0A,00
0650:  DATA 25,4C
0652:  DATA 75,20
0654:  DATA 2D,20
0656:  DATA 25,4C
0658:  DATA 75,20
065A:  DATA 2D,20
065C:  DATA 53,3D
065E:  DATA 25,4C
0660:  DATA 55,00
0662:  DATA 42,69
0664:  DATA 74,74
0666:  DATA 69,2E
0668:  DATA 2E,2E
066A:  DATA 00,00
066C:  DATA 4B,61
066E:  DATA 7A,61
0670:  DATA 6E,61
0672:  DATA 6E,20
0674:  DATA 4F,79
0676:  DATA 75,6E
0678:  DATA 63,75
067A:  DATA 20,31
067C:  DATA 20,50
067E:  DATA 75,61
0680:  DATA 6E,3D
0682:  DATA 25,6C
0684:  DATA 75,20
0686:  DATA 00,00
0688:  DATA 4B,61
068A:  DATA 7A,61
068C:  DATA 6E,61
068E:  DATA 6E,20
0690:  DATA 4F,79
0692:  DATA 75,6E
0694:  DATA 63,75
0696:  DATA 20,32
0698:  DATA 20,50
069A:  DATA 75,61
069C:  DATA 6E,3D
069E:  DATA 25,6C
06A0:  DATA 75,20
06A2:  DATA 00,00
06A4:  DATA 3C,3C
06A6:  DATA 3C,20
06A8:  DATA 42,65
06AA:  DATA 72,61
06AC:  DATA 62,65
06AE:  DATA 72,65
06B0:  DATA 20,4B
06B2:  DATA 61,6C
06B4:  DATA 64,69
06B6:  DATA 6E,69
06B8:  DATA 7A,2E
06BA:  DATA 2E,2E
06BC:  DATA 00,00
06BE:  DATA 53,75
06C0:  DATA 72,65
06C2:  DATA 3A,25
06C4:  DATA 4C,75
06C6:  DATA 20,73
06C8:  DATA 61,6E
06CA:  DATA 69,79
06CC:  DATA 65,20
06CE:  DATA 20,00
06D0:  DATA 25,4C
06D2:  DATA 75,20
06D4:  DATA 53,6E
06D6:  DATA 2E,00
06D8:  DATA 0C,53
06DA:  DATA 45,4E
06DC:  DATA 53,20
06DE:  DATA 4F,4B
06E0:  DATA 55,4D
06E2:  DATA 41,20
06E4:  DATA 53,41
06E6:  DATA 59,49
06E8:  DATA 00,00
06EA:  DATA 0A,25
06EC:  DATA 75,20
06EE:  DATA 2D,3E
06F0:  DATA 20,74
06F2:  DATA 3A,25
06F4:  DATA 75,20
06F6:  DATA 6D,53
06F8:  DATA 00,00
06FA:  DATA 0C,4B
06FC:  DATA 4F,53
06FE:  DATA 54,55
0700:  DATA 52,20
0702:  DATA 4B,41
0704:  DATA 52,54
0706:  DATA 20,56
0708:  DATA 31,2E
070A:  DATA 30,00
070C:  DATA 0A,25
070E:  DATA 30,35
0710:  DATA 4C,75
0712:  DATA 20,20
0714:  DATA 6A,74
0716:  DATA 6E,3A
0718:  DATA 25,75
071A:  DATA 54,4C
071C:  DATA 00,00
071E:  DATA 42,61
0720:  DATA 73,6C
0722:  DATA 61,20
0724:  DATA 2E,2E
0726:  DATA 2E,0D
0728:  DATA 0A,00
072A:  DATA 0C,4B
072C:  DATA 4F,53
072E:  DATA 54,55
0730:  DATA 52,20
0732:  DATA 4B,41
0734:  DATA 52,54
0736:  DATA 20,56
0738:  DATA 31,2E
073A:  DATA 30,00
073C:  DATA 0A,25
073E:  DATA 30,35
0740:  DATA 4C,75
0742:  DATA 20,20
0744:  DATA 6A,74
0746:  DATA 6E,3A
0748:  DATA 25,75
074A:  DATA 54,4C
074C:  DATA 00,00
074E:  DATA 0C,53
0750:  DATA 45,4E
0752:  DATA 53,3A
0754:  DATA 20,25
0756:  DATA 6C,75
0758:  DATA 20,00
075A:  DATA 0A,4F
075C:  DATA 79,75
075E:  DATA 6E,3A
0760:  DATA 20,25
0762:  DATA 4C,75
0764:  DATA 00,00
0766:  DATA 0C,4F
0768:  DATA 79,75
076A:  DATA 6E,20
076C:  DATA 42,69
076E:  DATA 74,74
0770:  DATA 69,00
0772:  DATA 0C,4B
0774:  DATA 4F,53
0776:  DATA 54,55
0778:  DATA 52,20
077A:  DATA 4B,41
077C:  DATA 52,54
077E:  DATA 20,56
0780:  DATA 31,2E
0782:  DATA 30,00
0784:  DATA 0A,25
0786:  DATA 30,35
0788:  DATA 4C,75
078A:  DATA 20,20
078C:  DATA 6A,74
078E:  DATA 6E,3A
0790:  DATA 25,75
0792:  DATA 54,4C
0794:  DATA 00,00
0796:  DATA 0C,20
0798:  DATA 2E,2E
079A:  DATA 2E,41
079C:  DATA 59,41
079E:  DATA 52,4C
07A0:  DATA 41,52
07A2:  DATA 2E,2E
07A4:  DATA 2E,20
07A6:  DATA 00,00
07A8:  DATA 0A,3C
07AA:  DATA 3C,3C
07AC:  DATA 20,20
07AE:  DATA 20,20
07B0:  DATA 3C,3E
07B2:  DATA 20,20
07B4:  DATA 20,20
07B6:  DATA 3E,3E
07B8:  DATA 3E,00
*
08DE:  TBLRD*+
08E0:  MOVF   FF5,F
08E2:  BZ    08FC
08E4:  MOVFF  FF6,183
08E8:  MOVFF  FF7,184
08EC:  MOVFF  FF5,185
08F0:  RCALL  0884
08F2:  MOVFF  183,FF6
08F6:  MOVFF  184,FF7
08FA:  BRA    08DE
08FC:  RETURN 0
*
0922:  DATA 0C,4A
0924:  DATA 45,54
0926:  DATA 4F,4E
0928:  DATA 00,00
*
0AFC:  CLRF   01
0AFE:  CLRF   02
0B00:  CLRF   00
0B02:  CLRF   03
0B04:  MOVLB  1
0B06:  MOVF   x69,W
0B08:  BNZ   0B0E
0B0A:  MOVF   x68,W
0B0C:  BZ    0B3E
0B0E:  MOVLW  10
0B10:  MOVWF  x6A
0B12:  BCF    FD8.0
0B14:  RLCF   x66,F
0B16:  RLCF   x67,F
0B18:  RLCF   00,F
0B1A:  RLCF   03,F
0B1C:  MOVF   x69,W
0B1E:  SUBWF  03,W
0B20:  BNZ   0B26
0B22:  MOVF   x68,W
0B24:  SUBWF  00,W
0B26:  BNC   0B36
0B28:  MOVF   x68,W
0B2A:  SUBWF  00,F
0B2C:  BTFSS  FD8.0
0B2E:  DECF   03,F
0B30:  MOVF   x69,W
0B32:  SUBWF  03,F
0B34:  BSF    FD8.0
0B36:  RLCF   01,F
0B38:  RLCF   02,F
0B3A:  DECFSZ x6A,F
0B3C:  BRA    0B12
0B3E:  MOVLB  0
0B40:  RETURN 0
0B42:  MOVLB  1
0B44:  MOVF   x66,W
0B46:  CLRF   01
0B48:  SUBWF  x65,W
0B4A:  BC    0B52
0B4C:  MOVFF  165,00
0B50:  BRA    0B6A
0B52:  CLRF   00
0B54:  MOVLW  08
0B56:  MOVWF  x67
0B58:  RLCF   x65,F
0B5A:  RLCF   00,F
0B5C:  MOVF   x66,W
0B5E:  SUBWF  00,W
0B60:  BTFSC  FD8.0
0B62:  MOVWF  00
0B64:  RLCF   01,F
0B66:  DECFSZ x67,F
0B68:  BRA    0B58
0B6A:  MOVLB  0
0B6C:  RETURN 0
0B6E:  MOVF   01,W
0B70:  MOVFF  163,165
0B74:  MOVLW  64
0B76:  MOVLB  1
0B78:  MOVWF  x66
0B7A:  MOVLB  0
0B7C:  RCALL  0B42
0B7E:  MOVFF  00,163
0B82:  MOVF   01,W
0B84:  MOVLW  30
0B86:  BNZ   0B98
0B88:  MOVLB  1
0B8A:  BTFSS  x64.1
0B8C:  BRA    0BB8
0B8E:  BTFSC  x64.3
0B90:  BRA    0BB8
0B92:  BTFSC  x64.4
0B94:  MOVLW  20
0B96:  BRA    0BA0
0B98:  MOVLB  1
0B9A:  BCF    x64.3
0B9C:  BCF    x64.4
0B9E:  BSF    x64.0
0BA0:  ADDWF  01,F
0BA2:  CLRF   19
0BA4:  BTFSC  FF2.7
0BA6:  BSF    19.7
0BA8:  BCF    FF2.7
0BAA:  MOVFF  01,185
0BAE:  MOVLB  0
0BB0:  RCALL  0884
0BB2:  BTFSC  19.7
0BB4:  BSF    FF2.7
0BB6:  MOVLB  1
0BB8:  MOVFF  163,165
0BBC:  MOVLW  0A
0BBE:  MOVWF  x66
0BC0:  MOVLB  0
0BC2:  RCALL  0B42
0BC4:  MOVFF  00,163
0BC8:  MOVF   01,W
0BCA:  MOVLW  30
0BCC:  BNZ   0BDE
0BCE:  MOVLB  1
0BD0:  BTFSC  x64.3
0BD2:  BRA    0BF4
0BD4:  BTFSS  x64.0
0BD6:  BRA    0BF4
0BD8:  BTFSC  x64.4
0BDA:  MOVLW  20
0BDC:  MOVLB  0
0BDE:  ADDWF  01,F
0BE0:  CLRF   19
0BE2:  BTFSC  FF2.7
0BE4:  BSF    19.7
0BE6:  BCF    FF2.7
0BE8:  MOVFF  01,185
0BEC:  RCALL  0884
0BEE:  BTFSC  19.7
0BF0:  BSF    FF2.7
0BF2:  MOVLB  1
0BF4:  MOVLW  30
0BF6:  ADDWF  x63,F
0BF8:  CLRF   19
0BFA:  BTFSC  FF2.7
0BFC:  BSF    19.7
0BFE:  BCF    FF2.7
0C00:  MOVFF  163,185
0C04:  MOVLB  0
0C06:  RCALL  0884
0C08:  BTFSC  19.7
0C0A:  BSF    FF2.7
0C0C:  RETURN 0
0C0E:  TBLRD*+
0C10:  MOVFF  FF6,16A
0C14:  MOVFF  FF7,16B
0C18:  CLRF   19
0C1A:  BTFSC  FF2.7
0C1C:  BSF    19.7
0C1E:  BCF    FF2.7
0C20:  MOVFF  FF5,185
0C24:  RCALL  0884
0C26:  BTFSC  19.7
0C28:  BSF    FF2.7
0C2A:  MOVFF  16A,FF6
0C2E:  MOVFF  16B,FF7
0C32:  MOVLB  1
0C34:  DECFSZ x69,F
0C36:  BRA    0C3A
0C38:  BRA    0C3E
0C3A:  MOVLB  0
0C3C:  BRA    0C0E
0C3E:  MOVLB  0
0C40:  RETURN 0
0C42:  BTFSC  FD8.1
0C44:  BRA    0C4E
0C46:  MOVLW  01
0C48:  MOVWF  FEA
0C4A:  MOVLW  7E
0C4C:  MOVWF  FE9
0C4E:  CLRF   00
0C50:  CLRF   01
0C52:  CLRF   02
0C54:  CLRF   03
0C56:  MOVLB  1
0C58:  CLRF   x7E
0C5A:  CLRF   x7F
0C5C:  CLRF   x80
0C5E:  CLRF   x81
0C60:  MOVF   x7D,W
0C62:  IORWF  x7C,W
0C64:  IORWF  x7B,W
0C66:  IORWF  x7A,W
0C68:  BZ    0CC2
0C6A:  MOVLW  20
0C6C:  MOVWF  x82
0C6E:  BCF    FD8.0
0C70:  RLCF   x76,F
0C72:  RLCF   x77,F
0C74:  RLCF   x78,F
0C76:  RLCF   x79,F
0C78:  RLCF   x7E,F
0C7A:  RLCF   x7F,F
0C7C:  RLCF   x80,F
0C7E:  RLCF   x81,F
0C80:  MOVF   x7D,W
0C82:  SUBWF  x81,W
0C84:  BNZ   0C96
0C86:  MOVF   x7C,W
0C88:  SUBWF  x80,W
0C8A:  BNZ   0C96
0C8C:  MOVF   x7B,W
0C8E:  SUBWF  x7F,W
0C90:  BNZ   0C96
0C92:  MOVF   x7A,W
0C94:  SUBWF  x7E,W
0C96:  BNC   0CB6
0C98:  MOVF   x7A,W
0C9A:  SUBWF  x7E,F
0C9C:  MOVF   x7B,W
0C9E:  BTFSS  FD8.0
0CA0:  INCFSZ x7B,W
0CA2:  SUBWF  x7F,F
0CA4:  MOVF   x7C,W
0CA6:  BTFSS  FD8.0
0CA8:  INCFSZ x7C,W
0CAA:  SUBWF  x80,F
0CAC:  MOVF   x7D,W
0CAE:  BTFSS  FD8.0
0CB0:  INCFSZ x7D,W
0CB2:  SUBWF  x81,F
0CB4:  BSF    FD8.0
0CB6:  RLCF   00,F
0CB8:  RLCF   01,F
0CBA:  RLCF   02,F
0CBC:  RLCF   03,F
0CBE:  DECFSZ x82,F
0CC0:  BRA    0C6E
0CC2:  MOVFF  17E,FEF
0CC6:  MOVFF  17F,FEC
0CCA:  MOVFF  180,FEC
0CCE:  MOVFF  181,FEC
0CD2:  MOVLB  0
0CD4:  RETURN 0
0CD6:  MOVF   FE9,W
0CD8:  MOVLB  1
0CDA:  MOVWF  x67
0CDC:  MOVLW  3B
0CDE:  MOVWF  x6E
0CE0:  MOVLW  9A
0CE2:  MOVWF  x6D
0CE4:  MOVLW  CA
0CE6:  MOVWF  x6C
0CE8:  CLRF   x6B
0CEA:  MOVLW  0A
0CEC:  MOVWF  x69
0CEE:  BSF    FD8.1
0CF0:  MOVLW  01
0CF2:  MOVWF  FEA
0CF4:  MOVLW  63
0CF6:  MOVWF  FE9
0CF8:  MOVFF  166,179
0CFC:  MOVFF  165,178
0D00:  MOVFF  164,177
0D04:  MOVFF  163,176
0D08:  MOVFF  16E,17D
0D0C:  MOVFF  16D,17C
0D10:  MOVFF  16C,17B
0D14:  MOVFF  16B,17A
0D18:  MOVLB  0
0D1A:  RCALL  0C42
0D1C:  MOVF   01,W
0D1E:  MOVF   00,F
0D20:  BNZ   0D48
0D22:  MOVLB  1
0D24:  MOVF   x69,W
0D26:  XORLW  01
0D28:  BTFSS  FD8.2
0D2A:  BRA    0D30
0D2C:  MOVLB  0
0D2E:  BRA    0D48
0D30:  MOVF   x67,W
0D32:  BZ    0D4C
0D34:  ANDLW  0F
0D36:  SUBWF  x69,W
0D38:  BZ    0D3C
0D3A:  BC    0D66
0D3C:  BTFSC  x67.7
0D3E:  BRA    0D66
0D40:  BTFSC  x67.6
0D42:  BRA    0D4C
0D44:  MOVLW  20
0D46:  BRA    0D4E
0D48:  MOVLB  1
0D4A:  CLRF   x67
0D4C:  MOVLW  30
0D4E:  ADDWF  00,F
0D50:  CLRF   19
0D52:  BTFSC  FF2.7
0D54:  BSF    19.7
0D56:  BCF    FF2.7
0D58:  MOVFF  00,185
0D5C:  MOVLB  0
0D5E:  RCALL  0884
0D60:  BTFSC  19.7
0D62:  BSF    FF2.7
0D64:  MOVLB  1
0D66:  BCF    FD8.1
0D68:  MOVFF  16E,179
0D6C:  MOVFF  16D,178
0D70:  MOVFF  16C,177
0D74:  MOVFF  16B,176
0D78:  CLRF   x7D
0D7A:  CLRF   x7C
0D7C:  CLRF   x7B
0D7E:  MOVLW  0A
0D80:  MOVWF  x7A
0D82:  MOVLB  0
0D84:  RCALL  0C42
0D86:  MOVFF  03,16E
0D8A:  MOVFF  02,16D
0D8E:  MOVFF  01,16C
0D92:  MOVFF  00,16B
0D96:  MOVLB  1
0D98:  DECFSZ x69,F
0D9A:  BRA    0CEE
0D9C:  MOVLB  0
0D9E:  RETURN 0
*
0DB0:  TBLRD*+
0DB2:  MOVF   FF5,F
0DB4:  BZ    0DCE
0DB6:  MOVFF  FF6,15F
0DBA:  MOVFF  FF7,160
0DBE:  MOVFF  FF5,161
0DC2:  BRA    0DA0
0DC4:  MOVFF  15F,FF6
0DC8:  MOVFF  160,FF7
0DCC:  BRA    0DB0
0DCE:  GOTO   5030 (RETURN)
*
12F4:  MOVFF  FEA,16E
12F8:  MOVFF  FE9,16D
12FC:  MOVLB  1
12FE:  SWAPF  x67,W
1300:  IORLW  F0
1302:  MOVWF  x69
1304:  ADDWF  x69,F
1306:  ADDLW  E2
1308:  MOVWF  x6A
130A:  ADDLW  32
130C:  MOVWF  x6C
130E:  MOVF   x67,W
1310:  ANDLW  0F
1312:  ADDWF  x6A,F
1314:  ADDWF  x6A,F
1316:  ADDWF  x6C,F
1318:  ADDLW  E9
131A:  MOVWF  x6B
131C:  ADDWF  x6B,F
131E:  ADDWF  x6B,F
1320:  SWAPF  x66,W
1322:  ANDLW  0F
1324:  ADDWF  x6B,F
1326:  ADDWF  x6C,F
1328:  RLCF   x6B,F
132A:  RLCF   x6C,F
132C:  COMF   x6C,F
132E:  RLCF   x6C,F
1330:  MOVF   x66,W
1332:  ANDLW  0F
1334:  ADDWF  x6C,F
1336:  RLCF   x69,F
1338:  MOVLW  07
133A:  MOVWF  x68
133C:  MOVLW  0A
133E:  DECF   x6B,F
1340:  ADDWF  x6C,F
1342:  BNC   133E
1344:  DECF   x6A,F
1346:  ADDWF  x6B,F
1348:  BNC   1344
134A:  DECF   x69,F
134C:  ADDWF  x6A,F
134E:  BNC   134A
1350:  DECF   x68,F
1352:  ADDWF  x69,F
1354:  BNC   1350
1356:  MOVLW  01
1358:  MOVWF  FEA
135A:  MOVLW  68
135C:  MOVWF  FE9
135E:  MOVLW  07
1360:  ANDWF  x6D,W
1362:  BCF    x6D.6
1364:  ADDWF  FE9,F
1366:  MOVLW  00
1368:  ADDWFC FEA,F
136A:  MOVF   FE9,W
136C:  SUBLW  6C
136E:  BNZ   1376
1370:  DECFSZ FEA,W
1372:  BRA    1376
1374:  BSF    x6D.6
1376:  MOVF   FEF,W
1378:  MOVWF  00
137A:  BNZ   138C
137C:  BTFSC  x6D.6
137E:  BRA    138C
1380:  BTFSC  x6D.4
1382:  BRA    13BC
1384:  BTFSC  x6D.3
1386:  BRA    138C
1388:  MOVLW  20
138A:  BRA    1392
138C:  BSF    x6D.3
138E:  BCF    x6D.4
1390:  MOVLW  30
1392:  ADDWF  00,F
1394:  MOVFF  FEA,167
1398:  MOVFF  FE9,166
139C:  CLRF   19
139E:  BTFSC  FF2.7
13A0:  BSF    19.7
13A2:  BCF    FF2.7
13A4:  MOVFF  00,185
13A8:  MOVLB  0
13AA:  CALL   0884
13AE:  BTFSC  19.7
13B0:  BSF    FF2.7
13B2:  MOVFF  167,FEA
13B6:  MOVFF  166,FE9
13BA:  MOVLB  1
13BC:  MOVF   FEE,W
13BE:  BTFSS  x6D.6
13C0:  BRA    136A
13C2:  MOVLB  0
13C4:  RETURN 0
*
2366:  MOVLB  1
2368:  MOVF   x63,W
236A:  MULWF  x65
236C:  MOVFF  FF3,00
2370:  MOVFF  FF4,01
2374:  CLRF   02
2376:  CLRF   03
2378:  MULWF  x66
237A:  MOVF   FF3,W
237C:  ADDWF  01,F
237E:  MOVF   FF4,W
2380:  ADDWFC 02,F
2382:  MOVLW  00
2384:  ADDWFC 03,F
2386:  MOVF   x64,W
2388:  MULWF  x65
238A:  MOVF   FF3,W
238C:  ADDWF  01,F
238E:  MOVF   FF4,W
2390:  ADDWFC 02,F
2392:  MOVLW  00
2394:  ADDWFC 03,F
2396:  MOVF   x64,W
2398:  MULWF  x66
239A:  MOVF   FF3,W
239C:  ADDWF  02,F
239E:  MOVF   FF4,W
23A0:  ADDWFC 03,F
23A2:  MOVLB  0
23A4:  GOTO   5530 (RETURN)
*
251C:  TSTFSZ 01
251E:  BRA    2526
2520:  TSTFSZ 02
2522:  BRA    2528
2524:  BRA    2534
2526:  INCF   02,F
2528:  MOVFF  00,FEE
252C:  DECFSZ 01,F
252E:  BRA    2528
2530:  DECFSZ 02,F
2532:  BRA    2528
2534:  GOTO   2694 (RETURN)
*
256C:  MOVLB  1
256E:  CLRF   x67
2570:  CLRF   x68
2572:  MOVLW  01
2574:  MOVWF  x69
2576:  CLRF   FDA
2578:  CLRF   FD9
257A:  MOVWF  x6C
257C:  MOVLW  5F
257E:  MOVWF  x6B
2580:  MOVLW  01
2582:  MOVWF  FEA
2584:  MOVLW  63
2586:  MOVWF  FE9
2588:  MOVFF  16C,FE2
258C:  MOVFF  16B,FE1
2590:  MOVFF  169,16A
2594:  BCF    FD8.0
2596:  MOVF   FE5,W
2598:  MULWF  FEE
259A:  MOVF   FF3,W
259C:  ADDWFC x67,F
259E:  MOVF   FF4,W
25A0:  ADDWFC x68,F
25A2:  DECFSZ x6A,F
25A4:  BRA    2594
25A6:  MOVFF  167,FDE
25AA:  MOVFF  168,167
25AE:  CLRF   x68
25B0:  BTFSC  FD8.0
25B2:  INCF   x68,F
25B4:  INCF   x6B,F
25B6:  BTFSC  FD8.2
25B8:  INCF   x6C,F
25BA:  INCF   x69,F
25BC:  MOVF   x69,W
25BE:  SUBLW  05
25C0:  BNZ   2580
25C2:  MOVLB  0
25C4:  GOTO   25EE (RETURN)
*
2F50:  MOVLW  8E
2F52:  MOVWF  00
2F54:  MOVFF  166,01
2F58:  MOVFF  165,02
2F5C:  CLRF   03
2F5E:  MOVF   01,F
2F60:  BNZ   2F74
2F62:  MOVFF  02,01
2F66:  CLRF   02
2F68:  MOVLW  08
2F6A:  SUBWF  00,F
2F6C:  MOVF   01,F
2F6E:  BNZ   2F74
2F70:  CLRF   00
2F72:  BRA    2F84
2F74:  BCF    FD8.0
2F76:  BTFSC  01.7
2F78:  BRA    2F82
2F7A:  RLCF   02,F
2F7C:  RLCF   01,F
2F7E:  DECF   00,F
2F80:  BRA    2F74
2F82:  BCF    01.7
2F84:  RETURN 0
2F86:  MOVLB  1
2F88:  MOVF   x76,W
2F8A:  BTFSC  FD8.2
2F8C:  BRA    3070
2F8E:  MOVWF  00
2F90:  MOVF   x7A,W
2F92:  BTFSC  FD8.2
2F94:  BRA    3070
2F96:  ADDWF  00,F
2F98:  BNC   2FA2
2F9A:  MOVLW  81
2F9C:  ADDWF  00,F
2F9E:  BC    3070
2FA0:  BRA    2FAA
2FA2:  MOVLW  7F
2FA4:  SUBWF  00,F
2FA6:  BNC   3070
2FA8:  BZ    3070
2FAA:  MOVFF  177,17E
2FAE:  MOVF   x7B,W
2FB0:  XORWF  x7E,F
2FB2:  BSF    x77.7
2FB4:  BSF    x7B.7
2FB6:  MOVF   x79,W
2FB8:  MULWF  x7D
2FBA:  MOVFF  FF4,180
2FBE:  MOVF   x78,W
2FC0:  MULWF  x7C
2FC2:  MOVFF  FF4,03
2FC6:  MOVFF  FF3,17F
2FCA:  MULWF  x7D
2FCC:  MOVF   FF3,W
2FCE:  ADDWF  x80,F
2FD0:  MOVF   FF4,W
2FD2:  ADDWFC x7F,F
2FD4:  MOVLW  00
2FD6:  ADDWFC 03,F
2FD8:  MOVF   x79,W
2FDA:  MULWF  x7C
2FDC:  MOVF   FF3,W
2FDE:  ADDWF  x80,F
2FE0:  MOVF   FF4,W
2FE2:  ADDWFC x7F,F
2FE4:  MOVLW  00
2FE6:  CLRF   02
2FE8:  ADDWFC 03,F
2FEA:  ADDWFC 02,F
2FEC:  MOVF   x77,W
2FEE:  MULWF  x7D
2FF0:  MOVF   FF3,W
2FF2:  ADDWF  x7F,F
2FF4:  MOVF   FF4,W
2FF6:  ADDWFC 03,F
2FF8:  MOVLW  00
2FFA:  ADDWFC 02,F
2FFC:  MOVF   x77,W
2FFE:  MULWF  x7C
3000:  MOVF   FF3,W
3002:  ADDWF  03,F
3004:  MOVF   FF4,W
3006:  ADDWFC 02,F
3008:  MOVLW  00
300A:  CLRF   01
300C:  ADDWFC 01,F
300E:  MOVF   x79,W
3010:  MULWF  x7B
3012:  MOVF   FF3,W
3014:  ADDWF  x7F,F
3016:  MOVF   FF4,W
3018:  ADDWFC 03,F
301A:  MOVLW  00
301C:  ADDWFC 02,F
301E:  ADDWFC 01,F
3020:  MOVF   x78,W
3022:  MULWF  x7B
3024:  MOVF   FF3,W
3026:  ADDWF  03,F
3028:  MOVF   FF4,W
302A:  ADDWFC 02,F
302C:  MOVLW  00
302E:  ADDWFC 01,F
3030:  MOVF   x77,W
3032:  MULWF  x7B
3034:  MOVF   FF3,W
3036:  ADDWF  02,F
3038:  MOVF   FF4,W
303A:  ADDWFC 01,F
303C:  INCF   00,F
303E:  BTFSC  01.7
3040:  BRA    304C
3042:  RLCF   x7F,F
3044:  RLCF   03,F
3046:  RLCF   02,F
3048:  RLCF   01,F
304A:  DECF   00,F
304C:  MOVLW  00
304E:  BTFSS  x7F.7
3050:  BRA    3066
3052:  INCF   03,F
3054:  ADDWFC 02,F
3056:  ADDWFC 01,F
3058:  MOVF   01,W
305A:  BNZ   3066
305C:  MOVF   02,W
305E:  BNZ   3066
3060:  MOVF   03,W
3062:  BNZ   3066
3064:  INCF   00,F
3066:  BTFSC  x7E.7
3068:  BSF    01.7
306A:  BTFSS  x7E.7
306C:  BCF    01.7
306E:  BRA    3078
3070:  CLRF   00
3072:  CLRF   01
3074:  CLRF   02
3076:  CLRF   03
3078:  MOVLB  0
307A:  RETURN 0
307C:  MOVLB  1
307E:  MOVF   x76,W
3080:  SUBLW  B6
3082:  MOVWF  x76
3084:  CLRF   03
3086:  MOVFF  177,17A
308A:  BSF    x77.7
308C:  BCF    FD8.0
308E:  RRCF   x77,F
3090:  RRCF   x78,F
3092:  RRCF   x79,F
3094:  RRCF   03,F
3096:  RRCF   02,F
3098:  RRCF   01,F
309A:  RRCF   00,F
309C:  DECFSZ x76,F
309E:  BRA    308C
30A0:  BTFSS  x7A.7
30A2:  BRA    30BA
30A4:  COMF   00,F
30A6:  COMF   01,F
30A8:  COMF   02,F
30AA:  COMF   03,F
30AC:  INCF   00,F
30AE:  BTFSC  FD8.2
30B0:  INCF   01,F
30B2:  BTFSC  FD8.2
30B4:  INCF   02,F
30B6:  BTFSC  FD8.2
30B8:  INCF   03,F
30BA:  MOVLB  0
30BC:  GOTO   3116 (RETURN)
30C0:  MOVF   FE9,W
30C2:  MOVLB  1
30C4:  MOVWF  x6E
30C6:  MOVF   x6D,W
30C8:  MOVWF  x70
30CA:  BZ    3102
30CC:  MOVFF  16C,179
30D0:  MOVFF  16B,178
30D4:  MOVFF  16A,177
30D8:  MOVFF  169,176
30DC:  CLRF   x7D
30DE:  CLRF   x7C
30E0:  MOVLW  20
30E2:  MOVWF  x7B
30E4:  MOVLW  82
30E6:  MOVWF  x7A
30E8:  MOVLB  0
30EA:  RCALL  2F86
30EC:  MOVFF  03,16C
30F0:  MOVFF  02,16B
30F4:  MOVFF  01,16A
30F8:  MOVFF  00,169
30FC:  MOVLB  1
30FE:  DECFSZ x70,F
3100:  BRA    30CC
3102:  MOVFF  16C,179
3106:  MOVFF  16B,178
310A:  MOVFF  16A,177
310E:  MOVFF  169,176
3112:  MOVLB  0
3114:  BRA    307C
3116:  MOVFF  03,16C
311A:  MOVFF  02,16B
311E:  MOVFF  01,16A
3122:  MOVFF  00,169
3126:  MOVLB  1
3128:  BTFSS  x6C.7
312A:  BRA    3146
312C:  DECF   x6E,F
312E:  BSF    x6E.5
3130:  COMF   x69,F
3132:  COMF   x6A,F
3134:  COMF   x6B,F
3136:  COMF   x6C,F
3138:  INCF   x69,F
313A:  BTFSC  FD8.2
313C:  INCF   x6A,F
313E:  BTFSC  FD8.2
3140:  INCF   x6B,F
3142:  BTFSC  FD8.2
3144:  INCF   x6C,F
3146:  MOVLW  3B
3148:  MOVWF  x75
314A:  MOVLW  9A
314C:  MOVWF  x74
314E:  MOVLW  CA
3150:  MOVWF  x73
3152:  CLRF   x72
3154:  MOVLW  0A
3156:  MOVWF  x70
3158:  MOVF   x6D,W
315A:  BTFSC  FD8.2
315C:  INCF   x6E,F
315E:  BSF    FD8.1
3160:  MOVLW  01
3162:  MOVWF  FEA
3164:  MOVLW  69
3166:  MOVWF  FE9
3168:  MOVFF  16C,179
316C:  MOVFF  16B,178
3170:  MOVFF  16A,177
3174:  MOVFF  169,176
3178:  MOVFF  175,17D
317C:  MOVFF  174,17C
3180:  MOVFF  173,17B
3184:  MOVFF  172,17A
3188:  MOVLB  0
318A:  CALL   0C42
318E:  MOVF   01,W
3190:  MOVF   00,F
3192:  BNZ   31BA
3194:  MOVLB  1
3196:  INCF   x6D,W
3198:  SUBWF  x70,W
319A:  BTFSS  FD8.2
319C:  BRA    31A2
319E:  MOVLB  0
31A0:  BRA    31BA
31A2:  MOVF   x6E,W
31A4:  BZ    31C0
31A6:  ANDLW  0F
31A8:  SUBWF  x70,W
31AA:  BZ    31AE
31AC:  BC    3266
31AE:  BTFSC  x6E.7
31B0:  BRA    3266
31B2:  BTFSC  x6E.6
31B4:  BRA    31C0
31B6:  MOVLW  20
31B8:  BRA    324C
31BA:  MOVLW  20
31BC:  MOVLB  1
31BE:  ANDWF  x6E,F
31C0:  BTFSS  x6E.5
31C2:  BRA    31EE
31C4:  BCF    x6E.5
31C6:  MOVF   x6D,W
31C8:  BTFSS  FD8.2
31CA:  DECF   x6E,F
31CC:  MOVF   00,W
31CE:  MOVWF  x6E
31D0:  CLRF   19
31D2:  BTFSC  FF2.7
31D4:  BSF    19.7
31D6:  BCF    FF2.7
31D8:  MOVLW  2D
31DA:  MOVWF  x85
31DC:  MOVLB  0
31DE:  CALL   0884
31E2:  BTFSC  19.7
31E4:  BSF    FF2.7
31E6:  MOVLB  1
31E8:  MOVF   x6E,W
31EA:  MOVWF  00
31EC:  CLRF   x6E
31EE:  MOVF   x6D,W
31F0:  SUBWF  x70,W
31F2:  BNZ   321A
31F4:  MOVF   00,W
31F6:  MOVWF  x6E
31F8:  CLRF   19
31FA:  BTFSC  FF2.7
31FC:  BSF    19.7
31FE:  BCF    FF2.7
3200:  MOVLW  2E
3202:  MOVWF  x85
3204:  MOVLB  0
3206:  CALL   0884
320A:  BTFSC  19.7
320C:  BSF    FF2.7
320E:  MOVLB  1
3210:  MOVF   x6E,W
3212:  MOVWF  00
3214:  MOVLW  20
3216:  ANDWF  x6E,F
3218:  MOVLW  00
321A:  MOVLW  30
321C:  BTFSS  x6E.5
321E:  BRA    324C
3220:  BCF    x6E.5
3222:  MOVF   x6D,W
3224:  BTFSS  FD8.2
3226:  DECF   x6E,F
3228:  MOVF   00,W
322A:  MOVWF  x6E
322C:  CLRF   19
322E:  BTFSC  FF2.7
3230:  BSF    19.7
3232:  BCF    FF2.7
3234:  MOVLW  2D
3236:  MOVWF  x85
3238:  MOVLB  0
323A:  CALL   0884
323E:  BTFSC  19.7
3240:  BSF    FF2.7
3242:  MOVLB  1
3244:  MOVF   x6E,W
3246:  MOVWF  00
3248:  CLRF   x6E
324A:  MOVLW  30
324C:  ADDWF  00,F
324E:  CLRF   19
3250:  BTFSC  FF2.7
3252:  BSF    19.7
3254:  BCF    FF2.7
3256:  MOVFF  00,185
325A:  MOVLB  0
325C:  CALL   0884
3260:  BTFSC  19.7
3262:  BSF    FF2.7
3264:  MOVLB  1
3266:  BCF    FD8.1
3268:  MOVFF  175,179
326C:  MOVFF  174,178
3270:  MOVFF  173,177
3274:  MOVFF  172,176
3278:  CLRF   x7D
327A:  CLRF   x7C
327C:  CLRF   x7B
327E:  MOVLW  0A
3280:  MOVWF  x7A
3282:  MOVLB  0
3284:  CALL   0C42
3288:  MOVFF  03,175
328C:  MOVFF  02,174
3290:  MOVFF  01,173
3294:  MOVFF  00,172
3298:  MOVLB  1
329A:  DECFSZ x70,F
329C:  BRA    315E
329E:  MOVLB  0
32A0:  RETURN 0
*
5D7E:  ADDWF  FE8,W
5D80:  CLRF   FF7
5D82:  RLCF   FF7,F
5D84:  ADDLW  99
5D86:  MOVWF  FF6
5D88:  MOVLW  5D
5D8A:  ADDWFC FF7,F
5D8C:  TBLRD*-
5D8E:  MOVF   FF5,W
5D90:  MOVWF  FFA
5D92:  TBLRD*
5D94:  MOVF   FF5,W
5D96:  MOVWF  FF9
5D98:  DATA CE,5B
5D9A:  DATA 7C,5C
5D9C:  DATA 6C,5D
5D9E:  DATA 6C,5D
5DA0:  DATA 5C,5C
5DA2:  DATA 4A,5D
5DA4:  DATA 0A,5D
5DA6:  DATA 2C,5D
....................  
.................... #list 
....................  
....................     //#include <18F4520.h> 
....................     #device adc=10 
....................     #device HIGH_INTS=TRUE  
....................     #device PASS_STRINGS=IN_RAM   
....................  
.................... //    #fuses HSM, NOWDT, BROWNOUT, PUT, NOPBADEN, NOHFOFST  
.................... //    #fuses NOPLLEN        //HW PLL disabled, PLL enabled in software  
.................... //    #fuses MCLR           //Master Clear pin enabled  
.................... //    #fuses PROTECT        //Code protected from reads  
.................... //    #use delay(clock=10MHz,crystal=10MHz) 
....................      
....................     #FUSES NOWDT                    //No Watch Dog Timer 
....................     #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
....................     #FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
....................     #FUSES NOIESO                   //Internal External Switch Over mode disabled 
....................     #FUSES NOBROWNOUT               //No brownout reset 
....................     #FUSES NOPBADEN                 //PORTB pins are configured as digital I/O on RESET 
....................     #FUSES NOHFOFST                 //High Frequency INTRC waits until stable before clocking CPU //1845k22 de AKTÝF 
....................     #FUSES NOSTVREN                 //Stack full/underflow will not cause reset 
....................     #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................     #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................     #FUSES PROTECT                  //Code protected from reads 
....................     #FUSES PLLEN 
....................     #FUSES PRIMARY_ON   
....................     #FUSES MCLR  
....................  
....................     #use delay(clock=40000000,crystal=10000000)    
*
0834:  MOVLW  01
0836:  MOVWF  FEA
0838:  MOVLW  86
083A:  MOVWF  FE9
083C:  MOVF   FEF,W
083E:  BZ    085C
0840:  MOVLW  0C
0842:  MOVWF  01
0844:  CLRF   00
0846:  DECFSZ 00,F
0848:  BRA    0846
084A:  DECFSZ 01,F
084C:  BRA    0844
084E:  MOVLW  F7
0850:  MOVWF  00
0852:  DECFSZ 00,F
0854:  BRA    0852
0856:  BRA    0858
0858:  DECFSZ FEF,F
085A:  BRA    0840
085C:  RETURN 0
....................  
.................... //    #FUSES NOWDT  
.................... //    #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale  
.................... //    #FUSES HSH                      //High speed with 4x PLL  
.................... //    #FUSES PROTECT                //Code  protected from reading  
.................... //    #FUSES NOBROWNOUT               //No brownout reset  
.................... //    #FUSES NOPUT                    //No Power Up Timer  
.................... //    #FUSES NOCPD                    //No EE protection  
.................... //    #FUSES NOSTVREN                   //Stack full/underflow will cause reset  
.................... //    #FUSES NODEBUG                  //No Debug mode for ICD  
.................... //    #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O  
.................... //    #FUSES WRT                    //Program memory not write protected  
.................... //    #FUSES WRTD                   //Data EEPROM not write protected  
.................... //    #FUSES NOIESO                     //Internal External Switch Over mode enabled  
.................... //    #FUSES NOFCMEN                    //Fail-safe clock monitor enabled  
.................... //    #FUSES NOPBADEN                 //PORTB pins are configured as digital I/O on RESET  
.................... //    #FUSES NOWRTC                   //configuration not registers write protected  
.................... //    #FUSES NOWRTB                   //Boot block not write protected  
.................... //    #FUSES NOEBTR                   //Memory not protected from table reads  
.................... //    #FUSES NOEBTRB                  //Boot block not protected from table reads  
.................... //    #FUSES NOCPB                    //No Boot Block code protection  
.................... //    #FUSES MCLR                     //Master Clear pin enabled  
.................... //    #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)  
.................... //    #FUSES PLLEN                    //Enable PLL 4x Clock  
.................... //    #FUSES PRIMARY_ON     
.................... //    #FUSES NOHFOFST                 //High Frequency INTRC waits until stable before clocking CPU  
.................... // 
.................... //    #use delay(clock=40Mhz, crystal=10MHz)  
....................      
....................     #use fast_io(A) 
....................     #use fast_io(B) 
....................     #use fast_io(C) 
....................     #use fast_io(D) 
....................     #use fast_io(E) 
....................  
....................     #use rs232(baud=9600,parity=N, xmit=PIN_D6, rcv=PIN_D7,bits=8,DISABLE_INTS,STREAM=softSerial)   //seri port pin tanýmlama 
*
0DA0:  BTFSS  FA4.4
0DA2:  BRA    0DA0
0DA4:  MOVLB  1
0DA6:  MOVFF  161,F73
0DAA:  MOVLB  0
0DAC:  GOTO   0DC4 (RETURN)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_C6, rcv=PIN_C7,bits=8,DISABLE_INTS,STREAM=dfPlayerSerial)   //seri port pin tanýmlama 
*
10CE:  BTFSS  F9E.4
10D0:  BRA    10CE
10D2:  MOVLB  1
10D4:  MOVFF  17D,FAD
10D8:  MOVLB  0
10DA:  GOTO   1164 (RETURN)
....................     //#use rs232(uart1,baud =9600,DISABLE_INTS,STREAM=dfPlayerSerial)  
....................     //#use rs232(uart2,baud =9600,DISABLE_INTS,STREAM=softSerial) 
....................      
....................     //#use timer(timer=1,tick=100us,bits=32,NOISR)   
....................     //#USE TIMER(TIMER=1,TICK=1ms,BITS=32,ISR)   
....................     #define TICK_TYPE unsigned int32  
....................  
....................     extern unsigned int32 timerIntSay; 
....................     int32 oyunSureSaySaniye=0; 
....................      
....................     void delay_m_us(unsigned int16 n) ; 
....................     long map(long x, long in_min, long in_max, long out_min, long out_max); 
....................     void ISR_RB0(); 
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* MAIN_KOSTUR_H */ 
....................  
....................  
.................... #include "timer.c" 
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 25 Aralýk 2018 Salý, 08:35 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................  
....................     unsigned int32 timerIntSay=0; 
....................     unsigned long timer_m1_say=0; 
....................     unsigned long timer_m2_say=0; 
....................     unsigned long timer_m3_say=0; 
....................      
....................     #define millis() timerIntSay 
....................     #define setMillis(x) timerIntSay=x 
....................  
....................     void timer_kur(); 
....................     void Timer0_int(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... void timer_kur(){ 
....................      
....................     setup_timer_0(T0_INTERNAl | T0_8_BIT | T0_DIV_64);    // clock 48Mhz,32MHz 
*
0A04:  MOVLW  C5
0A06:  MOVWF  FD5
....................     //set_timer0(0x43);            //1000uS    clock 48Mhz 
....................     //set_timer0(0x82);            //1000uS 32MHZ 
....................     set_timer0(0x63);            //1000uS 40MHZ 
0A08:  CLRF   FD7
0A0A:  MOVLW  63
0A0C:  MOVWF  FD6
....................     //set_timer0(0x05);            //1000uS 64MHZ 
.................... //    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
.................... //    set_timer1(0xFB1D);   //64285 1000uS div_8 ile kesme    
.................... //    setup_timer_3(T3_INTERNAL|T3_DIV_BY_8); 
.................... //    set_timer3(0xFB1D); 
.................... //    clear_interrupt(INT_TIMER3); 
.................... //    enable_interrupts(INT_TIMER3);  
.................... //    disable_interrupts(INT_TIMER3); 
.................... //    enable_interrupts(PERIPH); 
.................... //    enable_interrupts(INT_TIMER1); 
....................      
....................     enable_interrupts(INT_TIMER0); 
0A0E:  BSF    FF2.5
0A10:  GOTO   4CD8 (RETURN)
....................    // enable_interrupts(GLOBAL); 
....................       
.................... } 
.................... long say=0; 
.................... #INT_TIMER0 HIGH                    //Timer0 Kesmesi 
.................... void Timer0_int(){ 
....................    // set_timer0(0x43);            //1000uS 16Mhz 
....................   // set_timer0(0x82);            //1000uS 32MHZ 
....................      set_timer0(0x62+20);            //1000uS 40MHZ 
*
01AA:  CLRF   FD7
01AC:  MOVLW  76
01AE:  MOVWF  FD6
....................    // set_timer0(0x05);            //1000uS 64MHZ 
....................     
.................... //   say++; 
.................... //   if(say>=100){ 
.................... //       output_toggle(PIN_B3); 
.................... //       say=0; 
.................... //   } 
.................... //    output_toggle(PIN_A4); 
....................     timerIntSay++; 
01B0:  MOVLW  01
01B2:  ADDWF  30,F
01B4:  BTFSC  FD8.0
01B6:  INCF   31,F
01B8:  BTFSC  FD8.2
01BA:  INCF   32,F
01BC:  BTFSC  FD8.2
01BE:  INCF   33,F
....................     timer_m1_say++;     //motorlarýn çalýþma surelerini sayýyorlar. 
01C0:  INCF   38,F
01C2:  BTFSC  FD8.2
01C4:  INCF   39,F
....................     timer_m2_say++; 
01C6:  INCF   3A,F
01C8:  BTFSC  FD8.2
01CA:  INCF   3B,F
....................     //timer_m3_say++; 
....................  
....................     clear_interrupt(INT_TIMER0 ) ; 
01CC:  BCF    FF2.2
.................... } 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 25 Aralýk 2018 Salý, 08:35 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................  
....................     unsigned int32 timerIntSay=0; 
....................     unsigned long timer_m1_say=0; 
....................     unsigned long timer_m2_say=0; 
....................     unsigned long timer_m3_say=0; 
....................      
....................     #define millis() timerIntSay 
....................     #define setMillis(x) timerIntSay=x 
....................  
....................     void timer_kur(); 
....................     void Timer0_int(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include <stdlib.h> //rand vb ,için 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
01CE:  BCF    FF2.2
01D0:  GOTO   0116
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char **endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char **endptr); 
.................... float64 strtod(char *s,char **endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, (char*)0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char **endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char **endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char **endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... size_t mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
*
25C8:  MOVFF  45,162
25CC:  MOVFF  44,161
25D0:  MOVFF  43,160
25D4:  MOVFF  42,15F
25D8:  MOVLW  41
25DA:  MOVLB  1
25DC:  MOVWF  x66
25DE:  MOVLW  C6
25E0:  MOVWF  x65
25E2:  MOVLW  4E
25E4:  MOVWF  x64
25E6:  MOVLW  6D
25E8:  MOVWF  x63
25EA:  MOVLB  0
25EC:  BRA    256C
25EE:  MOVLW  39
25F0:  MOVLB  1
25F2:  ADDWF  00,W
25F4:  MOVWF  42
25F6:  MOVLW  30
25F8:  ADDWFC 01,W
25FA:  MOVWF  43
25FC:  MOVLW  00
25FE:  ADDWFC 02,W
2600:  MOVWF  44
2602:  MOVLW  00
2604:  ADDWFC 03,W
2606:  MOVWF  45
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
2608:  MOVFF  44,00
260C:  MOVFF  45,01
2610:  CLRF   02
2612:  CLRF   03
2614:  MOVFF  45,161
2618:  MOVFF  44,160
261C:  MOVFF  45,167
2620:  MOVFF  44,166
2624:  MOVLW  7F
2626:  MOVWF  x69
2628:  SETF   x68
262A:  MOVLB  0
262C:  CALL   0AFC
2630:  MOVFF  00,01
2634:  MOVFF  03,02
2638:  GOTO   269C (RETURN)
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "kostur_kart_tanimlar.h" 
.................... /*  
....................  * File:   kostur_kart_tanimlar.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 09 Mart 2018 Cuma, 15:36 
....................  */ 
....................  
.................... #ifndef KOSTUR_KART_TANIMLAR_H 
.................... #define	KOSTUR_KART_TANIMLAR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     //unsigned int16 spiData=0;  //16 bit veri gönderileceði zaman 
....................     unsigned int8 spiDataH=0,spiDataM=0,spiDataL=0; 
....................     int8 jetonSay=0; 
....................     void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit); 
....................     void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL); 
....................      
....................     #define spi_yaz16() hc595_spi_yaz(spiData,16) 
....................     #define spi_yaz24() hc595_spi_24bit_yaz(spiDataH,spiDataM,spiDataL) 
....................     #define hc_595_clr_allPins() hc595_spi_24bit_yaz(0x00,0x00,0x00);//delay_ms(100) 
....................     #define hc_595_set_allPins() hc595_spi_24bit_yaz(0xFF,0xFF,0xFF);delay_ms(100) 
....................      
....................     // spiDataL  ilk 8bit 
....................     #define l2_1    0 
....................     #define l2_2    1 
....................     #define l2_3    2 
....................     #define l1_1    3 
....................     #define l1_2    4 
....................     #define l1_3    5 
....................     #define led_k   6 
....................     #define led_y   7 
....................     // spiDataM ikinci 8 bit 
....................     #define led_m   0 
....................     #define c2      1 
....................     #define b2      2 
....................     #define a2      3 
....................     #define c1      4 
....................     #define b1      5 
....................     #define a1      6 
....................     #define u_led   7 
....................     // spiDataH üçüncü 8 bit 
....................     #define in1     0 
....................     #define in2     1 
....................     #define in3     2 
....................     #define in4     3 
....................     #define in5     4 
....................     #define in6     5 
....................     #define in7     6 
....................     #define in8     7 
....................  
....................     //74HC4051_1 tanýmlamalarý 
....................  
....................     #define an_sw1_1_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw1_2_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw1_3_sec() bit_clear(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1); spi_yaz24()      
....................      
....................     #define an_sw2_1_sec() bit_set(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw2_2_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw2_3_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1); spi_yaz24()   
....................                                                         
....................     #define an_dFSesSec() bit_clear(spiDataM,a1);bit_set(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()  
....................      
....................                          
....................     #define dfSesAyarla() an_dFSesSec();set_adc_channel(0); delay_us(20); \ 
....................                            mp3_set_volume(map(read_adc(),0,1023,0,30))     \ 
....................  
....................     #define an_sa_m1_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m1_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_1_sec() bit_clear(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_2_sec() bit_set(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24() 
....................     #define an_sa_m3_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m3_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................  
....................     #define o1_L1_on()  bit_set(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_on()  bit_set(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_on()  bit_set(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_on() o1_L1_on();o1_L2_on();o1_L3_on() 
....................  
....................     #define o1_L1_off()  bit_clear(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_off()  bit_clear(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_off()  bit_clear(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_off()  o1_L1_off();o1_L2_off();o1_L3_off() 
....................  
....................     #define o2_L1_on()  bit_set(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_on()  bit_set(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_on()  bit_set(spiDataL,l2_3);spi_yaz24() 
....................      #define o2_L123_on() o2_L1_on();o2_L2_on();o2_L3_on() 
....................  
....................     #define o2_L1_off()  bit_clear(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_off()  bit_clear(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_off()  bit_clear(spiDataL,l2_3);spi_yaz24() 
....................     #define o2_L123_off()  o2_L1_off();o2_L2_off();o1_L3_off() 
....................  
....................     #define sw_led_off() o1_L123_off(); o2_L123_off() 
....................     #define sw_led_on() o1_L123_on();o2_L123_on() 
....................      
....................     #define rgb_kirmizi_on()  bit_set(spiDataL,led_k);spi_yaz24() 
....................     #define rgb_kirmizi_off() bit_clear(spiDataL,led_k);spi_yaz24() 
....................      
....................     #define rgb_yesil_on() bit_set(spiDataL,led_y);spi_yaz24() 
....................     #define rgb_yesil_off() bit_clear(spiDataL,led_y);spi_yaz24() 
....................      
....................     #define rgb_mavi_on() bit_set(spiDataM,led_m);spi_yaz24() 
....................     #define rgb_mavi_off() bit_clear(spiDataM,led_m);spi_yaz24() 
....................  
....................     //#define rgb_beyaz_on() rgb_kirmizi_on();rgb_yesil_on();rgb_mavi_on() 
....................     #define rgb_beyaz_on()   bit_set(spiDataL,led_k); bit_set(spiDataL,led_y);  \ 
....................                              bit_set(spiDataM,led_m); spi_yaz24()              \ 
....................  
....................     //#define rgb_beyaz_off() rgb_kirmizi_off();rgb_yesil_off();rgb_mavi_off() 
....................     #define rgb_beyaz_off() bit_clear(spiDataL,led_k);bit_clear(spiDataL,led_y);    \ 
....................                             bit_clear(spiDataM,led_m);spi_yaz24()                   \ 
....................  
....................     #define motor1_ileri() bit_set(spiDataH,in1);    \ 
....................                            bit_clear(spiDataH,in2);  \ 
....................                            spi_yaz24()              \                       
....................                            //output_high(PIN_C2)      \ 
....................                           // Rc2 : ccp1                       
....................     #define motor1_geri()  bit_set(spiDataH,in2);    \ 
....................                            bit_clear(spiDataH,in1);  \ 
....................                            spi_yaz24()              \                       
....................                           // output_high(PIN_C2)    \       //PWM yoksa  
....................     #define motor1_dur() bit_clear(spiDataH,in1);    \ 
....................                          bit_clear(spiDataH,in2);    \                          
....................                          spi_yaz24()                \ 
....................                                   
....................     #define motor2_ileri() bit_set(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()              \                        
....................                           // output_high(PIN_C11)    \       //PWM yoksa  
....................                           // Rc1 : ccp2 
....................     #define motor2_geri()  bit_set(spiDataH,in4);    \ 
....................                            bit_clear(spiDataH,in3);  \ 
....................                            spi_yaz24()              \ 
....................                                     
....................     #define motor2_dur()   bit_clear(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()               \          
....................                            //output_high(PIN_C1)    \       //PWM yoksa    
....................     #define motor3_ileri() bit_set(spiDataH,in5);    \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \      //En pin +5V'ta donanýmda   
....................                                    
....................     #define motor3_geri()  bit_set(spiDataH,in6);    \ 
....................                            bit_clear(spiDataH,in5);  \ 
....................                            spi_yaz24()              \ 
....................                                   
....................     #define motor3_dur()   bit_clear(spiDataH,in5);  \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \ 
....................                             
....................     #define oyunbittiM12dur_doBrk() if(sa_m1_2()||sa_m2_2()||f_oyunBitti)\ 
....................                                     {                                   \ 
....................                                         motor1_dur();                   \ 
....................                                         motor2_dur();                   \ 
....................                                         f_oyunBitti=TRUE;               \  
....................                                         break;                          \ 
....................                                     }                                   \ 
....................                             
....................  
....................      
....................     #define jtn_pin PIN_B0                  //Pin ler  büyük harfle olmalý 
....................     #define ticket_out_pin PIN_C0 
....................      //delay_ms(300);;                               
....................     #define jetonKontrol() if(!input(jtn_pin)){                         \ 
....................                                                                         \ 
....................                             jetonSay++;                                 \ 
....................                            }                                            \ 
....................                            if(jetonSay>=jtnTLMik){                      \ 
....................                                 jetonAtildi=TRUE;                       \ 
....................                                 jetonSay=0;                             \ 
....................                            }                                            \ 
....................      
....................     #define btn1 PIN_A5 
....................     #define btn2 PIN_A3                        
....................     #define btn3 PIN_A2 
....................  
....................    /// wav dosyasý tanýmlamlarý 
....................     /// mp3-wav index 
.................... 	#define wav_atKisnemesi     1 
.................... 	#define wav_atKosmasi       2 
.................... 	#define wav_suDamlasi       3 
.................... 	#define wav_heySesi         4 
.................... 	#define wav_alkisSesi       5 
.................... 	#define wav_oyunBitti       6 
.................... 	#define wav_getReady        7 
.................... 	#define wav_whoosh          8 
.................... 	#define wav_jeton           9 
.................... 	#define mp3_remix           10 
.................... 	#define mp3_tavsan          11 
.................... 	#define wav_waterDrop       12 
.................... 	#define mp3_adele_Rolling   14 
.................... 	#define wav_duduk_basla     15 
.................... 	#define wav_ding            16 
.................... 	#define mp3_mars            17 
.................... 	#define mp3_getlowve_araba	18 
....................     #define mp3_beep_uyari      19 
....................  
....................      //// bosta rastgele mp3 müzik 
....................      
....................     #define mp3_adele_Rolling2  20 
....................     #define mp3_anitta          21 
....................     #define mp3_love_lo         22 
....................     #define mp3_agen            23 
....................     #define mp3_dejavu          24 
....................     #define mp3_rain            25 
....................     #define mp3_aweli           26 
....................  
....................     #define wav_remix_sure 200000 //(3*60+20)*1000  //3:20 mS degeri.... 
....................     #define wav_atKisnemesi_sure  1500 
....................     #define wav_atKosmasi_sure    2000 
....................     #define wav_whoosh_sure  20 //300//350 
....................  
....................     #define oyunSure_1dk    (unsigned int32)(60*1250)//60000UL 
....................     #define oyunSure_3dk    (unsigned int32)(180*1250)//180000UL 
....................     #define oyunSure_5dk    (unsigned int32)(300*1250)//300000UL 
....................     #define oyunSure_7dk    (unsigned int32)(420*1250)//420000UL 
....................     #define oyunSure_10dk   (unsigned int32)(600*1250)//600000UL 
....................  
....................     #define millisMaxSayi 0xFFFFFFFF 
....................  
....................     #define birliDelikPuan 30 
....................     #define ikiliDelikPuan 20 
....................     #define ucluDelikPuan  10 
....................  
....................     #define dfPplayerMaxSes() mp3_set_volume (29);delay_ms(100)//48 
....................     #define dfPlayerNormSes() mp3_set_volume(20);delay_ms(100) 
....................     #define dfPlayerMinSes() mp3_set_volume(1);delay_ms(100) 
....................  
....................     #define textBufSil() text_sil() 
....................  
....................     #define ee_adres_jtnCount   0   //LSB Byte, high 3 
....................     #define ee_adres_jtnTL      4 
....................     #define ee_adres_Msure_1    5   //LSB Byte, high 6 
....................     #define ee_adres_Msure_2    7   //LSB Byte, high 8 
....................     #define ee_adres_Msure_3    9   //LSB Byte, high 10 
....................     #define ee_adres_oyunSure   11 
....................     #define ee_adres_dfSes      12 
....................  
....................  
....................     #define ee_adres_sw11_an_min_0_h      13 
....................     #define ee_adres_sw11_an_min_0_l      14 
....................     #define ee_adres_sw12_an_min_1_h      15 
....................     #define ee_adres_sw12_an_min_1_l      16 
....................     #define ee_adres_sw13_an_min_2_h      17 
....................     #define ee_adres_sw13_an_min_2_l      18 
....................     #define ee_adres_sw21_an_min_3_h      19 
....................     #define ee_adres_sw21_an_min_3_l      20 
....................     #define ee_adres_sw22_an_min_4_h      21 
....................     #define ee_adres_sw22_an_min_4_l      22 
....................     #define ee_adres_sw23_an_min_5_h      23 
....................     #define ee_adres_sw23_an_min_5_l      24 
....................  
....................     #define ee_adres_sw11_an_max_0_h      25 
....................     #define ee_adres_sw11_an_max_0_l      26 
....................     #define ee_adres_sw12_an_max_1_h      27 
....................     #define ee_adres_sw12_an_max_1_l      28 
....................     #define ee_adres_sw13_an_max_2_h      29 
....................     #define ee_adres_sw13_an_max_2_l      30 
....................     #define ee_adres_sw21_an_max_3_h      31 
....................     #define ee_adres_sw21_an_max_3_l      32 
....................     #define ee_adres_sw22_an_max_4_h      33 
....................     #define ee_adres_sw22_an_max_4_l      34 
....................     #define ee_adres_sw23_an_max_5_h      35 
....................     #define ee_adres_sw23_an_max_5_l      36 
....................  
....................     #define ee_adr_an_max_kal_h 37 
....................     #define ee_adr_an_max_kal_l 38 
....................     #define ee_adr_an_min_kal_h 39 
....................     #define ee_adr_an_min_kal_l 40 
....................  
....................     #define ee_adr_sens_okuma_sayisi    41 
....................  
....................  
....................  
....................     #define birDelikAdimSys   5 
....................  
....................     #define SENS_OKU_L    'L'     // Sensor normade low 
....................     #define SENS_OKU_H    'H'     // Sensor normade High  
....................  
....................    // #define SENS_OKU_H_L    SENS_OKU_H   
....................     #define SENS_OKU_H_L    SENS_OKU_L 
....................      
....................  
....................     #define lcd_led PIN_B2 
....................  
....................     //  ****    //// 
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_KART_TANIMLAR_H */ 
....................  
....................  
....................  
.................... unsigned int16 sens_max_kal=0; 
.................... unsigned int16 sens_min_kal=0; 
.................... signed int sw_sa_algila=-1; 
.................... unsigned int16 last_adc_deger=0; 
.................... unsigned int32 jtnCounter=0; 
.................... unsigned int8 time_sens_okuma_sayisi=40; 
....................  
.................... //#include "P10_Panel_Driver.c" 
.................... #include "hc595_spi.c" 
....................  
.................... //bit_set(var, bit) 
....................  
....................  
.................... #define load pin_e0 
.................... #define data pin_e1 
.................... #define clock pin_e2 
.................... #define CLK_DELAY 1     //uS olarak 
....................  
....................  
.................... void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit)//MSB first gönderir 
.................... {                                                     
....................       int x=0; 
....................       output_low(load);         //load=0;  
....................       for(x=0;x<yaz_bit;++x)                            
....................       { 
....................         if (bit_test(veri,((yaz_bit-1)-x)))  
....................              output_high(data);         //data=1;  
....................         else  output_low(data);             //data=0;    
....................          output_low(clock);         //clock=0; 
....................          output_high(clock);        //clock=1; 
....................       }                                       
....................       output_high(load);         //load=1;             
.................... }//Sonu 
....................  
.................... void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL)//MSB first  
*
092A:  MOVLB  1
092C:  CLRF   x6F
.................... {                                                     
....................       int x=0; 
....................        
....................       output_low(load);         //load=0;  
092E:  BCF    F8D.0
....................        
....................       for(x=0;x<8;++x)                            
0930:  CLRF   x6F
0932:  MOVF   x6F,W
0934:  SUBLW  07
0936:  BNC   0974
....................       { 
....................         if (bit_test(veriH,((7)-x))) //8-1=7 
0938:  MOVLW  07
093A:  BSF    FD8.0
093C:  SUBFWB x6F,W
093E:  MOVWF  x70
0940:  MOVFF  16C,00
0944:  MOVF   x70,W
0946:  MOVWF  01
0948:  BZ    0952
094A:  BCF    FD8.0
094C:  RRCF   00,F
094E:  DECFSZ 01,F
0950:  BRA    094A
0952:  BTFSS  00.0
0954:  BRA    095A
....................              output_high(data);         //data=1;  
0956:  BSF    F8D.1
0958:  BRA    095C
....................         else  output_low(data);             //data=0;    
095A:  BCF    F8D.1
....................          output_low(clock);         //clock=0; 
095C:  BCF    F8D.2
....................          delay_us(CLK_DELAY); 
095E:  MOVLW  03
0960:  MOVWF  00
0962:  DECFSZ 00,F
0964:  BRA    0962
....................          output_high(clock);        //clock=1; 
0966:  BSF    F8D.2
....................          delay_us(CLK_DELAY); 
0968:  MOVLW  03
096A:  MOVWF  00
096C:  DECFSZ 00,F
096E:  BRA    096C
0970:  INCF   x6F,F
0972:  BRA    0932
....................       }  
....................        
....................       for(x=0;x<8;++x)                            
0974:  CLRF   x6F
0976:  MOVF   x6F,W
0978:  SUBLW  07
097A:  BNC   09B8
....................       { 
....................         if (bit_test(veriM,((7)-x)))  
097C:  MOVLW  07
097E:  BSF    FD8.0
0980:  SUBFWB x6F,W
0982:  MOVWF  x70
0984:  MOVFF  16D,00
0988:  MOVF   x70,W
098A:  MOVWF  01
098C:  BZ    0996
098E:  BCF    FD8.0
0990:  RRCF   00,F
0992:  DECFSZ 01,F
0994:  BRA    098E
0996:  BTFSS  00.0
0998:  BRA    099E
....................              output_high(data);         //data=1;  
099A:  BSF    F8D.1
099C:  BRA    09A0
....................         else  output_low(data);             //data=0;    
099E:  BCF    F8D.1
....................          output_low(clock);         //clock=0; 
09A0:  BCF    F8D.2
....................          delay_us(CLK_DELAY); 
09A2:  MOVLW  03
09A4:  MOVWF  00
09A6:  DECFSZ 00,F
09A8:  BRA    09A6
....................          output_high(clock);        //clock=1; 
09AA:  BSF    F8D.2
....................          delay_us(CLK_DELAY); 
09AC:  MOVLW  03
09AE:  MOVWF  00
09B0:  DECFSZ 00,F
09B2:  BRA    09B0
09B4:  INCF   x6F,F
09B6:  BRA    0976
....................       }  
....................        
....................       for(x=0;x<8;++x)                            
09B8:  CLRF   x6F
09BA:  MOVF   x6F,W
09BC:  SUBLW  07
09BE:  BNC   09FC
....................       { 
....................         if (bit_test(veriL,((7)-x)))  
09C0:  MOVLW  07
09C2:  BSF    FD8.0
09C4:  SUBFWB x6F,W
09C6:  MOVWF  x70
09C8:  MOVFF  16E,00
09CC:  MOVF   x70,W
09CE:  MOVWF  01
09D0:  BZ    09DA
09D2:  BCF    FD8.0
09D4:  RRCF   00,F
09D6:  DECFSZ 01,F
09D8:  BRA    09D2
09DA:  BTFSS  00.0
09DC:  BRA    09E2
....................              output_high(data);         //data=1;  
09DE:  BSF    F8D.1
09E0:  BRA    09E4
....................         else  output_low(data);             //data=0;    
09E2:  BCF    F8D.1
....................          output_low(clock);         //clock=0; 
09E4:  BCF    F8D.2
....................          delay_us(CLK_DELAY); 
09E6:  MOVLW  03
09E8:  MOVWF  00
09EA:  DECFSZ 00,F
09EC:  BRA    09EA
....................          output_high(clock);        //clock=1; 
09EE:  BSF    F8D.2
....................          delay_us(CLK_DELAY); 
09F0:  MOVLW  03
09F2:  MOVWF  00
09F4:  DECFSZ 00,F
09F6:  BRA    09F4
09F8:  INCF   x6F,F
09FA:  BRA    09BA
....................       } 
....................       output_high(load);         //load=1;     
09FC:  BSF    F8D.0
....................       
....................       output_toggle(PIN_A4); 
09FE:  BTG    F89.4
0A00:  MOVLB  0
0A02:  RETURN 0
.................... }//Sonu 
....................  
.................... #include "kostur_donanim_test.c" 
....................  
.................... #include "kostur_kart_tanimlar.h" 
.................... /*  
....................  * File:   kostur_kart_tanimlar.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 09 Mart 2018 Cuma, 15:36 
....................  */ 
....................  
.................... #ifndef KOSTUR_KART_TANIMLAR_H 
.................... #define	KOSTUR_KART_TANIMLAR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     //unsigned int16 spiData=0;  //16 bit veri gönderileceði zaman 
....................     unsigned int8 spiDataH=0,spiDataM=0,spiDataL=0; 
....................     int8 jetonSay=0; 
....................     void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit); 
....................     void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL); 
....................      
....................     #define spi_yaz16() hc595_spi_yaz(spiData,16) 
....................     #define spi_yaz24() hc595_spi_24bit_yaz(spiDataH,spiDataM,spiDataL) 
....................     #define hc_595_clr_allPins() hc595_spi_24bit_yaz(0x00,0x00,0x00);//delay_ms(100) 
....................     #define hc_595_set_allPins() hc595_spi_24bit_yaz(0xFF,0xFF,0xFF);delay_ms(100) 
....................      
....................     // spiDataL  ilk 8bit 
....................     #define l2_1    0 
....................     #define l2_2    1 
....................     #define l2_3    2 
....................     #define l1_1    3 
....................     #define l1_2    4 
....................     #define l1_3    5 
....................     #define led_k   6 
....................     #define led_y   7 
....................     // spiDataM ikinci 8 bit 
....................     #define led_m   0 
....................     #define c2      1 
....................     #define b2      2 
....................     #define a2      3 
....................     #define c1      4 
....................     #define b1      5 
....................     #define a1      6 
....................     #define u_led   7 
....................     // spiDataH üçüncü 8 bit 
....................     #define in1     0 
....................     #define in2     1 
....................     #define in3     2 
....................     #define in4     3 
....................     #define in5     4 
....................     #define in6     5 
....................     #define in7     6 
....................     #define in8     7 
....................  
....................     //74HC4051_1 tanýmlamalarý 
....................  
....................     #define an_sw1_1_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw1_2_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw1_3_sec() bit_clear(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1); spi_yaz24()      
....................      
....................     #define an_sw2_1_sec() bit_set(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw2_2_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw2_3_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1); spi_yaz24()   
....................                                                         
....................     #define an_dFSesSec() bit_clear(spiDataM,a1);bit_set(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()  
....................      
....................                          
....................     #define dfSesAyarla() an_dFSesSec();set_adc_channel(0); delay_us(20); \ 
....................                            mp3_set_volume(map(read_adc(),0,1023,0,30))     \ 
....................  
....................     #define an_sa_m1_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m1_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_1_sec() bit_clear(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_2_sec() bit_set(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24() 
....................     #define an_sa_m3_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m3_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................  
....................     #define o1_L1_on()  bit_set(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_on()  bit_set(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_on()  bit_set(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_on() o1_L1_on();o1_L2_on();o1_L3_on() 
....................  
....................     #define o1_L1_off()  bit_clear(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_off()  bit_clear(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_off()  bit_clear(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_off()  o1_L1_off();o1_L2_off();o1_L3_off() 
....................  
....................     #define o2_L1_on()  bit_set(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_on()  bit_set(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_on()  bit_set(spiDataL,l2_3);spi_yaz24() 
....................      #define o2_L123_on() o2_L1_on();o2_L2_on();o2_L3_on() 
....................  
....................     #define o2_L1_off()  bit_clear(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_off()  bit_clear(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_off()  bit_clear(spiDataL,l2_3);spi_yaz24() 
....................     #define o2_L123_off()  o2_L1_off();o2_L2_off();o1_L3_off() 
....................  
....................     #define sw_led_off() o1_L123_off(); o2_L123_off() 
....................     #define sw_led_on() o1_L123_on();o2_L123_on() 
....................      
....................     #define rgb_kirmizi_on()  bit_set(spiDataL,led_k);spi_yaz24() 
....................     #define rgb_kirmizi_off() bit_clear(spiDataL,led_k);spi_yaz24() 
....................      
....................     #define rgb_yesil_on() bit_set(spiDataL,led_y);spi_yaz24() 
....................     #define rgb_yesil_off() bit_clear(spiDataL,led_y);spi_yaz24() 
....................      
....................     #define rgb_mavi_on() bit_set(spiDataM,led_m);spi_yaz24() 
....................     #define rgb_mavi_off() bit_clear(spiDataM,led_m);spi_yaz24() 
....................  
....................     //#define rgb_beyaz_on() rgb_kirmizi_on();rgb_yesil_on();rgb_mavi_on() 
....................     #define rgb_beyaz_on()   bit_set(spiDataL,led_k); bit_set(spiDataL,led_y);  \ 
....................                              bit_set(spiDataM,led_m); spi_yaz24()              \ 
....................  
....................     //#define rgb_beyaz_off() rgb_kirmizi_off();rgb_yesil_off();rgb_mavi_off() 
....................     #define rgb_beyaz_off() bit_clear(spiDataL,led_k);bit_clear(spiDataL,led_y);    \ 
....................                             bit_clear(spiDataM,led_m);spi_yaz24()                   \ 
....................  
....................     #define motor1_ileri() bit_set(spiDataH,in1);    \ 
....................                            bit_clear(spiDataH,in2);  \ 
....................                            spi_yaz24()              \                       
....................                            //output_high(PIN_C2)      \ 
....................                           // Rc2 : ccp1                       
....................     #define motor1_geri()  bit_set(spiDataH,in2);    \ 
....................                            bit_clear(spiDataH,in1);  \ 
....................                            spi_yaz24()              \                       
....................                           // output_high(PIN_C2)    \       //PWM yoksa  
....................     #define motor1_dur() bit_clear(spiDataH,in1);    \ 
....................                          bit_clear(spiDataH,in2);    \                          
....................                          spi_yaz24()                \ 
....................                                   
....................     #define motor2_ileri() bit_set(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()              \                        
....................                           // output_high(PIN_C11)    \       //PWM yoksa  
....................                           // Rc1 : ccp2 
....................     #define motor2_geri()  bit_set(spiDataH,in4);    \ 
....................                            bit_clear(spiDataH,in3);  \ 
....................                            spi_yaz24()              \ 
....................                                     
....................     #define motor2_dur()   bit_clear(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()               \          
....................                            //output_high(PIN_C1)    \       //PWM yoksa    
....................     #define motor3_ileri() bit_set(spiDataH,in5);    \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \      //En pin +5V'ta donanýmda   
....................                                    
....................     #define motor3_geri()  bit_set(spiDataH,in6);    \ 
....................                            bit_clear(spiDataH,in5);  \ 
....................                            spi_yaz24()              \ 
....................                                   
....................     #define motor3_dur()   bit_clear(spiDataH,in5);  \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \ 
....................                             
....................     #define oyunbittiM12dur_doBrk() if(sa_m1_2()||sa_m2_2()||f_oyunBitti)\ 
....................                                     {                                   \ 
....................                                         motor1_dur();                   \ 
....................                                         motor2_dur();                   \ 
....................                                         f_oyunBitti=TRUE;               \  
....................                                         break;                          \ 
....................                                     }                                   \ 
....................                             
....................  
....................      
....................     #define jtn_pin PIN_B0                  //Pin ler  büyük harfle olmalý 
....................     #define ticket_out_pin PIN_C0 
....................      //delay_ms(300);;                               
....................     #define jetonKontrol() if(!input(jtn_pin)){                         \ 
....................                                                                         \ 
....................                             jetonSay++;                                 \ 
....................                            }                                            \ 
....................                            if(jetonSay>=jtnTLMik){                      \ 
....................                                 jetonAtildi=TRUE;                       \ 
....................                                 jetonSay=0;                             \ 
....................                            }                                            \ 
....................      
....................     #define btn1 PIN_A5 
....................     #define btn2 PIN_A3                        
....................     #define btn3 PIN_A2 
....................  
....................    /// wav dosyasý tanýmlamlarý 
....................     /// mp3-wav index 
.................... 	#define wav_atKisnemesi     1 
.................... 	#define wav_atKosmasi       2 
.................... 	#define wav_suDamlasi       3 
.................... 	#define wav_heySesi         4 
.................... 	#define wav_alkisSesi       5 
.................... 	#define wav_oyunBitti       6 
.................... 	#define wav_getReady        7 
.................... 	#define wav_whoosh          8 
.................... 	#define wav_jeton           9 
.................... 	#define mp3_remix           10 
.................... 	#define mp3_tavsan          11 
.................... 	#define wav_waterDrop       12 
.................... 	#define mp3_adele_Rolling   14 
.................... 	#define wav_duduk_basla     15 
.................... 	#define wav_ding            16 
.................... 	#define mp3_mars            17 
.................... 	#define mp3_getlowve_araba	18 
....................     #define mp3_beep_uyari      19 
....................  
....................      //// bosta rastgele mp3 müzik 
....................      
....................     #define mp3_adele_Rolling2  20 
....................     #define mp3_anitta          21 
....................     #define mp3_love_lo         22 
....................     #define mp3_agen            23 
....................     #define mp3_dejavu          24 
....................     #define mp3_rain            25 
....................     #define mp3_aweli           26 
....................  
....................     #define wav_remix_sure 200000 //(3*60+20)*1000  //3:20 mS degeri.... 
....................     #define wav_atKisnemesi_sure  1500 
....................     #define wav_atKosmasi_sure    2000 
....................     #define wav_whoosh_sure  20 //300//350 
....................  
....................     #define oyunSure_1dk    (unsigned int32)(60*1250)//60000UL 
....................     #define oyunSure_3dk    (unsigned int32)(180*1250)//180000UL 
....................     #define oyunSure_5dk    (unsigned int32)(300*1250)//300000UL 
....................     #define oyunSure_7dk    (unsigned int32)(420*1250)//420000UL 
....................     #define oyunSure_10dk   (unsigned int32)(600*1250)//600000UL 
....................  
....................     #define millisMaxSayi 0xFFFFFFFF 
....................  
....................     #define birliDelikPuan 30 
....................     #define ikiliDelikPuan 20 
....................     #define ucluDelikPuan  10 
....................  
....................     #define dfPplayerMaxSes() mp3_set_volume (29);delay_ms(100)//48 
....................     #define dfPlayerNormSes() mp3_set_volume(20);delay_ms(100) 
....................     #define dfPlayerMinSes() mp3_set_volume(1);delay_ms(100) 
....................  
....................     #define textBufSil() text_sil() 
....................  
....................     #define ee_adres_jtnCount   0   //LSB Byte, high 3 
....................     #define ee_adres_jtnTL      4 
....................     #define ee_adres_Msure_1    5   //LSB Byte, high 6 
....................     #define ee_adres_Msure_2    7   //LSB Byte, high 8 
....................     #define ee_adres_Msure_3    9   //LSB Byte, high 10 
....................     #define ee_adres_oyunSure   11 
....................     #define ee_adres_dfSes      12 
....................  
....................  
....................     #define ee_adres_sw11_an_min_0_h      13 
....................     #define ee_adres_sw11_an_min_0_l      14 
....................     #define ee_adres_sw12_an_min_1_h      15 
....................     #define ee_adres_sw12_an_min_1_l      16 
....................     #define ee_adres_sw13_an_min_2_h      17 
....................     #define ee_adres_sw13_an_min_2_l      18 
....................     #define ee_adres_sw21_an_min_3_h      19 
....................     #define ee_adres_sw21_an_min_3_l      20 
....................     #define ee_adres_sw22_an_min_4_h      21 
....................     #define ee_adres_sw22_an_min_4_l      22 
....................     #define ee_adres_sw23_an_min_5_h      23 
....................     #define ee_adres_sw23_an_min_5_l      24 
....................  
....................     #define ee_adres_sw11_an_max_0_h      25 
....................     #define ee_adres_sw11_an_max_0_l      26 
....................     #define ee_adres_sw12_an_max_1_h      27 
....................     #define ee_adres_sw12_an_max_1_l      28 
....................     #define ee_adres_sw13_an_max_2_h      29 
....................     #define ee_adres_sw13_an_max_2_l      30 
....................     #define ee_adres_sw21_an_max_3_h      31 
....................     #define ee_adres_sw21_an_max_3_l      32 
....................     #define ee_adres_sw22_an_max_4_h      33 
....................     #define ee_adres_sw22_an_max_4_l      34 
....................     #define ee_adres_sw23_an_max_5_h      35 
....................     #define ee_adres_sw23_an_max_5_l      36 
....................  
....................     #define ee_adr_an_max_kal_h 37 
....................     #define ee_adr_an_max_kal_l 38 
....................     #define ee_adr_an_min_kal_h 39 
....................     #define ee_adr_an_min_kal_l 40 
....................  
....................     #define ee_adr_sens_okuma_sayisi    41 
....................  
....................  
....................  
....................     #define birDelikAdimSys   5 
....................  
....................     #define SENS_OKU_L    'L'     // Sensor normade low 
....................     #define SENS_OKU_H    'H'     // Sensor normade High  
....................  
....................    // #define SENS_OKU_H_L    SENS_OKU_H   
....................     #define SENS_OKU_H_L    SENS_OKU_L 
....................      
....................  
....................     #define lcd_led PIN_B2 
....................  
....................     //  ****    //// 
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_KART_TANIMLAR_H */ 
....................  
....................  
.................... #include "dfPlayer.h" 
.................... /*  
....................  * File:   dfPlayer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 28 Þubat 2018 Çarþamba, 16:11 
....................  */ 
....................  
.................... /* 
....................  *	name:				DFPlayer_Mini_Mp3 
....................  *	version:			1.0 
....................  *	Author:				lisper <lisper.li@dfrobot.com> 
....................  *	Date:				2014-05-22 
....................  *	official website:		http://www.dfrobot.com 
....................  *	Products page:			http://www.dfrobot.com/index.php?route=product/product&product_id=1121#.U5Z_RYbUN8E 
....................  *	Description:			mp3 library for DFPlayer mini board 
....................  *					        note: mp3 file must put into mp3 folder in your tf card 
....................  */ 
....................  
.................... #ifndef DFPLAYER_H 
.................... #define	DFPLAYER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     typedef unsigned char mbyte; 
....................      
....................     #define startByte 0x7E 
....................     #define endByte 0xEF 
....................     #define versionByte 0xFF 
....................     #define dataLength 0x06 
....................     #define infoReq 0x01        //0x01 
....................     #define isDebug false 
....................     #define dfPlayerMaxSes 30 // dec30:0x1E 
....................  
....................     #define DF_BUSY_PIN  PIN_B1 //PIN_B3 
....................  
....................     void sendCommand(mbyte Command, mbyte Param1, mbyte Param2); 
....................     void mp3_set_volume (char vol); 
....................     void mp3_set_equalizer(char eq); 
....................     void mp3_play_physical(unsigned int16 fileNum); 
....................     void mp3_get_error (); 
....................     void mp3_single_loop (unsigned int16 fileNum) ; 
....................     void mp3_enableLoopAll(); 
....................     void mp3_disbleLoopAll(); 
....................     void mp3_getData(*dizi); 
....................     void mp3_DataSeriGonder(*dizi,char len); 
....................     void mp3_stop(); 
....................     void mp3_reset(); 
....................     void mp3_baslangic(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* DFPLAYER_H */ 
....................  
....................  
....................  
.................... /*                .................. */ 
.................... void hc595_ledler_yak(int sure){ 
....................         o1_L1_on(); 
....................         delay_ms(sure); 
....................         o1_L2_on(); 
....................         delay_ms(sure); 
....................         o1_L3_on(); 
....................         delay_ms(sure); 
....................          
....................         o2_L1_on(); 
....................         delay_ms(sure); 
....................         o2_L2_on(); 
....................         delay_ms(sure); 
....................         o2_L3_on(); 
....................         delay_ms(sure); 
....................          
....................         rgb_kirmizi_on(); 
....................         delay_ms(sure); 
....................          
....................         rgb_yesil_on(); 
....................         delay_ms(sure); 
....................          
....................         rgb_mavi_on(); 
....................         delay_ms(sure); 
.................... //         
.................... //        uLed1_on(); 
.................... //        delay_ms(sure); 
.................... //         
.................... //        uLed2_on(); 
.................... //        delay_ms(sure); 
.................... } 
.................... void hc595_ledler_sondur(int sure){ 
....................         o1_L1_off(); 
....................         delay_ms(sure); 
....................         o1_L2_off(); 
....................         delay_ms(sure); 
....................         o1_L3_off(); 
....................         delay_ms(sure); 
....................          
....................         o2_L1_off(); 
....................         delay_ms(sure); 
....................         o2_L2_off(); 
....................         delay_ms(sure); 
....................         o2_L3_off(); 
....................         delay_ms(sure); 
....................          
....................         rgb_kirmizi_off(); 
....................         delay_ms(sure); 
....................          
....................         rgb_yesil_off(); 
....................         delay_ms(sure); 
....................          
....................         rgb_mavi_off(); 
....................         delay_ms(sure); 
....................          
.................... //        uLed1_off(); 
.................... //        delay_ms(sure); 
.................... //         
.................... //        uLed2_off(); 
.................... //        delay_ms(sure); 
.................... } 
.................... void motorPwmTest(unsigned int16 duty, char yon){ 
....................      
....................     set_pwm1_duty(duty);        //motorlar yaklaþýk olarak 400 den sonra dönmeye baþladýlar.  
....................     set_pwm2_duty(duty); 
....................     if(yon==1){ 
....................         motor1_ileri(); 
....................         motor2_ileri(); 
....................     }else{ 
....................        motor1_geri(); 
....................        motor2_geri();  
....................     } 
....................      
.................... } 
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D0  
.................... #define LCD_DB5   PIN_D1  
.................... #define LCD_DB6   PIN_D2  
.................... #define LCD_DB7   PIN_D3  
....................  
.................... #define LCD_E     PIN_D5  
.................... #define LCD_RS    PIN_D4  
.................... #define LCD_RW    PIN_A2  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... //#define USE_LCD_RW   0//1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................     0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................     0xc,                    // Display on  
....................     1,                      // Clear display  
....................     6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
....................     // Note:  !! converts an integer expression  
....................     // to a boolean (1 or 0).  
....................      output_bit(LCD_DB4, !!(nibble & 1));  
*
07BA:  MOVLB  1
07BC:  BTFSC  x8D.0
07BE:  BRA    07C4
07C0:  BCF    F8C.0
07C2:  BRA    07C6
07C4:  BSF    F8C.0
....................      output_bit(LCD_DB5, !!(nibble & 2));   
07C6:  BTFSC  x8D.1
07C8:  BRA    07CE
07CA:  BCF    F8C.1
07CC:  BRA    07D0
07CE:  BSF    F8C.1
....................      output_bit(LCD_DB6, !!(nibble & 4));     
07D0:  BTFSC  x8D.2
07D2:  BRA    07D8
07D4:  BCF    F8C.2
07D6:  BRA    07DA
07D8:  BSF    F8C.2
....................      output_bit(LCD_DB7, !!(nibble & 8));     
07DA:  BTFSC  x8D.3
07DC:  BRA    07E2
07DE:  BCF    F8C.3
07E0:  BRA    07E4
07E2:  BSF    F8C.3
....................  
....................      delay_cycles(1);  
07E4:  NOP   
....................      output_high(LCD_E);  
07E6:  BSF    F8C.5
....................      delay_us(2);  
07E8:  MOVLW  06
07EA:  MOVWF  00
07EC:  DECFSZ 00,F
07EE:  BRA    07EC
07F0:  NOP   
....................      output_low(LCD_E);  
07F2:  BCF    F8C.5
07F4:  MOVLB  0
07F6:  RETURN 0
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
....................     int8 lcd_read_nibble(void)  
....................     {  
....................         int8 retval;  
....................         // Create bit variables so that we can easily set  
....................         // individual bits in the retval variable.  
....................         #bit retval_0 = retval.0  
....................         #bit retval_1 = retval.1  
....................         #bit retval_2 = retval.2  
....................         #bit retval_3 = retval.3  
....................  
....................         retval = 0;  
....................  
....................         output_high(LCD_E);  
....................         delay_cycles(1);  
....................  
....................         retval_0 = input(LCD_DB4);  
....................         retval_1 = input(LCD_DB5);  
....................         retval_2 = input(LCD_DB6);  
....................         retval_3 = input(LCD_DB7);  
....................  
....................         output_low(LCD_E);  
....................  
....................         return(retval);     
....................     }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
....................     int8 lcd_read_byte(void)  
....................     {  
....................         int8 low;  
....................         int8 high;  
....................  
....................         output_high(LCD_RW);  
....................         delay_cycles(1);  
....................  
....................         high = lcd_read_nibble();  
....................  
....................         low = lcd_read_nibble();  
....................  
....................         return( (high<<4) | low);  
....................     }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
....................     output_low(LCD_RS);  
07F8:  BCF    F8C.4
....................  
....................     #ifdef USE_LCD_RW  
....................         while(bit_test(lcd_read_byte(),7)) ;  
....................     #else  
....................         delay_us(60);   
07FA:  MOVLW  C7
07FC:  MOVWF  00
07FE:  DECFSZ 00,F
0800:  BRA    07FE
0802:  BRA    0804
....................     #endif  
....................  
....................     if(address)  
0804:  MOVLB  1
0806:  MOVF   x8A,F
0808:  BZ    080E
....................        output_high(LCD_RS);  
080A:  BSF    F8C.4
080C:  BRA    0810
....................     else  
....................        output_low(LCD_RS);  
080E:  BCF    F8C.4
....................  
....................      delay_cycles(1);  
0810:  NOP   
....................  
....................     #ifdef USE_LCD_RW  
....................         output_low(LCD_RW);  
....................         delay_cycles(1);  
....................     #endif  
....................  
....................     output_low(LCD_E);  
0812:  BCF    F8C.5
....................  
....................     lcd_send_nibble(n >> 4);  
0814:  SWAPF  x8B,W
0816:  MOVWF  x8C
0818:  MOVLW  0F
081A:  ANDWF  x8C,F
081C:  MOVFF  18C,18D
0820:  MOVLB  0
0822:  RCALL  07BA
....................     lcd_send_nibble(n & 0xf);  
0824:  MOVLB  1
0826:  MOVF   x8B,W
0828:  ANDLW  0F
082A:  MOVWF  x8C
082C:  MOVWF  x8D
082E:  MOVLB  0
0830:  RCALL  07BA
0832:  RETURN 0
.................... }  
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
....................     int8 i;  
....................  
....................     output_low(LCD_RS);  
*
0A46:  BCF    F8C.4
....................  
....................     #ifdef USE_LCD_RW  
....................         output_low(LCD_RW);  
....................     #endif  
....................  
....................     output_low(LCD_E);  
0A48:  BCF    F8C.5
0A4A:  CLRF   19
0A4C:  BTFSC  FF2.7
0A4E:  BSF    19.7
0A50:  BCF    FF2.7
....................  
....................     delay_ms(15);  
0A52:  MOVLW  0F
0A54:  MOVLB  1
0A56:  MOVWF  x86
0A58:  MOVLB  0
0A5A:  RCALL  0834
0A5C:  BTFSC  19.7
0A5E:  BSF    FF2.7
....................  
....................     for(i=0 ;i < 3; i++)  
0A60:  MOVLB  1
0A62:  CLRF   x5F
0A64:  MOVF   x5F,W
0A66:  SUBLW  02
0A68:  BNC   0A9A
0A6A:  CLRF   19
0A6C:  BTFSC  FF2.7
0A6E:  BSF    19.7
0A70:  BCF    FF2.7
....................     {  
....................         lcd_send_nibble(0x03);  
0A72:  MOVLW  03
0A74:  MOVWF  x8D
0A76:  MOVLB  0
0A78:  RCALL  07BA
0A7A:  BTFSC  19.7
0A7C:  BSF    FF2.7
0A7E:  CLRF   19
0A80:  BTFSC  FF2.7
0A82:  BSF    19.7
0A84:  BCF    FF2.7
....................         delay_ms(5);  
0A86:  MOVLW  05
0A88:  MOVLB  1
0A8A:  MOVWF  x86
0A8C:  MOVLB  0
0A8E:  RCALL  0834
0A90:  BTFSC  19.7
0A92:  BSF    FF2.7
0A94:  MOVLB  1
0A96:  INCF   x5F,F
0A98:  BRA    0A64
0A9A:  CLRF   19
0A9C:  BTFSC  FF2.7
0A9E:  BSF    19.7
0AA0:  BCF    FF2.7
....................     }  
....................  
....................     lcd_send_nibble(0x02);  
0AA2:  MOVLW  02
0AA4:  MOVWF  x8D
0AA6:  MOVLB  0
0AA8:  RCALL  07BA
0AAA:  BTFSC  19.7
0AAC:  BSF    FF2.7
....................  
....................     for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0AAE:  MOVLB  1
0AB0:  CLRF   x5F
0AB2:  MOVF   x5F,W
0AB4:  SUBLW  03
0AB6:  BNC   0AF6
....................        {  
....................         lcd_send_byte(0, LCD_INIT_STRING[i]);  
0AB8:  CLRF   03
0ABA:  MOVF   x5F,W
0ABC:  MOVLB  0
0ABE:  CALL   0164
0AC2:  MOVLB  1
0AC4:  MOVWF  x60
0AC6:  CLRF   19
0AC8:  BTFSC  FF2.7
0ACA:  BSF    19.7
0ACC:  BCF    FF2.7
0ACE:  CLRF   x8A
0AD0:  MOVWF  x8B
0AD2:  MOVLB  0
0AD4:  RCALL  07F8
0AD6:  BTFSC  19.7
0AD8:  BSF    FF2.7
0ADA:  CLRF   19
0ADC:  BTFSC  FF2.7
0ADE:  BSF    19.7
0AE0:  BCF    FF2.7
....................  
....................         // If the R/W signal is not used, then  
....................         // the busy bit can't be polled.  One of  
....................         // the init commands takes longer than  
....................         // the hard-coded delay of 60 us, so in  
....................         // that case, lets just do a 5 ms delay  
....................         // after all four of them.  
....................         #ifndef USE_LCD_RW  
....................             delay_ms(5);  
0AE2:  MOVLW  05
0AE4:  MOVLB  1
0AE6:  MOVWF  x86
0AE8:  MOVLB  0
0AEA:  RCALL  0834
0AEC:  BTFSC  19.7
0AEE:  BSF    FF2.7
....................         #endif  
0AF0:  MOVLB  1
0AF2:  INCF   x5F,F
0AF4:  BRA    0AB2
....................        }  
0AF6:  MOVLB  0
0AF8:  GOTO   4CFC (RETURN)
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
....................     int8 address;  
....................  
....................     if(y != 1)  
*
085E:  MOVLB  1
0860:  DECFSZ x87,W
0862:  BRA    0866
0864:  BRA    086C
....................        address = lcd_line_two;  
0866:  MOVLW  40
0868:  MOVWF  x88
086A:  BRA    086E
....................     else  
....................        address=0;  
086C:  CLRF   x88
....................  
....................     address += x-1;  
086E:  MOVLW  01
0870:  SUBWF  x86,W
0872:  ADDWF  x88,F
....................     lcd_send_byte(0, 0x80 | address);  
0874:  MOVF   x88,W
0876:  IORLW  80
0878:  MOVWF  x89
087A:  CLRF   x8A
087C:  MOVWF  x8B
087E:  MOVLB  0
0880:  RCALL  07F8
0882:  RETURN 0
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................     switch(c)  
0884:  MOVLB  1
0886:  MOVF   x85,W
0888:  XORLW  0C
088A:  MOVLB  0
088C:  BZ    0898
088E:  XORLW  06
0890:  BZ    08B0
0892:  XORLW  02
0894:  BZ    08C0
0896:  BRA    08CE
....................       {  
....................        case '\f':               //LCD temizle 
....................          lcd_send_byte(0,1);  
0898:  MOVLB  1
089A:  CLRF   x8A
089C:  MOVLW  01
089E:  MOVWF  x8B
08A0:  MOVLB  0
08A2:  RCALL  07F8
....................          delay_ms(2);  
08A4:  MOVLW  02
08A6:  MOVLB  1
08A8:  MOVWF  x86
08AA:  MOVLB  0
08AC:  RCALL  0834
....................          break;  
08AE:  BRA    08DC
....................  
....................        case '\n':               //LCD ikinci satýra geçir 
....................           lcd_gotoxy(1,2);  
08B0:  MOVLW  01
08B2:  MOVLB  1
08B4:  MOVWF  x86
08B6:  MOVLW  02
08B8:  MOVWF  x87
08BA:  MOVLB  0
08BC:  RCALL  085E
....................           break;  
08BE:  BRA    08DC
....................  
....................        case '\b':               //  Move back one position 
....................           lcd_send_byte(0,0x10);  
08C0:  MOVLB  1
08C2:  CLRF   x8A
08C4:  MOVLW  10
08C6:  MOVWF  x8B
08C8:  MOVLB  0
08CA:  RCALL  07F8
....................           break;  
08CC:  BRA    08DC
....................  
....................        default:  
....................           lcd_send_byte(1,c);  
08CE:  MOVLW  01
08D0:  MOVLB  1
08D2:  MOVWF  x8A
08D4:  MOVFF  185,18B
08D8:  MOVLB  0
08DA:  RCALL  07F8
....................           break;  
....................       }  
08DC:  RETURN 0
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
....................     char lcd_getc(int8 x, int8 y)  
....................     {  
....................         char value;  
....................  
....................         lcd_gotoxy(x,y);  
....................  
....................         // Wait until busy flag is low.  
....................         while(bit_test(lcd_read_byte(),7));   
....................  
....................         output_high(LCD_RS);  
....................         value = lcd_read_byte();  
....................         output_low(lcd_RS);  
....................  
....................         return(value);  
....................     }  
.................... #endif 
....................      
.................... #define lcd_clear()    lcd_send_byte(0,1); ;delay_ms(25) 
....................  
.................... #include "dfPlayer.c" 
.................... #include "dfPlayer.h" 
.................... /*  
....................  * File:   dfPlayer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 28 Þubat 2018 Çarþamba, 16:11 
....................  */ 
....................  
.................... /* 
....................  *	name:				DFPlayer_Mini_Mp3 
....................  *	version:			1.0 
....................  *	Author:				lisper <lisper.li@dfrobot.com> 
....................  *	Date:				2014-05-22 
....................  *	official website:		http://www.dfrobot.com 
....................  *	Products page:			http://www.dfrobot.com/index.php?route=product/product&product_id=1121#.U5Z_RYbUN8E 
....................  *	Description:			mp3 library for DFPlayer mini board 
....................  *					        note: mp3 file must put into mp3 folder in your tf card 
....................  */ 
....................  
.................... #ifndef DFPLAYER_H 
.................... #define	DFPLAYER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     typedef unsigned char mbyte; 
....................      
....................     #define startByte 0x7E 
....................     #define endByte 0xEF 
....................     #define versionByte 0xFF 
....................     #define dataLength 0x06 
....................     #define infoReq 0x01        //0x01 
....................     #define isDebug false 
....................     #define dfPlayerMaxSes 30 // dec30:0x1E 
....................  
....................     #define DF_BUSY_PIN  PIN_B1 //PIN_B3 
....................  
....................     void sendCommand(mbyte Command, mbyte Param1, mbyte Param2); 
....................     void mp3_set_volume (char vol); 
....................     void mp3_set_equalizer(char eq); 
....................     void mp3_play_physical(unsigned int16 fileNum); 
....................     void mp3_get_error (); 
....................     void mp3_single_loop (unsigned int16 fileNum) ; 
....................     void mp3_enableLoopAll(); 
....................     void mp3_disbleLoopAll(); 
....................     void mp3_getData(*dizi); 
....................     void mp3_DataSeriGonder(*dizi,char len); 
....................     void mp3_stop(); 
....................     void mp3_reset(); 
....................     void mp3_baslangic(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* DFPLAYER_H */ 
....................  
....................  
.................... #include "kostur_kart_tanimlar.h" 
.................... /*  
....................  * File:   kostur_kart_tanimlar.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 09 Mart 2018 Cuma, 15:36 
....................  */ 
....................  
.................... #ifndef KOSTUR_KART_TANIMLAR_H 
.................... #define	KOSTUR_KART_TANIMLAR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     //unsigned int16 spiData=0;  //16 bit veri gönderileceði zaman 
....................     unsigned int8 spiDataH=0,spiDataM=0,spiDataL=0; 
....................     int8 jetonSay=0; 
....................     void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit); 
....................     void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL); 
....................      
....................     #define spi_yaz16() hc595_spi_yaz(spiData,16) 
....................     #define spi_yaz24() hc595_spi_24bit_yaz(spiDataH,spiDataM,spiDataL) 
....................     #define hc_595_clr_allPins() hc595_spi_24bit_yaz(0x00,0x00,0x00);//delay_ms(100) 
....................     #define hc_595_set_allPins() hc595_spi_24bit_yaz(0xFF,0xFF,0xFF);delay_ms(100) 
....................      
....................     // spiDataL  ilk 8bit 
....................     #define l2_1    0 
....................     #define l2_2    1 
....................     #define l2_3    2 
....................     #define l1_1    3 
....................     #define l1_2    4 
....................     #define l1_3    5 
....................     #define led_k   6 
....................     #define led_y   7 
....................     // spiDataM ikinci 8 bit 
....................     #define led_m   0 
....................     #define c2      1 
....................     #define b2      2 
....................     #define a2      3 
....................     #define c1      4 
....................     #define b1      5 
....................     #define a1      6 
....................     #define u_led   7 
....................     // spiDataH üçüncü 8 bit 
....................     #define in1     0 
....................     #define in2     1 
....................     #define in3     2 
....................     #define in4     3 
....................     #define in5     4 
....................     #define in6     5 
....................     #define in7     6 
....................     #define in8     7 
....................  
....................     //74HC4051_1 tanýmlamalarý 
....................  
....................     #define an_sw1_1_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw1_2_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw1_3_sec() bit_clear(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1); spi_yaz24()      
....................      
....................     #define an_sw2_1_sec() bit_set(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw2_2_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw2_3_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1); spi_yaz24()   
....................                                                         
....................     #define an_dFSesSec() bit_clear(spiDataM,a1);bit_set(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()  
....................      
....................                          
....................     #define dfSesAyarla() an_dFSesSec();set_adc_channel(0); delay_us(20); \ 
....................                            mp3_set_volume(map(read_adc(),0,1023,0,30))     \ 
....................  
....................     #define an_sa_m1_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m1_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_1_sec() bit_clear(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_2_sec() bit_set(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24() 
....................     #define an_sa_m3_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m3_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................  
....................     #define o1_L1_on()  bit_set(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_on()  bit_set(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_on()  bit_set(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_on() o1_L1_on();o1_L2_on();o1_L3_on() 
....................  
....................     #define o1_L1_off()  bit_clear(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_off()  bit_clear(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_off()  bit_clear(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_off()  o1_L1_off();o1_L2_off();o1_L3_off() 
....................  
....................     #define o2_L1_on()  bit_set(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_on()  bit_set(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_on()  bit_set(spiDataL,l2_3);spi_yaz24() 
....................      #define o2_L123_on() o2_L1_on();o2_L2_on();o2_L3_on() 
....................  
....................     #define o2_L1_off()  bit_clear(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_off()  bit_clear(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_off()  bit_clear(spiDataL,l2_3);spi_yaz24() 
....................     #define o2_L123_off()  o2_L1_off();o2_L2_off();o1_L3_off() 
....................  
....................     #define sw_led_off() o1_L123_off(); o2_L123_off() 
....................     #define sw_led_on() o1_L123_on();o2_L123_on() 
....................      
....................     #define rgb_kirmizi_on()  bit_set(spiDataL,led_k);spi_yaz24() 
....................     #define rgb_kirmizi_off() bit_clear(spiDataL,led_k);spi_yaz24() 
....................      
....................     #define rgb_yesil_on() bit_set(spiDataL,led_y);spi_yaz24() 
....................     #define rgb_yesil_off() bit_clear(spiDataL,led_y);spi_yaz24() 
....................      
....................     #define rgb_mavi_on() bit_set(spiDataM,led_m);spi_yaz24() 
....................     #define rgb_mavi_off() bit_clear(spiDataM,led_m);spi_yaz24() 
....................  
....................     //#define rgb_beyaz_on() rgb_kirmizi_on();rgb_yesil_on();rgb_mavi_on() 
....................     #define rgb_beyaz_on()   bit_set(spiDataL,led_k); bit_set(spiDataL,led_y);  \ 
....................                              bit_set(spiDataM,led_m); spi_yaz24()              \ 
....................  
....................     //#define rgb_beyaz_off() rgb_kirmizi_off();rgb_yesil_off();rgb_mavi_off() 
....................     #define rgb_beyaz_off() bit_clear(spiDataL,led_k);bit_clear(spiDataL,led_y);    \ 
....................                             bit_clear(spiDataM,led_m);spi_yaz24()                   \ 
....................  
....................     #define motor1_ileri() bit_set(spiDataH,in1);    \ 
....................                            bit_clear(spiDataH,in2);  \ 
....................                            spi_yaz24()              \                       
....................                            //output_high(PIN_C2)      \ 
....................                           // Rc2 : ccp1                       
....................     #define motor1_geri()  bit_set(spiDataH,in2);    \ 
....................                            bit_clear(spiDataH,in1);  \ 
....................                            spi_yaz24()              \                       
....................                           // output_high(PIN_C2)    \       //PWM yoksa  
....................     #define motor1_dur() bit_clear(spiDataH,in1);    \ 
....................                          bit_clear(spiDataH,in2);    \                          
....................                          spi_yaz24()                \ 
....................                                   
....................     #define motor2_ileri() bit_set(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()              \                        
....................                           // output_high(PIN_C11)    \       //PWM yoksa  
....................                           // Rc1 : ccp2 
....................     #define motor2_geri()  bit_set(spiDataH,in4);    \ 
....................                            bit_clear(spiDataH,in3);  \ 
....................                            spi_yaz24()              \ 
....................                                     
....................     #define motor2_dur()   bit_clear(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()               \          
....................                            //output_high(PIN_C1)    \       //PWM yoksa    
....................     #define motor3_ileri() bit_set(spiDataH,in5);    \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \      //En pin +5V'ta donanýmda   
....................                                    
....................     #define motor3_geri()  bit_set(spiDataH,in6);    \ 
....................                            bit_clear(spiDataH,in5);  \ 
....................                            spi_yaz24()              \ 
....................                                   
....................     #define motor3_dur()   bit_clear(spiDataH,in5);  \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \ 
....................                             
....................     #define oyunbittiM12dur_doBrk() if(sa_m1_2()||sa_m2_2()||f_oyunBitti)\ 
....................                                     {                                   \ 
....................                                         motor1_dur();                   \ 
....................                                         motor2_dur();                   \ 
....................                                         f_oyunBitti=TRUE;               \  
....................                                         break;                          \ 
....................                                     }                                   \ 
....................                             
....................  
....................      
....................     #define jtn_pin PIN_B0                  //Pin ler  büyük harfle olmalý 
....................     #define ticket_out_pin PIN_C0 
....................      //delay_ms(300);;                               
....................     #define jetonKontrol() if(!input(jtn_pin)){                         \ 
....................                                                                         \ 
....................                             jetonSay++;                                 \ 
....................                            }                                            \ 
....................                            if(jetonSay>=jtnTLMik){                      \ 
....................                                 jetonAtildi=TRUE;                       \ 
....................                                 jetonSay=0;                             \ 
....................                            }                                            \ 
....................      
....................     #define btn1 PIN_A5 
....................     #define btn2 PIN_A3                        
....................     #define btn3 PIN_A2 
....................  
....................    /// wav dosyasý tanýmlamlarý 
....................     /// mp3-wav index 
.................... 	#define wav_atKisnemesi     1 
.................... 	#define wav_atKosmasi       2 
.................... 	#define wav_suDamlasi       3 
.................... 	#define wav_heySesi         4 
.................... 	#define wav_alkisSesi       5 
.................... 	#define wav_oyunBitti       6 
.................... 	#define wav_getReady        7 
.................... 	#define wav_whoosh          8 
.................... 	#define wav_jeton           9 
.................... 	#define mp3_remix           10 
.................... 	#define mp3_tavsan          11 
.................... 	#define wav_waterDrop       12 
.................... 	#define mp3_adele_Rolling   14 
.................... 	#define wav_duduk_basla     15 
.................... 	#define wav_ding            16 
.................... 	#define mp3_mars            17 
.................... 	#define mp3_getlowve_araba	18 
....................     #define mp3_beep_uyari      19 
....................  
....................      //// bosta rastgele mp3 müzik 
....................      
....................     #define mp3_adele_Rolling2  20 
....................     #define mp3_anitta          21 
....................     #define mp3_love_lo         22 
....................     #define mp3_agen            23 
....................     #define mp3_dejavu          24 
....................     #define mp3_rain            25 
....................     #define mp3_aweli           26 
....................  
....................     #define wav_remix_sure 200000 //(3*60+20)*1000  //3:20 mS degeri.... 
....................     #define wav_atKisnemesi_sure  1500 
....................     #define wav_atKosmasi_sure    2000 
....................     #define wav_whoosh_sure  20 //300//350 
....................  
....................     #define oyunSure_1dk    (unsigned int32)(60*1250)//60000UL 
....................     #define oyunSure_3dk    (unsigned int32)(180*1250)//180000UL 
....................     #define oyunSure_5dk    (unsigned int32)(300*1250)//300000UL 
....................     #define oyunSure_7dk    (unsigned int32)(420*1250)//420000UL 
....................     #define oyunSure_10dk   (unsigned int32)(600*1250)//600000UL 
....................  
....................     #define millisMaxSayi 0xFFFFFFFF 
....................  
....................     #define birliDelikPuan 30 
....................     #define ikiliDelikPuan 20 
....................     #define ucluDelikPuan  10 
....................  
....................     #define dfPplayerMaxSes() mp3_set_volume (29);delay_ms(100)//48 
....................     #define dfPlayerNormSes() mp3_set_volume(20);delay_ms(100) 
....................     #define dfPlayerMinSes() mp3_set_volume(1);delay_ms(100) 
....................  
....................     #define textBufSil() text_sil() 
....................  
....................     #define ee_adres_jtnCount   0   //LSB Byte, high 3 
....................     #define ee_adres_jtnTL      4 
....................     #define ee_adres_Msure_1    5   //LSB Byte, high 6 
....................     #define ee_adres_Msure_2    7   //LSB Byte, high 8 
....................     #define ee_adres_Msure_3    9   //LSB Byte, high 10 
....................     #define ee_adres_oyunSure   11 
....................     #define ee_adres_dfSes      12 
....................  
....................  
....................     #define ee_adres_sw11_an_min_0_h      13 
....................     #define ee_adres_sw11_an_min_0_l      14 
....................     #define ee_adres_sw12_an_min_1_h      15 
....................     #define ee_adres_sw12_an_min_1_l      16 
....................     #define ee_adres_sw13_an_min_2_h      17 
....................     #define ee_adres_sw13_an_min_2_l      18 
....................     #define ee_adres_sw21_an_min_3_h      19 
....................     #define ee_adres_sw21_an_min_3_l      20 
....................     #define ee_adres_sw22_an_min_4_h      21 
....................     #define ee_adres_sw22_an_min_4_l      22 
....................     #define ee_adres_sw23_an_min_5_h      23 
....................     #define ee_adres_sw23_an_min_5_l      24 
....................  
....................     #define ee_adres_sw11_an_max_0_h      25 
....................     #define ee_adres_sw11_an_max_0_l      26 
....................     #define ee_adres_sw12_an_max_1_h      27 
....................     #define ee_adres_sw12_an_max_1_l      28 
....................     #define ee_adres_sw13_an_max_2_h      29 
....................     #define ee_adres_sw13_an_max_2_l      30 
....................     #define ee_adres_sw21_an_max_3_h      31 
....................     #define ee_adres_sw21_an_max_3_l      32 
....................     #define ee_adres_sw22_an_max_4_h      33 
....................     #define ee_adres_sw22_an_max_4_l      34 
....................     #define ee_adres_sw23_an_max_5_h      35 
....................     #define ee_adres_sw23_an_max_5_l      36 
....................  
....................     #define ee_adr_an_max_kal_h 37 
....................     #define ee_adr_an_max_kal_l 38 
....................     #define ee_adr_an_min_kal_h 39 
....................     #define ee_adr_an_min_kal_l 40 
....................  
....................     #define ee_adr_sens_okuma_sayisi    41 
....................  
....................  
....................  
....................     #define birDelikAdimSys   5 
....................  
....................     #define SENS_OKU_L    'L'     // Sensor normade low 
....................     #define SENS_OKU_H    'H'     // Sensor normade High  
....................  
....................    // #define SENS_OKU_H_L    SENS_OKU_H   
....................     #define SENS_OKU_H_L    SENS_OKU_L 
....................      
....................  
....................     #define lcd_led PIN_B2 
....................  
....................     //  ****    //// 
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_KART_TANIMLAR_H */ 
....................  
....................  
....................  
.................... //Bu haliyle SD kart ana klasörüne mp3 yada vaw dosya atýlmasý 
.................... // fark etmiyor her ikisinide çalýþtýrýyor.. Ýsimler ayný olmayacak... 
....................  
....................  
.................... void sendCommand(mbyte Command, mbyte Param1, mbyte Param2) { 
*
10DE:  MOVLW  05
10E0:  MOVLB  1
10E2:  ADDWF  x6A,W
10E4:  MOVWF  x7C
10E6:  MOVLW  01
10E8:  MOVWF  x7D
10EA:  BTFSC  FD8.0
10EC:  INCF   x7D,F
10EE:  MOVLW  01
10F0:  ADDWF  x7C,F
10F2:  MOVLW  00
10F4:  ADDWFC x7D,F
10F6:  MOVF   x6B,W
10F8:  ADDWF  x7C,F
10FA:  MOVLW  00
10FC:  ADDWFC x7D,F
10FE:  MOVF   x6C,W
1100:  ADDWF  x7C,W
1102:  MOVWF  01
1104:  MOVLW  00
1106:  ADDWFC x7D,W
1108:  MOVWF  03
110A:  MOVF   01,W
110C:  XORLW  FF
110E:  ADDLW  01
1110:  MOVWF  x77
1112:  MOVLW  00
1114:  SUBFWB 03,W
1116:  MOVWF  x78
1118:  MOVFF  177,179
111C:  MOVFF  178,17A
....................      
....................   //  disable_interrupts(GLOBAL); 
.................... // Calculate the checksum 
....................   mbyte commandBuffer[10]; 
....................   unsigned int16 checkSum = -(versionByte + dataLength + Command + infoReq + Param1 + Param2); 
....................   mbyte low_cSum=make8(checkSum,0); 
....................   mbyte high_cSum=make8(checkSum,1); 
....................   // Construct the command line 
....................   //mbyte commandBuffer[10] ={startByte, versionByte, dataLength, Command, infoReq, Param1, Param2,high_cSum,low_cSum, endByte}; 
....................    
....................   commandBuffer[0]=startByte; 
1120:  MOVLW  7E
1122:  MOVWF  x6D
....................   commandBuffer[1]=versionByte; 
1124:  SETF   x6E
....................   commandBuffer[2]=dataLength; 
1126:  MOVLW  06
1128:  MOVWF  x6F
....................   commandBuffer[3]=Command; 
112A:  MOVFF  16A,170
....................   commandBuffer[4]=infoReq; 
112E:  MOVLW  01
1130:  MOVWF  x71
....................   commandBuffer[5]=Param1; 
1132:  MOVFF  16B,172
....................   commandBuffer[6]=Param2; 
1136:  MOVFF  16C,173
....................   commandBuffer[7]=high_cSum; 
113A:  MOVFF  17A,174
....................   commandBuffer[8]=low_cSum; 
113E:  MOVFF  179,175
....................   commandBuffer[9]=endByte; 
1142:  MOVLW  EF
1144:  MOVWF  x76
.................... // 
....................   for (int cnt = 0; cnt < 10; cnt++) { 
1146:  CLRF   x7B
1148:  MOVF   x7B,W
114A:  SUBLW  09
114C:  BNC   116A
....................     //mp3.write(commandBuffer[cnt]); 
....................       //putc(commandBuffer[cnt]); 
....................       fputc(commandBuffer[cnt],dfPlayerSerial); 
114E:  CLRF   03
1150:  MOVF   x7B,W
1152:  ADDLW  6D
1154:  MOVWF  FE9
1156:  MOVLW  01
1158:  ADDWFC 03,W
115A:  MOVWF  FEA
115C:  MOVFF  FEF,17D
1160:  MOVLB  0
1162:  BRA    10CE
1164:  MOVLB  1
1166:  INCF   x7B,F
1168:  BRA    1148
116A:  CLRF   19
116C:  BTFSC  FF2.7
116E:  BSF    19.7
1170:  BCF    FF2.7
....................   } 
....................  
....................   // Delay needed between successive commands 
....................   delay_ms(30); 
1172:  MOVLW  1E
1174:  MOVWF  x86
1176:  MOVLB  0
1178:  CALL   0834
117C:  BTFSC  19.7
117E:  BSF    FF2.7
1180:  RETURN 0
....................  // enable_interrupts(GLOBAL); 
....................    
.................... } 
....................  
.................... // Set volume (otherwise full blast!) command code 0x06 followed by high byte / low byte 
.................... // sendCommand(0x06, 0, 30); 
.................... void mp3_set_volume (char vol){ 
....................     sendCommand(0x06, 0, vol); 
1182:  MOVLW  06
1184:  MOVLB  1
1186:  MOVWF  x6A
1188:  CLRF   x6B
118A:  MOVFF  165,16C
118E:  MOVLB  0
1190:  RCALL  10DE
1192:  RETURN 0
.................... } 
.................... // Equaliser setting 
.................... //  sendCommand(0x07, 0, 5); 
.................... void mp3_set_equalizer(char eq){ 
....................     sendCommand(0x07, 0, eq); 
1194:  MOVLW  07
1196:  MOVLB  1
1198:  MOVWF  x6A
119A:  CLRF   x6B
119C:  MOVFF  160,16C
11A0:  MOVLB  0
11A2:  RCALL  10DE
11A4:  GOTO   11FE (RETURN)
.................... } 
.................... // Specify track to play (0 = first track) 
.................... //  sendCommand(0x03, 0, 0); 
.................... void mp3_play_physical(unsigned int16 fileNum){ 
....................   sendCommand(0x03, make8(fileNum,1), make8(fileNum,0));   
*
128E:  MOVFF  161,162
1292:  MOVFF  160,163
1296:  MOVLW  03
1298:  MOVLB  1
129A:  MOVWF  x6A
129C:  MOVFF  161,16B
12A0:  MOVFF  160,16C
12A4:  MOVLB  0
12A6:  RCALL  10DE
12A8:  GOTO   1B80 (RETURN)
....................   //sendCommand(0x03, 0, 1); 
.................... } 
.................... // 
.................... void mp3_single_loop (unsigned int16 fileNum) { 
.................... 	sendCommand(0x08, make8(fileNum,1), make8(fileNum,0)); 
.................... }   
.................... void mp3_enableLoopAll(){ 
....................     sendCommand(0x11, 0x00,0x01 );         
.................... } 
.................... void mp3_disbleLoopAll(){ 
....................     sendCommand(0x11, 0x00,0x00 );         
.................... } 
.................... // Play 
....................   //sendCommand(0x0D, 0, 0); 
.................... void mp3_play (){ 
....................    sendCommand(0x0D, 0, 0);  
.................... } 
....................  
.................... void mp3_play (unsigned int16 fileNum)  
.................... { 
.................... 	//mp3_send_cmd (0x12, num); 
....................     sendCommand(0x12, make8(fileNum,1), make8(fileNum,0));   
*
11B8:  MOVFF  167,168
11BC:  MOVFF  166,169
11C0:  MOVLW  12
11C2:  MOVLB  1
11C4:  MOVWF  x6A
11C6:  MOVFF  167,16B
11CA:  MOVFF  166,16C
11CE:  MOVLB  0
11D0:  RCALL  10DE
11D2:  RETURN 0
.................... } 
.................... void mp3_stop(){ 
....................    sendCommand(0x16, 0, 0);      
*
11A8:  MOVLW  16
11AA:  MOVLB  1
11AC:  MOVWF  x6A
11AE:  CLRF   x6B
11B0:  CLRF   x6C
11B2:  MOVLB  0
11B4:  RCALL  10DE
11B6:  RETURN 0
.................... } 
.................... void mp3_reset(){ 
....................     sendCommand(0x0C, 0, 0);  
.................... } 
....................  
.................... void mp3_get_error () { 
....................     sendCommand(0x40, 0, 0);  
....................      
.................... } 
.................... void mp3_getData(*dizi){        //kilitlendi ..... 
....................     char i=0; 
....................      
....................     while(i<10){ 
....................         if(kbhit(dfPlayerSerial)){ 
....................             dizi[i]=fgetc(dfPlayerSerial); 
....................             i++; 
....................         }   
....................     } 
.................... } 
....................  
.................... void mp3_DataSeriGonder(*dizi,char len){  
....................    int k=0;   
.................... //   fprintf(usbSerial,"\r\n"); 
.................... //   for( k=0;k<len;k++){ 
.................... //           fprintf(usbSerial,"%x ",dizi[k]);     
.................... //   }  
.................... //   fprintf(usbSerial,"\r\n"); 
.................... } 
....................  
.................... int mp3_sarki=19; 
.................... int mp3_sarki_list[7]; 
.................... int mp3_index=0; 
....................  
.................... BOOLEAN mp3_list_kontrol(){ 
*
2538:  MOVLB  1
253A:  CLRF   x5F
....................     int x=0;  
....................     for(x=0;x<7;x++){ 
253C:  CLRF   x5F
253E:  MOVF   x5F,W
2540:  SUBLW  06
2542:  BNC   2562
....................         if( mp3_sarki==mp3_sarki_list[x]){ 
2544:  CLRF   03
2546:  MOVF   x5F,W
2548:  ADDLW  57
254A:  MOVWF  FE9
254C:  MOVLW  00
254E:  ADDWFC 03,W
2550:  MOVWF  FEA
2552:  MOVF   FEF,W
2554:  SUBWF  56,W
2556:  BNZ   255E
....................             return FALSE; 
2558:  MOVLW  00
255A:  MOVWF  01
255C:  BRA    2566
....................         }  
255E:  INCF   x5F,F
2560:  BRA    253E
....................     } 
....................     return TRUE; 
2562:  MOVLW  01
2564:  MOVWF  01
2566:  MOVLB  0
2568:  GOTO   2696 (RETURN)
....................  } 
....................   
.................... void mp3_rastgele(){ 
....................      
....................     mp3_stop(); 
*
263C:  CALL   11A8
2640:  CLRF   19
2642:  BTFSC  FF2.7
2644:  BSF    19.7
2646:  BCF    FF2.7
....................     delay_ms(100); 
2648:  MOVLW  64
264A:  MOVLB  1
264C:  MOVWF  x86
264E:  MOVLB  0
2650:  CALL   0834
2654:  BTFSC  19.7
2656:  BSF    FF2.7
....................     dfPlayerMinSes(); 
2658:  MOVLW  01
265A:  MOVLB  1
265C:  MOVWF  x65
265E:  MOVLB  0
2660:  CALL   1182
2664:  CLRF   19
2666:  BTFSC  FF2.7
2668:  BSF    19.7
266A:  BCF    FF2.7
266C:  MOVLW  64
266E:  MOVLB  1
2670:  MOVWF  x86
2672:  MOVLB  0
2674:  CALL   0834
2678:  BTFSC  19.7
267A:  BSF    FF2.7
....................      
....................      if(mp3_index>6){ 
267C:  MOVF   5E,W
267E:  SUBLW  06
2680:  BC    2694
....................         mp3_index=0; 
2682:  CLRF   5E
....................         memset(mp3_sarki_list,0,sizeof(mp3_sarki_list)); 
2684:  CLRF   FEA
2686:  MOVLW  57
2688:  MOVWF  FE9
268A:  CLRF   00
268C:  CLRF   02
268E:  MOVLW  07
2690:  MOVWF  01
2692:  BRA    251C
....................     } 
....................     while(!mp3_list_kontrol()){ 
2694:  BRA    2538
2696:  MOVF   01,F
2698:  BNZ   26C2
....................          mp3_sarki=20+rand()%7; 
269A:  BRA    25C8
269C:  MOVFF  02,160
26A0:  MOVFF  01,15F
26A4:  MOVFF  02,167
26A8:  MOVFF  01,166
26AC:  MOVLB  1
26AE:  CLRF   x69
26B0:  MOVLW  07
26B2:  MOVWF  x68
26B4:  MOVLB  0
26B6:  CALL   0AFC
26BA:  MOVF   00,W
26BC:  ADDLW  14
26BE:  MOVWF  56
26C0:  BRA    2694
....................     } 
....................     mp3_sarki_list[mp3_index]=mp3_sarki; 
26C2:  CLRF   03
26C4:  MOVF   5E,W
26C6:  ADDLW  57
26C8:  MOVWF  FE9
26CA:  MOVLW  00
26CC:  ADDWFC 03,W
26CE:  MOVWF  FEA
26D0:  MOVFF  56,FEF
....................     mp3_index++; 
26D4:  INCF   5E,F
....................  
....................     if(mp3_sarki>25)mp3_sarki=25; 
26D6:  MOVF   56,W
26D8:  SUBLW  19
26DA:  BC    26E0
26DC:  MOVLW  19
26DE:  MOVWF  56
....................     //mp3_play(mp3_getlowve_araba); 
....................      printf(lcd_putc,"\f     KOSTUR"); 
26E0:  MOVLW  D4
26E2:  MOVWF  FF6
26E4:  MOVLW  01
26E6:  MOVWF  FF7
26E8:  CLRF   19
26EA:  BTFSC  FF2.7
26EC:  BSF    19.7
26EE:  BCF    FF2.7
26F0:  CALL   08DE
26F4:  BTFSC  19.7
26F6:  BSF    FF2.7
....................      printf(lcd_putc,"\n   ::  %u  ::",mp3_sarki); 
26F8:  MOVLW  E2
26FA:  MOVWF  FF6
26FC:  MOVLW  01
26FE:  MOVWF  FF7
2700:  MOVLW  08
2702:  MOVLB  1
2704:  MOVWF  x69
2706:  MOVLB  0
2708:  CALL   0C0E
270C:  MOVFF  56,163
2710:  MOVLW  1B
2712:  MOVLB  1
2714:  MOVWF  x64
2716:  MOVLB  0
2718:  CALL   0B6E
271C:  MOVLW  EC
271E:  MOVWF  FF6
2720:  MOVLW  01
2722:  MOVWF  FF7
2724:  MOVLW  04
2726:  MOVLB  1
2728:  MOVWF  x69
272A:  MOVLB  0
272C:  CALL   0C0E
....................               
....................      dfPlayerNormSes(); 
2730:  MOVLW  14
2732:  MOVLB  1
2734:  MOVWF  x65
2736:  MOVLB  0
2738:  CALL   1182
273C:  CLRF   19
273E:  BTFSC  FF2.7
2740:  BSF    19.7
2742:  BCF    FF2.7
2744:  MOVLW  64
2746:  MOVLB  1
2748:  MOVWF  x86
274A:  MOVLB  0
274C:  CALL   0834
2750:  BTFSC  19.7
2752:  BSF    FF2.7
....................      mp3_play(mp3_sarki); 
2754:  MOVLB  1
2756:  CLRF   x67
2758:  MOVFF  56,166
275C:  MOVLB  0
275E:  CALL   11B8
2762:  GOTO   5B3C (RETURN)
....................    // delay_ms(1000); 
....................       
....................  } 
....................  
.................... void mp3_baslangic(unsigned int ses){ 
....................      
....................     delay_ms(500); /// Mp3  player donaným kurulumndan belli bir süre sonra çalýþtýrmalý.... 
*
11D4:  MOVLW  02
11D6:  MOVLB  1
11D8:  MOVWF  x60
11DA:  CLRF   19
11DC:  BTFSC  FF2.7
11DE:  BSF    19.7
11E0:  BCF    FF2.7
11E2:  MOVLW  FA
11E4:  MOVWF  x86
11E6:  MOVLB  0
11E8:  CALL   0834
11EC:  BTFSC  19.7
11EE:  BSF    FF2.7
11F0:  MOVLB  1
11F2:  DECFSZ x60,F
11F4:  BRA    11DA
....................     mp3_set_equalizer(5); 
11F6:  MOVLW  05
11F8:  MOVWF  x60
11FA:  MOVLB  0
11FC:  BRA    1194
11FE:  CLRF   19
1200:  BTFSC  FF2.7
1202:  BSF    19.7
1204:  BCF    FF2.7
....................     delay_ms(100); 
1206:  MOVLW  64
1208:  MOVLB  1
120A:  MOVWF  x86
120C:  MOVLB  0
120E:  CALL   0834
1212:  BTFSC  19.7
1214:  BSF    FF2.7
....................     //mp3_set_volume(15);//48 e kadar olabiliyor denendi... 
....................     //dfPlayer_ses= map(read_adc(),0,1023,0,dfPlayerMaxSes); 
....................     mp3_stop(); 
1216:  RCALL  11A8
1218:  CLRF   19
121A:  BTFSC  FF2.7
121C:  BSF    19.7
121E:  BCF    FF2.7
....................     delay_ms(100); 
1220:  MOVLW  64
1222:  MOVLB  1
1224:  MOVWF  x86
1226:  MOVLB  0
1228:  CALL   0834
122C:  BTFSC  19.7
122E:  BSF    FF2.7
....................     mp3_set_volume (ses);       //20 
1230:  MOVFF  15F,165
1234:  RCALL  1182
1236:  CLRF   19
1238:  BTFSC  FF2.7
123A:  BSF    19.7
123C:  BCF    FF2.7
....................     delay_ms(100); 
123E:  MOVLW  64
1240:  MOVLB  1
1242:  MOVWF  x86
1244:  MOVLB  0
1246:  CALL   0834
124A:  BTFSC  19.7
124C:  BSF    FF2.7
124E:  CLRF   19
1250:  BTFSC  FF2.7
1252:  BSF    19.7
1254:  BCF    FF2.7
....................     //mp3_enableLoopAll(); 
....................     delay_ms(100); 
1256:  MOVLW  64
1258:  MOVLB  1
125A:  MOVWF  x86
125C:  MOVLB  0
125E:  CALL   0834
1262:  BTFSC  19.7
1264:  BSF    FF2.7
....................    // mp3_single_loop(18); 
....................     mp3_play(mp3_dejavu); 
1266:  MOVLB  1
1268:  CLRF   x67
126A:  MOVLW  18
126C:  MOVWF  x66
126E:  MOVLB  0
1270:  RCALL  11B8
1272:  CLRF   19
1274:  BTFSC  FF2.7
1276:  BSF    19.7
1278:  BCF    FF2.7
....................     //mp3_rastgele(); 
....................     delay_ms(100); 
127A:  MOVLW  64
127C:  MOVLB  1
127E:  MOVWF  x86
1280:  MOVLB  0
1282:  CALL   0834
1286:  BTFSC  19.7
1288:  BSF    FF2.7
128A:  GOTO   5094 (RETURN)
....................      
.................... } 
....................  
.................... #include "dfPlayer.h" 
.................... /*  
....................  * File:   dfPlayer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 28 Þubat 2018 Çarþamba, 16:11 
....................  */ 
....................  
.................... /* 
....................  *	name:				DFPlayer_Mini_Mp3 
....................  *	version:			1.0 
....................  *	Author:				lisper <lisper.li@dfrobot.com> 
....................  *	Date:				2014-05-22 
....................  *	official website:		http://www.dfrobot.com 
....................  *	Products page:			http://www.dfrobot.com/index.php?route=product/product&product_id=1121#.U5Z_RYbUN8E 
....................  *	Description:			mp3 library for DFPlayer mini board 
....................  *					        note: mp3 file must put into mp3 folder in your tf card 
....................  */ 
....................  
.................... #ifndef DFPLAYER_H 
.................... #define	DFPLAYER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     typedef unsigned char mbyte; 
....................      
....................     #define startByte 0x7E 
....................     #define endByte 0xEF 
....................     #define versionByte 0xFF 
....................     #define dataLength 0x06 
....................     #define infoReq 0x01        //0x01 
....................     #define isDebug false 
....................     #define dfPlayerMaxSes 30 // dec30:0x1E 
....................  
....................     #define DF_BUSY_PIN  PIN_B1 //PIN_B3 
....................  
....................     void sendCommand(mbyte Command, mbyte Param1, mbyte Param2); 
....................     void mp3_set_volume (char vol); 
....................     void mp3_set_equalizer(char eq); 
....................     void mp3_play_physical(unsigned int16 fileNum); 
....................     void mp3_get_error (); 
....................     void mp3_single_loop (unsigned int16 fileNum) ; 
....................     void mp3_enableLoopAll(); 
....................     void mp3_disbleLoopAll(); 
....................     void mp3_getData(*dizi); 
....................     void mp3_DataSeriGonder(*dizi,char len); 
....................     void mp3_stop(); 
....................     void mp3_reset(); 
....................     void mp3_baslangic(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* DFPLAYER_H */ 
....................  
....................  
.................... #include "top_sw_islemler.c" 
.................... #include "kostur_kart_tanimlar.h" 
.................... /*  
....................  * File:   kostur_kart_tanimlar.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 09 Mart 2018 Cuma, 15:36 
....................  */ 
....................  
.................... #ifndef KOSTUR_KART_TANIMLAR_H 
.................... #define	KOSTUR_KART_TANIMLAR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     //unsigned int16 spiData=0;  //16 bit veri gönderileceði zaman 
....................     unsigned int8 spiDataH=0,spiDataM=0,spiDataL=0; 
....................     int8 jetonSay=0; 
....................     void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit); 
....................     void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL); 
....................      
....................     #define spi_yaz16() hc595_spi_yaz(spiData,16) 
....................     #define spi_yaz24() hc595_spi_24bit_yaz(spiDataH,spiDataM,spiDataL) 
....................     #define hc_595_clr_allPins() hc595_spi_24bit_yaz(0x00,0x00,0x00);//delay_ms(100) 
....................     #define hc_595_set_allPins() hc595_spi_24bit_yaz(0xFF,0xFF,0xFF);delay_ms(100) 
....................      
....................     // spiDataL  ilk 8bit 
....................     #define l2_1    0 
....................     #define l2_2    1 
....................     #define l2_3    2 
....................     #define l1_1    3 
....................     #define l1_2    4 
....................     #define l1_3    5 
....................     #define led_k   6 
....................     #define led_y   7 
....................     // spiDataM ikinci 8 bit 
....................     #define led_m   0 
....................     #define c2      1 
....................     #define b2      2 
....................     #define a2      3 
....................     #define c1      4 
....................     #define b1      5 
....................     #define a1      6 
....................     #define u_led   7 
....................     // spiDataH üçüncü 8 bit 
....................     #define in1     0 
....................     #define in2     1 
....................     #define in3     2 
....................     #define in4     3 
....................     #define in5     4 
....................     #define in6     5 
....................     #define in7     6 
....................     #define in8     7 
....................  
....................     //74HC4051_1 tanýmlamalarý 
....................  
....................     #define an_sw1_1_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw1_2_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw1_3_sec() bit_clear(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1); spi_yaz24()      
....................      
....................     #define an_sw2_1_sec() bit_set(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw2_2_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw2_3_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1); spi_yaz24()   
....................                                                         
....................     #define an_dFSesSec() bit_clear(spiDataM,a1);bit_set(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()  
....................      
....................                          
....................     #define dfSesAyarla() an_dFSesSec();set_adc_channel(0); delay_us(20); \ 
....................                            mp3_set_volume(map(read_adc(),0,1023,0,30))     \ 
....................  
....................     #define an_sa_m1_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m1_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_1_sec() bit_clear(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_2_sec() bit_set(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24() 
....................     #define an_sa_m3_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m3_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................  
....................     #define o1_L1_on()  bit_set(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_on()  bit_set(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_on()  bit_set(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_on() o1_L1_on();o1_L2_on();o1_L3_on() 
....................  
....................     #define o1_L1_off()  bit_clear(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_off()  bit_clear(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_off()  bit_clear(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_off()  o1_L1_off();o1_L2_off();o1_L3_off() 
....................  
....................     #define o2_L1_on()  bit_set(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_on()  bit_set(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_on()  bit_set(spiDataL,l2_3);spi_yaz24() 
....................      #define o2_L123_on() o2_L1_on();o2_L2_on();o2_L3_on() 
....................  
....................     #define o2_L1_off()  bit_clear(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_off()  bit_clear(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_off()  bit_clear(spiDataL,l2_3);spi_yaz24() 
....................     #define o2_L123_off()  o2_L1_off();o2_L2_off();o1_L3_off() 
....................  
....................     #define sw_led_off() o1_L123_off(); o2_L123_off() 
....................     #define sw_led_on() o1_L123_on();o2_L123_on() 
....................      
....................     #define rgb_kirmizi_on()  bit_set(spiDataL,led_k);spi_yaz24() 
....................     #define rgb_kirmizi_off() bit_clear(spiDataL,led_k);spi_yaz24() 
....................      
....................     #define rgb_yesil_on() bit_set(spiDataL,led_y);spi_yaz24() 
....................     #define rgb_yesil_off() bit_clear(spiDataL,led_y);spi_yaz24() 
....................      
....................     #define rgb_mavi_on() bit_set(spiDataM,led_m);spi_yaz24() 
....................     #define rgb_mavi_off() bit_clear(spiDataM,led_m);spi_yaz24() 
....................  
....................     //#define rgb_beyaz_on() rgb_kirmizi_on();rgb_yesil_on();rgb_mavi_on() 
....................     #define rgb_beyaz_on()   bit_set(spiDataL,led_k); bit_set(spiDataL,led_y);  \ 
....................                              bit_set(spiDataM,led_m); spi_yaz24()              \ 
....................  
....................     //#define rgb_beyaz_off() rgb_kirmizi_off();rgb_yesil_off();rgb_mavi_off() 
....................     #define rgb_beyaz_off() bit_clear(spiDataL,led_k);bit_clear(spiDataL,led_y);    \ 
....................                             bit_clear(spiDataM,led_m);spi_yaz24()                   \ 
....................  
....................     #define motor1_ileri() bit_set(spiDataH,in1);    \ 
....................                            bit_clear(spiDataH,in2);  \ 
....................                            spi_yaz24()              \                       
....................                            //output_high(PIN_C2)      \ 
....................                           // Rc2 : ccp1                       
....................     #define motor1_geri()  bit_set(spiDataH,in2);    \ 
....................                            bit_clear(spiDataH,in1);  \ 
....................                            spi_yaz24()              \                       
....................                           // output_high(PIN_C2)    \       //PWM yoksa  
....................     #define motor1_dur() bit_clear(spiDataH,in1);    \ 
....................                          bit_clear(spiDataH,in2);    \                          
....................                          spi_yaz24()                \ 
....................                                   
....................     #define motor2_ileri() bit_set(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()              \                        
....................                           // output_high(PIN_C11)    \       //PWM yoksa  
....................                           // Rc1 : ccp2 
....................     #define motor2_geri()  bit_set(spiDataH,in4);    \ 
....................                            bit_clear(spiDataH,in3);  \ 
....................                            spi_yaz24()              \ 
....................                                     
....................     #define motor2_dur()   bit_clear(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()               \          
....................                            //output_high(PIN_C1)    \       //PWM yoksa    
....................     #define motor3_ileri() bit_set(spiDataH,in5);    \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \      //En pin +5V'ta donanýmda   
....................                                    
....................     #define motor3_geri()  bit_set(spiDataH,in6);    \ 
....................                            bit_clear(spiDataH,in5);  \ 
....................                            spi_yaz24()              \ 
....................                                   
....................     #define motor3_dur()   bit_clear(spiDataH,in5);  \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \ 
....................                             
....................     #define oyunbittiM12dur_doBrk() if(sa_m1_2()||sa_m2_2()||f_oyunBitti)\ 
....................                                     {                                   \ 
....................                                         motor1_dur();                   \ 
....................                                         motor2_dur();                   \ 
....................                                         f_oyunBitti=TRUE;               \  
....................                                         break;                          \ 
....................                                     }                                   \ 
....................                             
....................  
....................      
....................     #define jtn_pin PIN_B0                  //Pin ler  büyük harfle olmalý 
....................     #define ticket_out_pin PIN_C0 
....................      //delay_ms(300);;                               
....................     #define jetonKontrol() if(!input(jtn_pin)){                         \ 
....................                                                                         \ 
....................                             jetonSay++;                                 \ 
....................                            }                                            \ 
....................                            if(jetonSay>=jtnTLMik){                      \ 
....................                                 jetonAtildi=TRUE;                       \ 
....................                                 jetonSay=0;                             \ 
....................                            }                                            \ 
....................      
....................     #define btn1 PIN_A5 
....................     #define btn2 PIN_A3                        
....................     #define btn3 PIN_A2 
....................  
....................    /// wav dosyasý tanýmlamlarý 
....................     /// mp3-wav index 
.................... 	#define wav_atKisnemesi     1 
.................... 	#define wav_atKosmasi       2 
.................... 	#define wav_suDamlasi       3 
.................... 	#define wav_heySesi         4 
.................... 	#define wav_alkisSesi       5 
.................... 	#define wav_oyunBitti       6 
.................... 	#define wav_getReady        7 
.................... 	#define wav_whoosh          8 
.................... 	#define wav_jeton           9 
.................... 	#define mp3_remix           10 
.................... 	#define mp3_tavsan          11 
.................... 	#define wav_waterDrop       12 
.................... 	#define mp3_adele_Rolling   14 
.................... 	#define wav_duduk_basla     15 
.................... 	#define wav_ding            16 
.................... 	#define mp3_mars            17 
.................... 	#define mp3_getlowve_araba	18 
....................     #define mp3_beep_uyari      19 
....................  
....................      //// bosta rastgele mp3 müzik 
....................      
....................     #define mp3_adele_Rolling2  20 
....................     #define mp3_anitta          21 
....................     #define mp3_love_lo         22 
....................     #define mp3_agen            23 
....................     #define mp3_dejavu          24 
....................     #define mp3_rain            25 
....................     #define mp3_aweli           26 
....................  
....................     #define wav_remix_sure 200000 //(3*60+20)*1000  //3:20 mS degeri.... 
....................     #define wav_atKisnemesi_sure  1500 
....................     #define wav_atKosmasi_sure    2000 
....................     #define wav_whoosh_sure  20 //300//350 
....................  
....................     #define oyunSure_1dk    (unsigned int32)(60*1250)//60000UL 
....................     #define oyunSure_3dk    (unsigned int32)(180*1250)//180000UL 
....................     #define oyunSure_5dk    (unsigned int32)(300*1250)//300000UL 
....................     #define oyunSure_7dk    (unsigned int32)(420*1250)//420000UL 
....................     #define oyunSure_10dk   (unsigned int32)(600*1250)//600000UL 
....................  
....................     #define millisMaxSayi 0xFFFFFFFF 
....................  
....................     #define birliDelikPuan 30 
....................     #define ikiliDelikPuan 20 
....................     #define ucluDelikPuan  10 
....................  
....................     #define dfPplayerMaxSes() mp3_set_volume (29);delay_ms(100)//48 
....................     #define dfPlayerNormSes() mp3_set_volume(20);delay_ms(100) 
....................     #define dfPlayerMinSes() mp3_set_volume(1);delay_ms(100) 
....................  
....................     #define textBufSil() text_sil() 
....................  
....................     #define ee_adres_jtnCount   0   //LSB Byte, high 3 
....................     #define ee_adres_jtnTL      4 
....................     #define ee_adres_Msure_1    5   //LSB Byte, high 6 
....................     #define ee_adres_Msure_2    7   //LSB Byte, high 8 
....................     #define ee_adres_Msure_3    9   //LSB Byte, high 10 
....................     #define ee_adres_oyunSure   11 
....................     #define ee_adres_dfSes      12 
....................  
....................  
....................     #define ee_adres_sw11_an_min_0_h      13 
....................     #define ee_adres_sw11_an_min_0_l      14 
....................     #define ee_adres_sw12_an_min_1_h      15 
....................     #define ee_adres_sw12_an_min_1_l      16 
....................     #define ee_adres_sw13_an_min_2_h      17 
....................     #define ee_adres_sw13_an_min_2_l      18 
....................     #define ee_adres_sw21_an_min_3_h      19 
....................     #define ee_adres_sw21_an_min_3_l      20 
....................     #define ee_adres_sw22_an_min_4_h      21 
....................     #define ee_adres_sw22_an_min_4_l      22 
....................     #define ee_adres_sw23_an_min_5_h      23 
....................     #define ee_adres_sw23_an_min_5_l      24 
....................  
....................     #define ee_adres_sw11_an_max_0_h      25 
....................     #define ee_adres_sw11_an_max_0_l      26 
....................     #define ee_adres_sw12_an_max_1_h      27 
....................     #define ee_adres_sw12_an_max_1_l      28 
....................     #define ee_adres_sw13_an_max_2_h      29 
....................     #define ee_adres_sw13_an_max_2_l      30 
....................     #define ee_adres_sw21_an_max_3_h      31 
....................     #define ee_adres_sw21_an_max_3_l      32 
....................     #define ee_adres_sw22_an_max_4_h      33 
....................     #define ee_adres_sw22_an_max_4_l      34 
....................     #define ee_adres_sw23_an_max_5_h      35 
....................     #define ee_adres_sw23_an_max_5_l      36 
....................  
....................     #define ee_adr_an_max_kal_h 37 
....................     #define ee_adr_an_max_kal_l 38 
....................     #define ee_adr_an_min_kal_h 39 
....................     #define ee_adr_an_min_kal_l 40 
....................  
....................     #define ee_adr_sens_okuma_sayisi    41 
....................  
....................  
....................  
....................     #define birDelikAdimSys   5 
....................  
....................     #define SENS_OKU_L    'L'     // Sensor normade low 
....................     #define SENS_OKU_H    'H'     // Sensor normade High  
....................  
....................    // #define SENS_OKU_H_L    SENS_OKU_H   
....................     #define SENS_OKU_H_L    SENS_OKU_L 
....................      
....................  
....................     #define lcd_led PIN_B2 
....................  
....................     //  ****    //// 
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_KART_TANIMLAR_H */ 
....................  
....................  
.................... #include "dfPlayer.h" 
.................... /*  
....................  * File:   dfPlayer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 28 Þubat 2018 Çarþamba, 16:11 
....................  */ 
....................  
.................... /* 
....................  *	name:				DFPlayer_Mini_Mp3 
....................  *	version:			1.0 
....................  *	Author:				lisper <lisper.li@dfrobot.com> 
....................  *	Date:				2014-05-22 
....................  *	official website:		http://www.dfrobot.com 
....................  *	Products page:			http://www.dfrobot.com/index.php?route=product/product&product_id=1121#.U5Z_RYbUN8E 
....................  *	Description:			mp3 library for DFPlayer mini board 
....................  *					        note: mp3 file must put into mp3 folder in your tf card 
....................  */ 
....................  
.................... #ifndef DFPLAYER_H 
.................... #define	DFPLAYER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     typedef unsigned char mbyte; 
....................      
....................     #define startByte 0x7E 
....................     #define endByte 0xEF 
....................     #define versionByte 0xFF 
....................     #define dataLength 0x06 
....................     #define infoReq 0x01        //0x01 
....................     #define isDebug false 
....................     #define dfPlayerMaxSes 30 // dec30:0x1E 
....................  
....................     #define DF_BUSY_PIN  PIN_B1 //PIN_B3 
....................  
....................     void sendCommand(mbyte Command, mbyte Param1, mbyte Param2); 
....................     void mp3_set_volume (char vol); 
....................     void mp3_set_equalizer(char eq); 
....................     void mp3_play_physical(unsigned int16 fileNum); 
....................     void mp3_get_error (); 
....................     void mp3_single_loop (unsigned int16 fileNum) ; 
....................     void mp3_enableLoopAll(); 
....................     void mp3_disbleLoopAll(); 
....................     void mp3_getData(*dizi); 
....................     void mp3_DataSeriGonder(*dizi,char len); 
....................     void mp3_stop(); 
....................     void mp3_reset(); 
....................     void mp3_baslangic(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* DFPLAYER_H */ 
....................  
....................  
.................... #include "main_kostur.h" 
.................... /*  
....................  * File:   main_kostur.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 05 Mayýs 2018 Cumartesi, 11:49 
....................  */ 
....................  
.................... #ifndef MAIN_KOSTUR_H 
.................... #define	MAIN_KOSTUR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................      
....................     #include <18F45K22.h> 
....................     //#include <18F4520.h> 
....................     #device adc=10 
....................     #device HIGH_INTS=TRUE  
....................     #device PASS_STRINGS=IN_RAM   
....................  
.................... //    #fuses HSM, NOWDT, BROWNOUT, PUT, NOPBADEN, NOHFOFST  
.................... //    #fuses NOPLLEN        //HW PLL disabled, PLL enabled in software  
.................... //    #fuses MCLR           //Master Clear pin enabled  
.................... //    #fuses PROTECT        //Code protected from reads  
.................... //    #use delay(clock=10MHz,crystal=10MHz) 
....................      
....................     #FUSES NOWDT                    //No Watch Dog Timer 
....................     #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
....................     #FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
....................     #FUSES NOIESO                   //Internal External Switch Over mode disabled 
....................     #FUSES NOBROWNOUT               //No brownout reset 
....................     #FUSES NOPBADEN                 //PORTB pins are configured as digital I/O on RESET 
....................     #FUSES NOHFOFST                 //High Frequency INTRC waits until stable before clocking CPU //1845k22 de AKTÝF 
....................     #FUSES NOSTVREN                 //Stack full/underflow will not cause reset 
....................     #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................     #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................     #FUSES PROTECT                  //Code protected from reads 
....................     #FUSES PLLEN 
....................     #FUSES PRIMARY_ON   
....................     #FUSES MCLR  
....................  
....................     #use delay(clock=40000000,crystal=10000000)    
....................  
.................... //    #FUSES NOWDT  
.................... //    #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale  
.................... //    #FUSES HSH                      //High speed with 4x PLL  
.................... //    #FUSES PROTECT                //Code  protected from reading  
.................... //    #FUSES NOBROWNOUT               //No brownout reset  
.................... //    #FUSES NOPUT                    //No Power Up Timer  
.................... //    #FUSES NOCPD                    //No EE protection  
.................... //    #FUSES NOSTVREN                   //Stack full/underflow will cause reset  
.................... //    #FUSES NODEBUG                  //No Debug mode for ICD  
.................... //    #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O  
.................... //    #FUSES WRT                    //Program memory not write protected  
.................... //    #FUSES WRTD                   //Data EEPROM not write protected  
.................... //    #FUSES NOIESO                     //Internal External Switch Over mode enabled  
.................... //    #FUSES NOFCMEN                    //Fail-safe clock monitor enabled  
.................... //    #FUSES NOPBADEN                 //PORTB pins are configured as digital I/O on RESET  
.................... //    #FUSES NOWRTC                   //configuration not registers write protected  
.................... //    #FUSES NOWRTB                   //Boot block not write protected  
.................... //    #FUSES NOEBTR                   //Memory not protected from table reads  
.................... //    #FUSES NOEBTRB                  //Boot block not protected from table reads  
.................... //    #FUSES NOCPB                    //No Boot Block code protection  
.................... //    #FUSES MCLR                     //Master Clear pin enabled  
.................... //    #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)  
.................... //    #FUSES PLLEN                    //Enable PLL 4x Clock  
.................... //    #FUSES PRIMARY_ON     
.................... //    #FUSES NOHFOFST                 //High Frequency INTRC waits until stable before clocking CPU  
.................... // 
.................... //    #use delay(clock=40Mhz, crystal=10MHz)  
....................      
....................     #use fast_io(A) 
....................     #use fast_io(B) 
....................     #use fast_io(C) 
....................     #use fast_io(D) 
....................     #use fast_io(E) 
....................  
....................     #use rs232(baud=9600,parity=N, xmit=PIN_D6, rcv=PIN_D7,bits=8,DISABLE_INTS,STREAM=softSerial)   //seri port pin tanýmlama 
....................     #use rs232(baud=9600,parity=N, xmit=PIN_C6, rcv=PIN_C7,bits=8,DISABLE_INTS,STREAM=dfPlayerSerial)   //seri port pin tanýmlama 
....................     //#use rs232(uart1,baud =9600,DISABLE_INTS,STREAM=dfPlayerSerial)  
....................     //#use rs232(uart2,baud =9600,DISABLE_INTS,STREAM=softSerial) 
....................      
....................     //#use timer(timer=1,tick=100us,bits=32,NOISR)   
....................     //#USE TIMER(TIMER=1,TICK=1ms,BITS=32,ISR)   
....................     #define TICK_TYPE unsigned int32  
....................  
....................     extern unsigned int32 timerIntSay; 
....................     int32 oyunSureSaySaniye=0; 
....................      
....................     void delay_m_us(unsigned int16 n) ; 
....................     long map(long x, long in_min, long in_max, long out_min, long out_max); 
....................     void ISR_RB0(); 
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* MAIN_KOSTUR_H */ 
....................  
....................  
....................  
....................  
.................... unsigned int32 atKisnemesi_ilkSure=0; 
.................... unsigned int32 atKosmasi_ilkSure=0; 
.................... unsigned int32 motorSureBasla=0; 
.................... unsigned int32 whooshSureBasla=0; 
....................  
.................... //* 60 RPM motor kullanýlýyor 
....................  
.................... unsigned int16 m1_birliDelik_sure=2400;     //60rpm motor ve 1 delik için 5 atýþ 
.................... unsigned int16 m1_ikiliDelik_sure=1600; 
.................... unsigned int16 m1_ucluDelik_sure=800; 
....................  
.................... unsigned int16 m2_birliDelik_sure=2400; 
.................... unsigned int16 m2_ikiliDelik_sure=1600; 
.................... unsigned int16 m2_ucluDelik_sure=800; 
....................  
.................... unsigned int16 o1_puan=0; 
.................... unsigned int16 o2_puan=0; 
.................... unsigned int1 yeniPuan_o1=FALSE; 
.................... unsigned int1 yeniPuan_o2=FALSE; 
....................  
.................... int1 f_oyunBitti=FALSE; 
.................... int1 f_kisneme=0; 
.................... unsigned int32 oyunBitisSureBasla=0;    // Ayarlanan oyun bitiþ süresi için 
.................... int ee_oyunSure=5; 
....................  
.................... #define sw_11 11 
.................... #define sw_12 12 
.................... #define sw_13 13 
....................  
.................... #define sw_21 21 
.................... #define sw_22 22 
.................... #define sw_23 23 
....................  
.................... #define sa_11 31  
.................... #define sa_12 32 
....................  
.................... #define sa_21 33  
.................... #define sa_22 34 
....................  
.................... #define sa_31 35  
.................... #define sa_32 36 
....................  
.................... ////******////// 
....................  
.................... //#define adcBekle 20 
....................  
.................... //#define an_esik 512       //2.5 V 
.................... //#define an_esik 400//409       // 2V 
.................... //#define an_esik   358       //1.75V 
....................  
....................  #define sa_an_esik 307       // 1.5V  //motorlar sýnýr anahtarlarý için belirlendi... 
....................  
.................... //#define an_esik 256         // 1.25 V 
.................... // #define an_esik 204       // 1 V 
....................  
.................... //200:0,976 V  ve 400:1,953 V   410:2,001  
....................  
.................... //#define aralik_deger 75    //20*(4.882mv)=97mV 
.................... // 75:366 mV   82:400 mV 
.................... unsigned long deger=0; 
.................... unsigned long an_min[6];    
.................... unsigned long ee_an_min=204; 
.................... unsigned long an_max[6];   //0:sw1_1   5:sw2_3 
.................... unsigned long _an_max[6]; 
.................... unsigned long an_esik=307;//1,5V 
....................  
.................... unsigned long an_max_ort=0; 
....................  
.................... #define ARTTI 1 
.................... #define AZALDI 0 
.................... #define AYNI  0x 
.................... #define ADC_CHNL_SURE   40      //20 
.................... #define ESIK_MV 75  //50*4,889=~250mV 
.................... #define ADC_MAX_OLC 16 
.................... #define ADC_SIHFT_R 4       //ortalama ama iþlemi için shift right 
.................... #define ESIK_RST 0 
.................... #define DEGER_RST 0xffff 
....................  
.................... unsigned long an_max_arttti_azaldi[6]; 
.................... unsigned long an_min_arttti_azaldi[6]; 
....................  
....................  
.................... void ee_an_max_yaz(void){ 
....................      
....................     write_eeprom(ee_adres_sw11_an_max_0_h, make8(an_max[0],1));     //high deger 
....................     write_eeprom(ee_adres_sw11_an_max_0_l, make8(an_max[0],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw12_an_max_1_h, make8(an_max[1],1));     //high deger 
....................     write_eeprom(ee_adres_sw12_an_max_1_l, make8(an_max[1],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw13_an_max_2_h, make8(an_max[2],1));     //high deger 
....................     write_eeprom(ee_adres_sw13_an_max_2_l, make8(an_max[2],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw21_an_max_3_h, make8(an_max[3],1));     //high deger 
....................     write_eeprom(ee_adres_sw21_an_max_3_l, make8(an_max[3],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw22_an_max_4_h, make8(an_max[4],1));     //high deger 
....................     write_eeprom(ee_adres_sw22_an_max_4_l, make8(an_max[4],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw23_an_max_5_h, make8(an_max[5],1));     //high deger 
....................     write_eeprom(ee_adres_sw23_an_max_5_l, make8(an_max[5],0));     //low deger 
.................... } 
....................  
.................... void ee_an_min_yaz(void){ 
....................     write_eeprom(ee_adres_sw11_an_min_0_h, make8(an_min[0],1));     //high deger 
....................     write_eeprom(ee_adres_sw11_an_min_0_l, make8(an_min[0],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw12_an_min_1_h, make8(an_min[1],1));     //high deger 
....................     write_eeprom(ee_adres_sw12_an_min_1_l, make8(an_min[1],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw13_an_min_2_h, make8(an_min[2],1));     //high deger 
....................     write_eeprom(ee_adres_sw13_an_min_2_l, make8(an_min[2],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw21_an_min_3_h, make8(an_min[3],1));     //high deger 
....................     write_eeprom(ee_adres_sw21_an_min_3_l, make8(an_min[3],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw22_an_min_4_h, make8(an_min[4],1));     //high deger 
....................     write_eeprom(ee_adres_sw22_an_min_4_l, make8(an_min[4],0));     //low deger 
....................      
....................     write_eeprom(ee_adres_sw23_an_min_5_h, make8(an_min[5],1));     //high deger 
....................     write_eeprom(ee_adres_sw23_an_min_5_l, make8(an_min[5],0));     //low deger 
.................... } 
....................  
....................  
.................... void an_max_min_reset(){ 
*
12AC:  MOVLB  1
12AE:  CLRF   x65
....................     int x=0; 
....................  
....................     for(x=0;x<6;x++){ 
12B0:  CLRF   x65
12B2:  MOVF   x65,W
12B4:  SUBLW  05
12B6:  BNC   12F0
....................         an_min[x]=sens_min_kal;      // 1V  205 
12B8:  BCF    FD8.0
12BA:  RLCF   x65,W
12BC:  CLRF   03
12BE:  ADDLW  89
12C0:  MOVWF  FE9
12C2:  MOVLW  00
12C4:  ADDWFC 03,W
12C6:  MOVWF  FEA
12C8:  MOVFF  4D,FEC
12CC:  MOVF   FED,F
12CE:  MOVFF  4C,FEF
....................         an_max[x]=sens_max_kal;      // 2V  410 
12D2:  BCF    FD8.0
12D4:  RLCF   x65,W
12D6:  CLRF   03
12D8:  ADDLW  97
12DA:  MOVWF  FE9
12DC:  MOVLW  00
12DE:  ADDWFC 03,W
12E0:  MOVWF  FEA
12E2:  MOVFF  4B,FEC
12E6:  MOVF   FED,F
12E8:  MOVFF  4A,FEF
12EC:  INCF   x65,F
12EE:  BRA    12B2
....................     } 
12F0:  MOVLB  0
12F2:  RETURN 0
.................... } 
....................  
.................... BOOLEAN ee_sens_min_kontrol(){ 
....................     int i; 
....................      
....................     for (i = 13; i < 25; i++) { 
....................         if(read_eeprom(i)!=0xFF) return TRUE;// sens min-max degeri varsa 
....................    } 
....................     return FALSE; 
....................          
.................... } 
....................  
.................... void ee_sens_kalibre_oku(){ 
....................      
....................     int i,sens=0; 
....................  
....................     for (i = 13; i < 25; i+=2) { 
....................         ee_an_min=read_eeprom(i);   //high deger 
....................          
....................         if(ee_an_min!=0xFF){ 
....................             an_min[sens]=make16(read_eeprom(i),read_eeprom(i+1)); 
....................         }else if(ee_an_min==0xFF){ 
....................             an_min[sens]=204;   //reset deger. 
....................         } 
....................          sens++; 
....................     } 
....................    
....................     printf(lcd_putc,"\fmin:%Lu,%Lu,%Lu",an_min[0],an_min[1],an_min[2]); 
....................     printf(lcd_putc,"\n%Lu,%Lu,%Lu",an_min[3],an_min[4],an_min[5]); 
....................      
....................     delay_ms(1000); 
.................... } 
....................  
.................... void an_max_adc_oku(){ 
....................  
....................     int i; 
....................     for (i = 0; i < 16; i++) { 
*
2B56:  MOVLB  1
2B58:  CLRF   x65
2B5A:  MOVF   x65,W
2B5C:  SUBLW  0F
2B5E:  BTFSS  FD8.0
2B60:  BRA    2CBA
....................          
....................         an_sw1_1_sec(); 
2B62:  BCF    47.6
2B64:  BCF    47.5
2B66:  BCF    47.4
2B68:  MOVFF  46,16C
2B6C:  MOVFF  47,16D
2B70:  MOVFF  48,16E
2B74:  MOVLB  0
2B76:  CALL   092A
....................         set_adc_channel(0);  
2B7A:  MOVLW  00
2B7C:  MOVWF  01
2B7E:  MOVF   FC2,W
2B80:  ANDLW  83
2B82:  IORWF  01,W
2B84:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
2B86:  MOVLW  85
2B88:  MOVWF  00
2B8A:  DECFSZ 00,F
2B8C:  BRA    2B8A
....................         _an_max[0]+=read_adc(); 
2B8E:  BSF    FC2.1
2B90:  BTFSC  FC2.1
2B92:  BRA    2B90
2B94:  MOVF   FC3,W
2B96:  ADDWF  xA3,F
2B98:  MOVF   FC4,W
2B9A:  ADDWFC xA4,F
....................  
....................         an_sw1_2_sec(); 
2B9C:  BSF    47.6
2B9E:  BCF    47.5
2BA0:  BCF    47.4
2BA2:  MOVFF  46,16C
2BA6:  MOVFF  47,16D
2BAA:  MOVFF  48,16E
2BAE:  CALL   092A
....................         set_adc_channel(0);  
2BB2:  MOVLW  00
2BB4:  MOVWF  01
2BB6:  MOVF   FC2,W
2BB8:  ANDLW  83
2BBA:  IORWF  01,W
2BBC:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
2BBE:  MOVLW  85
2BC0:  MOVWF  00
2BC2:  DECFSZ 00,F
2BC4:  BRA    2BC2
....................         _an_max[1]+=read_adc(); 
2BC6:  BSF    FC2.1
2BC8:  BTFSC  FC2.1
2BCA:  BRA    2BC8
2BCC:  MOVF   FC3,W
2BCE:  ADDWF  xA5,F
2BD0:  MOVF   FC4,W
2BD2:  ADDWFC xA6,F
....................  
....................         an_sw1_3_sec(); 
2BD4:  BCF    47.6
2BD6:  BSF    47.5
2BD8:  BCF    47.4
2BDA:  MOVFF  46,16C
2BDE:  MOVFF  47,16D
2BE2:  MOVFF  48,16E
2BE6:  CALL   092A
....................         set_adc_channel(0);  
2BEA:  MOVLW  00
2BEC:  MOVWF  01
2BEE:  MOVF   FC2,W
2BF0:  ANDLW  83
2BF2:  IORWF  01,W
2BF4:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
2BF6:  MOVLW  85
2BF8:  MOVWF  00
2BFA:  DECFSZ 00,F
2BFC:  BRA    2BFA
....................         _an_max[2]+=read_adc(); 
2BFE:  BSF    FC2.1
2C00:  BTFSC  FC2.1
2C02:  BRA    2C00
2C04:  MOVF   FC3,W
2C06:  ADDWF  xA7,F
2C08:  MOVF   FC4,W
2C0A:  ADDWFC xA8,F
....................  
....................         an_sw2_1_sec(); 
2C0C:  BSF    47.6
2C0E:  BSF    47.5
2C10:  BCF    47.4
2C12:  MOVFF  46,16C
2C16:  MOVFF  47,16D
2C1A:  MOVFF  48,16E
2C1E:  CALL   092A
....................         set_adc_channel(0);  
2C22:  MOVLW  00
2C24:  MOVWF  01
2C26:  MOVF   FC2,W
2C28:  ANDLW  83
2C2A:  IORWF  01,W
2C2C:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
2C2E:  MOVLW  85
2C30:  MOVWF  00
2C32:  DECFSZ 00,F
2C34:  BRA    2C32
....................         _an_max[3]+=read_adc(); 
2C36:  BSF    FC2.1
2C38:  BTFSC  FC2.1
2C3A:  BRA    2C38
2C3C:  MOVF   FC3,W
2C3E:  ADDWF  xA9,F
2C40:  MOVF   FC4,W
2C42:  ADDWFC xAA,F
....................  
....................         an_sw2_2_sec(); 
2C44:  BCF    47.6
2C46:  BCF    47.5
2C48:  BSF    47.4
2C4A:  MOVFF  46,16C
2C4E:  MOVFF  47,16D
2C52:  MOVFF  48,16E
2C56:  CALL   092A
....................         set_adc_channel(0);  
2C5A:  MOVLW  00
2C5C:  MOVWF  01
2C5E:  MOVF   FC2,W
2C60:  ANDLW  83
2C62:  IORWF  01,W
2C64:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
2C66:  MOVLW  85
2C68:  MOVWF  00
2C6A:  DECFSZ 00,F
2C6C:  BRA    2C6A
....................         _an_max[4]+=read_adc(); 
2C6E:  BSF    FC2.1
2C70:  BTFSC  FC2.1
2C72:  BRA    2C70
2C74:  MOVF   FC3,W
2C76:  ADDWF  xAB,F
2C78:  MOVF   FC4,W
2C7A:  ADDWFC xAC,F
....................  
....................         an_sw2_3_sec(); 
2C7C:  BSF    47.6
2C7E:  BCF    47.5
2C80:  BSF    47.4
2C82:  MOVFF  46,16C
2C86:  MOVFF  47,16D
2C8A:  MOVFF  48,16E
2C8E:  CALL   092A
....................         set_adc_channel(0);  
2C92:  MOVLW  00
2C94:  MOVWF  01
2C96:  MOVF   FC2,W
2C98:  ANDLW  83
2C9A:  IORWF  01,W
2C9C:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
2C9E:  MOVLW  85
2CA0:  MOVWF  00
2CA2:  DECFSZ 00,F
2CA4:  BRA    2CA2
....................         _an_max[5]+=read_adc(); 
2CA6:  BSF    FC2.1
2CA8:  BTFSC  FC2.1
2CAA:  BRA    2CA8
2CAC:  MOVF   FC3,W
2CAE:  ADDWF  xAD,F
2CB0:  MOVF   FC4,W
2CB2:  ADDWFC xAE,F
2CB4:  MOVLB  1
2CB6:  INCF   x65,F
2CB8:  BRA    2B5A
....................     } 
....................      
....................     _an_max[0]=_an_max[0]>>4; _an_max[1]=_an_max[1]>>4; _an_max[2]=_an_max[2]>>4;  //16 ya bölme iþlemi ortalama alýnýyor 
2CBA:  MOVLB  0
2CBC:  RRCF   xA4,F
2CBE:  RRCF   xA3,F
2CC0:  RRCF   xA4,F
2CC2:  RRCF   xA3,F
2CC4:  RRCF   xA4,F
2CC6:  RRCF   xA3,F
2CC8:  RRCF   xA4,F
2CCA:  RRCF   xA3,F
2CCC:  MOVLW  0F
2CCE:  ANDWF  xA4,F
2CD0:  RRCF   xA6,F
2CD2:  RRCF   xA5,F
2CD4:  RRCF   xA6,F
2CD6:  RRCF   xA5,F
2CD8:  RRCF   xA6,F
2CDA:  RRCF   xA5,F
2CDC:  RRCF   xA6,F
2CDE:  RRCF   xA5,F
2CE0:  ANDWF  xA6,F
2CE2:  RRCF   xA8,F
2CE4:  RRCF   xA7,F
2CE6:  RRCF   xA8,F
2CE8:  RRCF   xA7,F
2CEA:  RRCF   xA8,F
2CEC:  RRCF   xA7,F
2CEE:  RRCF   xA8,F
2CF0:  RRCF   xA7,F
2CF2:  ANDWF  xA8,F
....................     _an_max[3]=_an_max[3]>>4; _an_max[4]=_an_max[4]>>4; _an_max[5]=_an_max[5]>>4; 
2CF4:  RRCF   xAA,F
2CF6:  RRCF   xA9,F
2CF8:  RRCF   xAA,F
2CFA:  RRCF   xA9,F
2CFC:  RRCF   xAA,F
2CFE:  RRCF   xA9,F
2D00:  RRCF   xAA,F
2D02:  RRCF   xA9,F
2D04:  ANDWF  xAA,F
2D06:  RRCF   xAC,F
2D08:  RRCF   xAB,F
2D0A:  RRCF   xAC,F
2D0C:  RRCF   xAB,F
2D0E:  RRCF   xAC,F
2D10:  RRCF   xAB,F
2D12:  RRCF   xAC,F
2D14:  RRCF   xAB,F
2D16:  ANDWF  xAC,F
2D18:  RRCF   xAE,F
2D1A:  RRCF   xAD,F
2D1C:  RRCF   xAE,F
2D1E:  RRCF   xAD,F
2D20:  RRCF   xAE,F
2D22:  RRCF   xAD,F
2D24:  RRCF   xAE,F
2D26:  RRCF   xAD,F
2D28:  ANDWF  xAE,F
....................     an_max_ort=0; 
2D2A:  CLRF   xB2
2D2C:  CLRF   xB1
....................     for(i=0;i<6;i++){ 
2D2E:  MOVLB  1
2D30:  CLRF   x65
2D32:  MOVF   x65,W
2D34:  SUBLW  05
2D36:  BNC   2DFA
.................... //         if(_an_max[i]<an_max[i]) an_max_arttti_azaldi[i]=AZALDI; 
.................... //         if(_an_max[i]>an_max[i]) an_max_arttti_azaldi[i]=ARTTI; 
.................... //         if(_an_max[i]==an_max[i]) an_max_arttti_azaldi[i]=AYNI; 
....................           
....................          if(_an_max[i]<512) //&& _an_max>225)// 1.1V> an <2.5V 
2D38:  BCF    FD8.0
2D3A:  RLCF   x65,W
2D3C:  CLRF   03
2D3E:  ADDLW  A3
2D40:  MOVWF  FE9
2D42:  MOVLW  00
2D44:  ADDWFC 03,W
2D46:  MOVWF  FEA
2D48:  MOVFF  FEC,167
2D4C:  MOVF   FED,F
2D4E:  MOVFF  FEF,166
2D52:  MOVF   x67,W
2D54:  SUBLW  01
2D56:  BNC   2D96
....................          { 
....................              an_max[i]=_an_max[i]; 
2D58:  BCF    FD8.0
2D5A:  RLCF   x65,W
2D5C:  CLRF   03
2D5E:  ADDLW  97
2D60:  MOVWF  01
2D62:  MOVLW  00
2D64:  ADDWFC 03,F
2D66:  MOVFF  03,167
2D6A:  BCF    FD8.0
2D6C:  RLCF   x65,W
2D6E:  CLRF   03
2D70:  ADDLW  A3
2D72:  MOVWF  FE9
2D74:  MOVLW  00
2D76:  ADDWFC 03,W
2D78:  MOVWF  FEA
2D7A:  MOVFF  FEC,03
2D7E:  MOVF   FED,F
2D80:  MOVFF  FEF,168
2D84:  MOVFF  167,FEA
2D88:  MOVFF  01,FE9
2D8C:  MOVFF  03,FEC
2D90:  MOVF   FED,F
2D92:  MOVFF  168,FEF
....................          } 
....................       
....................          if(_an_max[i]<250) an_max[i]=409 ;  //250:1.2V   409:2V 
2D96:  BCF    FD8.0
2D98:  RLCF   x65,W
2D9A:  CLRF   03
2D9C:  ADDLW  A3
2D9E:  MOVWF  FE9
2DA0:  MOVLW  00
2DA2:  ADDWFC 03,W
2DA4:  MOVWF  FEA
2DA6:  MOVFF  FEC,167
2DAA:  MOVF   FED,F
2DAC:  MOVFF  FEF,166
2DB0:  MOVF   x67,F
2DB2:  BNZ   2DD4
2DB4:  MOVF   x66,W
2DB6:  SUBLW  F9
2DB8:  BNC   2DD4
2DBA:  BCF    FD8.0
2DBC:  RLCF   x65,W
2DBE:  CLRF   03
2DC0:  ADDLW  97
2DC2:  MOVWF  FE9
2DC4:  MOVLW  00
2DC6:  ADDWFC 03,W
2DC8:  MOVWF  FEA
2DCA:  MOVLW  01
2DCC:  MOVWF  FEC
2DCE:  MOVF   FED,F
2DD0:  MOVLW  99
2DD2:  MOVWF  FEF
....................          an_max_ort+=an_max[i]; 
2DD4:  BCF    FD8.0
2DD6:  RLCF   x65,W
2DD8:  CLRF   03
2DDA:  ADDLW  97
2DDC:  MOVWF  FE9
2DDE:  MOVLW  00
2DE0:  ADDWFC 03,W
2DE2:  MOVWF  FEA
2DE4:  MOVFF  FEC,03
2DE8:  MOVF   FED,F
2DEA:  MOVF   FEF,W
2DEC:  MOVLB  0
2DEE:  ADDWF  xB1,F
2DF0:  MOVF   03,W
2DF2:  ADDWFC xB2,F
2DF4:  MOVLB  1
2DF6:  INCF   x65,F
2DF8:  BRA    2D32
....................     } 
....................     an_max_ort=an_max_ort/6; 
2DFA:  MOVFF  B2,167
2DFE:  MOVFF  B1,166
2E02:  CLRF   x69
2E04:  MOVLW  06
2E06:  MOVWF  x68
2E08:  MOVLB  0
2E0A:  CALL   0AFC
2E0E:  MOVFF  02,B2
2E12:  MOVFF  01,B1
....................      
....................     //ee_an_max_yaz(); 
....................      
....................     printf(lcd_putc,"\fmax:%Lu,%Lu,%Lu",an_max[0],an_max[1],an_max[2]); 
2E16:  MOVLW  04
2E18:  MOVWF  FF6
2E1A:  MOVLW  02
2E1C:  MOVWF  FF7
2E1E:  MOVLW  05
2E20:  MOVLB  1
2E22:  MOVWF  x69
2E24:  MOVLB  0
2E26:  CALL   0C0E
2E2A:  MOVLW  10
2E2C:  MOVWF  FE9
2E2E:  MOVFF  98,167
2E32:  MOVFF  97,166
2E36:  CALL   12F4
2E3A:  CLRF   19
2E3C:  BTFSC  FF2.7
2E3E:  BSF    19.7
2E40:  BCF    FF2.7
2E42:  MOVLW  2C
2E44:  MOVLB  1
2E46:  MOVWF  x85
2E48:  MOVLB  0
2E4A:  CALL   0884
2E4E:  BTFSC  19.7
2E50:  BSF    FF2.7
2E52:  MOVLW  10
2E54:  MOVWF  FE9
2E56:  MOVFF  9A,167
2E5A:  MOVFF  99,166
2E5E:  CALL   12F4
2E62:  CLRF   19
2E64:  BTFSC  FF2.7
2E66:  BSF    19.7
2E68:  BCF    FF2.7
2E6A:  MOVLW  2C
2E6C:  MOVLB  1
2E6E:  MOVWF  x85
2E70:  MOVLB  0
2E72:  CALL   0884
2E76:  BTFSC  19.7
2E78:  BSF    FF2.7
2E7A:  MOVLW  10
2E7C:  MOVWF  FE9
2E7E:  MOVFF  9C,167
2E82:  MOVFF  9B,166
2E86:  CALL   12F4
2E8A:  CLRF   19
2E8C:  BTFSC  FF2.7
2E8E:  BSF    19.7
2E90:  BCF    FF2.7
....................     printf(lcd_putc,"\n%Lu,%Lu,%Lu:%Lu",an_max[3],an_max[4],an_max[5],an_max_ort); 
2E92:  MOVLW  0A
2E94:  MOVLB  1
2E96:  MOVWF  x85
2E98:  MOVLB  0
2E9A:  CALL   0884
2E9E:  BTFSC  19.7
2EA0:  BSF    FF2.7
2EA2:  MOVLW  10
2EA4:  MOVWF  FE9
2EA6:  MOVFF  9E,167
2EAA:  MOVFF  9D,166
2EAE:  CALL   12F4
2EB2:  CLRF   19
2EB4:  BTFSC  FF2.7
2EB6:  BSF    19.7
2EB8:  BCF    FF2.7
2EBA:  MOVLW  2C
2EBC:  MOVLB  1
2EBE:  MOVWF  x85
2EC0:  MOVLB  0
2EC2:  CALL   0884
2EC6:  BTFSC  19.7
2EC8:  BSF    FF2.7
2ECA:  MOVLW  10
2ECC:  MOVWF  FE9
2ECE:  MOVFF  A0,167
2ED2:  MOVFF  9F,166
2ED6:  CALL   12F4
2EDA:  CLRF   19
2EDC:  BTFSC  FF2.7
2EDE:  BSF    19.7
2EE0:  BCF    FF2.7
2EE2:  MOVLW  2C
2EE4:  MOVLB  1
2EE6:  MOVWF  x85
2EE8:  MOVLB  0
2EEA:  CALL   0884
2EEE:  BTFSC  19.7
2EF0:  BSF    FF2.7
2EF2:  MOVLW  10
2EF4:  MOVWF  FE9
2EF6:  MOVFF  A2,167
2EFA:  MOVFF  A1,166
2EFE:  CALL   12F4
2F02:  CLRF   19
2F04:  BTFSC  FF2.7
2F06:  BSF    19.7
2F08:  BCF    FF2.7
2F0A:  MOVLW  3A
2F0C:  MOVLB  1
2F0E:  MOVWF  x85
2F10:  MOVLB  0
2F12:  CALL   0884
2F16:  BTFSC  19.7
2F18:  BSF    FF2.7
2F1A:  MOVLW  10
2F1C:  MOVWF  FE9
2F1E:  MOVFF  B2,167
2F22:  MOVFF  B1,166
2F26:  CALL   12F4
....................     delay_ms(2000); 
2F2A:  MOVLW  08
2F2C:  MOVLB  1
2F2E:  MOVWF  x66
2F30:  CLRF   19
2F32:  BTFSC  FF2.7
2F34:  BSF    19.7
2F36:  BCF    FF2.7
2F38:  MOVLW  FA
2F3A:  MOVWF  x86
2F3C:  MOVLB  0
2F3E:  CALL   0834
2F42:  BTFSC  19.7
2F44:  BSF    FF2.7
2F46:  MOVLB  1
2F48:  DECFSZ x66,F
2F4A:  BRA    2F30
2F4C:  MOVLB  0
2F4E:  RETURN 0
.................... } 
....................  
....................  
.................... int sw1_1(char h_l){ 
*
148E:  MOVLB  1
1490:  SETF   x69
1492:  SETF   x68
1494:  CLRF   x6B
1496:  CLRF   x6A
....................     int i; 
....................     unsigned int16 deger_11=DEGER_RST; 
....................     unsigned int16 an_esik_11=ESIK_RST; 
....................     //an_esik=ESIK_RST; 
....................     //deger=DEGER_RST; 
....................     for (i = 0; i < ADC_MAX_OLC; i++) { 
1498:  CLRF   x67
149A:  MOVF   x67,W
149C:  SUBLW  0F
149E:  BNC   14E0
....................         an_sw1_1_sec();         //yaklaþýk 50 us  
14A0:  BCF    47.6
14A2:  BCF    47.5
14A4:  BCF    47.4
14A6:  MOVFF  46,16C
14AA:  MOVFF  47,16D
14AE:  MOVFF  48,16E
14B2:  MOVLB  0
14B4:  CALL   092A
....................         set_adc_channel(0);  
14B8:  MOVLW  00
14BA:  MOVWF  01
14BC:  MOVF   FC2,W
14BE:  ANDLW  83
14C0:  IORWF  01,W
14C2:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); //40 us 
14C4:  MOVLW  85
14C6:  MOVWF  00
14C8:  DECFSZ 00,F
14CA:  BRA    14C8
....................  
....................         deger_11+=read_adc(); 
14CC:  BSF    FC2.1
14CE:  BTFSC  FC2.1
14D0:  BRA    14CE
14D2:  MOVF   FC3,W
14D4:  MOVLB  1
14D6:  ADDWF  x68,F
14D8:  MOVF   FC4,W
14DA:  ADDWFC x69,F
14DC:  INCF   x67,F
14DE:  BRA    149A
....................     } 
....................     
....................     deger_11=(deger_11>>ADC_SIHFT_R);  //ortalama alma iþlemi 
14E0:  RRCF   x69,F
14E2:  RRCF   x68,F
14E4:  RRCF   x69,F
14E6:  RRCF   x68,F
14E8:  RRCF   x69,F
14EA:  RRCF   x68,F
14EC:  RRCF   x69,F
14EE:  RRCF   x68,F
14F0:  MOVLW  0F
14F2:  ANDWF  x69,F
....................     an_esik_11=(unsigned long)(an_max[0]-((an_max[0]-an_min[0])/2)); 
14F4:  MOVLB  0
14F6:  MOVF   x89,W
14F8:  SUBWF  x97,W
14FA:  MOVLB  1
14FC:  MOVWF  x6C
14FE:  MOVLB  0
1500:  MOVF   x8A,W
1502:  SUBWFB x98,W
1504:  MOVLB  1
1506:  MOVWF  x6D
1508:  BCF    FD8.0
150A:  RRCF   x6D,W
150C:  MOVWF  03
150E:  RRCF   x6C,W
1510:  MOVLB  0
1512:  SUBWF  x97,W
1514:  MOVLB  1
1516:  MOVWF  x6A
1518:  MOVF   03,W
151A:  MOVLB  0
151C:  SUBWFB x98,W
151E:  MOVLB  1
1520:  MOVWF  x6B
....................     //an_esik=an_max[0]-ESIK_MV; 
....................      
....................     if(h_l==SENS_OKU_H_L){ 
1522:  MOVF   x66,W
1524:  SUBLW  4C
1526:  BNZ   1558
....................         //  0 algýlar: düþen kenar 1-->0 
....................         if( deger_11>=an_esik_11){        //eðer top yoksa çýkýþ gerilimi yüksek   1 
1528:  MOVF   x6B,W
152A:  SUBWF  x69,W
152C:  BNC   153C
152E:  BNZ   1536
1530:  MOVF   x6A,W
1532:  SUBWF  x68,W
1534:  BNC   153C
....................             return 0; 
1536:  MOVLW  00
1538:  MOVWF  01
153A:  BRA    155C
....................         }  
....................         if( deger_11<an_esik_11){         // top varsa çýkýþ gerilimi düþtü...   0 
153C:  MOVF   x69,W
153E:  SUBWF  x6B,W
1540:  BNC   1558
1542:  BNZ   154A
1544:  MOVF   x6A,W
1546:  SUBWF  x68,W
1548:  BC    1558
....................              
.................... //            if((deger<an_min[0] && an_max_arttti_azaldi[0]==AZALDI)   // deger de azalma var, max degerde azaldý ise yeni deger var kaydet... 
.................... //                 ||(deger>an_min[0] && an_max_arttti_azaldi[0]==ARTTI))//deger de artma var,max degerde arttý ise yeni deger oluþtu kaydet...  
.................... //            { 
.................... //               an_min[0]=deger; 
.................... //                
.................... //               write_eeprom(ee_adres_sw11_an_min_0_h, make8(an_min[0],1));     //high deger 
.................... //               write_eeprom(ee_adres_sw11_an_min_0_l, make8(an_min[0],0));     //low deger    
.................... //            } 
....................             last_adc_deger=deger_11; 
154A:  MOVFF  169,50
154E:  MOVFF  168,4F
....................             return 1; 
1552:  MOVLW  01
1554:  MOVWF  01
1556:  BRA    155C
....................         } 
....................     }else{ 
.................... //        //  1 algýlar: yükselen kenar 0-->1 
.................... //        if( deger<an_esik){        //eðer top yoksa çýkýþ gerilimi düþük  0 
.................... //            return 0; 
.................... //        }  
.................... //        if( deger>=an_esik){         // top varsa çýkýþ gerilimi yüksek  1 
.................... //             
.................... //           // bellek yetersiz kaldý gerektiðinde kodlanacak.....  
.................... //            return 1; 
.................... //        } 
....................     } 
....................  
....................     return 0; 
1558:  MOVLW  00
155A:  MOVWF  01
155C:  MOVLB  0
155E:  GOTO   19DE (RETURN)
.................... } 
....................  
.................... int sw1_2(char h_l){ 
1562:  MOVLB  1
1564:  SETF   x69
1566:  SETF   x68
1568:  CLRF   x6B
156A:  CLRF   x6A
....................     int i; 
....................     unsigned int16 deger_12=DEGER_RST; 
....................     unsigned int16 an_esik_12=ESIK_RST; 
....................     //an_esik=ESIK_RST; 
....................     //deger=DEGER_RST; 
....................     for (i = 0; i < ADC_MAX_OLC; i++) { 
156C:  CLRF   x67
156E:  MOVF   x67,W
1570:  SUBLW  0F
1572:  BNC   15B4
....................         an_sw1_2_sec(); 
1574:  BSF    47.6
1576:  BCF    47.5
1578:  BCF    47.4
157A:  MOVFF  46,16C
157E:  MOVFF  47,16D
1582:  MOVFF  48,16E
1586:  MOVLB  0
1588:  CALL   092A
....................         set_adc_channel(0);  
158C:  MOVLW  00
158E:  MOVWF  01
1590:  MOVF   FC2,W
1592:  ANDLW  83
1594:  IORWF  01,W
1596:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
1598:  MOVLW  85
159A:  MOVWF  00
159C:  DECFSZ 00,F
159E:  BRA    159C
....................  
....................         deger_12+=read_adc(); 
15A0:  BSF    FC2.1
15A2:  BTFSC  FC2.1
15A4:  BRA    15A2
15A6:  MOVF   FC3,W
15A8:  MOVLB  1
15AA:  ADDWF  x68,F
15AC:  MOVF   FC4,W
15AE:  ADDWFC x69,F
15B0:  INCF   x67,F
15B2:  BRA    156E
....................     } 
....................     
....................     deger_12=(deger_12>>ADC_SIHFT_R); 
15B4:  RRCF   x69,F
15B6:  RRCF   x68,F
15B8:  RRCF   x69,F
15BA:  RRCF   x68,F
15BC:  RRCF   x69,F
15BE:  RRCF   x68,F
15C0:  RRCF   x69,F
15C2:  RRCF   x68,F
15C4:  MOVLW  0F
15C6:  ANDWF  x69,F
....................     an_esik_12=(unsigned long)(an_max[1]-((an_max[1]-an_min[1])/2)); 
15C8:  MOVLB  0
15CA:  MOVF   x8B,W
15CC:  SUBWF  x99,W
15CE:  MOVLB  1
15D0:  MOVWF  x6C
15D2:  MOVLB  0
15D4:  MOVF   x8C,W
15D6:  SUBWFB x9A,W
15D8:  MOVLB  1
15DA:  MOVWF  x6D
15DC:  BCF    FD8.0
15DE:  RRCF   x6D,W
15E0:  MOVWF  03
15E2:  RRCF   x6C,W
15E4:  MOVLB  0
15E6:  SUBWF  x99,W
15E8:  MOVLB  1
15EA:  MOVWF  x6A
15EC:  MOVF   03,W
15EE:  MOVLB  0
15F0:  SUBWFB x9A,W
15F2:  MOVLB  1
15F4:  MOVWF  x6B
....................     //an_esik=an_max[1]-ESIK_MV; 
....................      
....................     if(h_l==SENS_OKU_H_L){ 
15F6:  MOVF   x66,W
15F8:  SUBLW  4C
15FA:  BNZ   162C
....................         //  0 algýlar: düþen kenar 1-->0 
....................         if( deger_12>=an_esik_12){        //eðer top yoksa çýkýþ gerilimi yüksek   1 
15FC:  MOVF   x6B,W
15FE:  SUBWF  x69,W
1600:  BNC   1610
1602:  BNZ   160A
1604:  MOVF   x6A,W
1606:  SUBWF  x68,W
1608:  BNC   1610
....................             return 0; 
160A:  MOVLW  00
160C:  MOVWF  01
160E:  BRA    1630
....................         }  
....................         if( deger_12<an_esik_12){         // top varsa çýkýþ gerilimi düþtü...   0 
1610:  MOVF   x69,W
1612:  SUBWF  x6B,W
1614:  BNC   162C
1616:  BNZ   161E
1618:  MOVF   x6A,W
161A:  SUBWF  x68,W
161C:  BC    162C
....................              
.................... //           if((deger<an_min[1] && an_max_arttti_azaldi[1]==AZALDI)   // deger de azalma var, max degerde azaldý ise yeni deger var kaydet... 
.................... //                 ||(deger>an_min[1] && an_max_arttti_azaldi[1]==ARTTI))//deger de artma var,max degerde arttý ise yeni deger oluþtu kaydet...  
.................... //            { 
.................... //               an_min[1]=deger; 
.................... //               write_eeprom(ee_adres_sw12_an_min_1_h, make8(an_min[1],1));     //high deger 
.................... //               write_eeprom(ee_adres_sw12_an_min_1_l, make8(an_min[1],0));     //low deger    
.................... //            } 
....................             last_adc_deger=deger_12; 
161E:  MOVFF  169,50
1622:  MOVFF  168,4F
....................             return 1; 
1626:  MOVLW  01
1628:  MOVWF  01
162A:  BRA    1630
....................         } 
....................     }else{ 
.................... //        //  1 algýlar: yükselen kenar 0-->1 
.................... //        if( deger<an_esik){        //eðer top yoksa çýkýþ gerilimi düþük  0 
.................... //            return 0; 
.................... //        }  
.................... //        if( deger>=an_esik){         // top varsa çýkýþ gerilimi yüksek  1 
.................... //            return 1; 
.................... //        } 
....................     } 
....................  
....................     return 0; 
162C:  MOVLW  00
162E:  MOVWF  01
1630:  MOVLB  0
1632:  GOTO   1A00 (RETURN)
.................... } 
....................  
.................... int sw1_3(char h_l){ 
1636:  MOVLB  1
1638:  SETF   x69
163A:  SETF   x68
163C:  CLRF   x6B
163E:  CLRF   x6A
....................     int i; 
....................     unsigned int16 deger_13=DEGER_RST; 
....................     unsigned int16 an_esik_13=ESIK_RST; 
....................     //an_esik=ESIK_RST; 
....................    // deger=DEGER_RST; 
....................     for (i = 0; i < ADC_MAX_OLC; i++) { 
1640:  CLRF   x67
1642:  MOVF   x67,W
1644:  SUBLW  0F
1646:  BNC   1688
....................         an_sw1_3_sec(); 
1648:  BCF    47.6
164A:  BSF    47.5
164C:  BCF    47.4
164E:  MOVFF  46,16C
1652:  MOVFF  47,16D
1656:  MOVFF  48,16E
165A:  MOVLB  0
165C:  CALL   092A
....................         set_adc_channel(0);  
1660:  MOVLW  00
1662:  MOVWF  01
1664:  MOVF   FC2,W
1666:  ANDLW  83
1668:  IORWF  01,W
166A:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
166C:  MOVLW  85
166E:  MOVWF  00
1670:  DECFSZ 00,F
1672:  BRA    1670
....................  
....................         deger_13+=read_adc(); 
1674:  BSF    FC2.1
1676:  BTFSC  FC2.1
1678:  BRA    1676
167A:  MOVF   FC3,W
167C:  MOVLB  1
167E:  ADDWF  x68,F
1680:  MOVF   FC4,W
1682:  ADDWFC x69,F
1684:  INCF   x67,F
1686:  BRA    1642
....................     } 
....................     deger_13=(deger_13>>ADC_SIHFT_R); 
1688:  RRCF   x69,F
168A:  RRCF   x68,F
168C:  RRCF   x69,F
168E:  RRCF   x68,F
1690:  RRCF   x69,F
1692:  RRCF   x68,F
1694:  RRCF   x69,F
1696:  RRCF   x68,F
1698:  MOVLW  0F
169A:  ANDWF  x69,F
....................     an_esik_13=(unsigned long)(an_max[2]-((an_max[2]-an_min[2])/2)); 
169C:  MOVLB  0
169E:  MOVF   x8D,W
16A0:  SUBWF  x9B,W
16A2:  MOVLB  1
16A4:  MOVWF  x6C
16A6:  MOVLB  0
16A8:  MOVF   x8E,W
16AA:  SUBWFB x9C,W
16AC:  MOVLB  1
16AE:  MOVWF  x6D
16B0:  BCF    FD8.0
16B2:  RRCF   x6D,W
16B4:  MOVWF  03
16B6:  RRCF   x6C,W
16B8:  MOVLB  0
16BA:  SUBWF  x9B,W
16BC:  MOVLB  1
16BE:  MOVWF  x6A
16C0:  MOVF   03,W
16C2:  MOVLB  0
16C4:  SUBWFB x9C,W
16C6:  MOVLB  1
16C8:  MOVWF  x6B
....................     //an_esik=an_max[2]-ESIK_MV; 
....................     if(h_l==SENS_OKU_H_L){ 
16CA:  MOVF   x66,W
16CC:  SUBLW  4C
16CE:  BNZ   1700
....................         //  0 algýlar: düþen kenar 1-->0 
....................         if( deger_13>=an_esik_13){        //eðer top yoksa çýkýþ gerilimi yüksek   1 
16D0:  MOVF   x6B,W
16D2:  SUBWF  x69,W
16D4:  BNC   16E4
16D6:  BNZ   16DE
16D8:  MOVF   x6A,W
16DA:  SUBWF  x68,W
16DC:  BNC   16E4
....................             return 0; 
16DE:  MOVLW  00
16E0:  MOVWF  01
16E2:  BRA    1704
....................         }  
....................         if( deger_13<an_esik_13){         // top varsa çýkýþ gerilimi düþtü...   0 
16E4:  MOVF   x69,W
16E6:  SUBWF  x6B,W
16E8:  BNC   1700
16EA:  BNZ   16F2
16EC:  MOVF   x6A,W
16EE:  SUBWF  x68,W
16F0:  BC    1700
....................              
.................... //            if((deger<an_min[2] && an_max_arttti_azaldi[2]==AZALDI)   // deger de azalma var, max degerde azaldý ise yeni deger var kaydet... 
.................... //                 ||(deger>an_min[2] && an_max_arttti_azaldi[2]==ARTTI))//deger de artma var,max degerde arttý ise yeni deger oluþtu kaydet...  
.................... //            { 
.................... //               //an_min[2]=deger; 
.................... //               write_eeprom(ee_adres_sw13_an_min_2_h, make8(an_min[2],1));     //high deger 
.................... //               write_eeprom(ee_adres_sw13_an_min_2_l, make8(an_min[2],0));     //low deger    
.................... //            } 
....................             last_adc_deger=deger_13; 
16F2:  MOVFF  169,50
16F6:  MOVFF  168,4F
....................             return 1; 
16FA:  MOVLW  01
16FC:  MOVWF  01
16FE:  BRA    1704
....................         } 
....................     }else{ 
.................... //        //  1 algýlar: yükselen kenar 0-->1 
.................... //        if( deger<an_esik){        //eðer top yoksa çýkýþ gerilimi düþük  0 
.................... //            return 0; 
.................... //        }  
.................... //        if( deger>=an_esik){         // top varsa çýkýþ gerilimi yüksek  1 
.................... //            return 1; 
.................... //        } 
....................     } 
....................     return 0; 
1700:  MOVLW  00
1702:  MOVWF  01
1704:  MOVLB  0
1706:  GOTO   1A22 (RETURN)
.................... } 
....................  
.................... int sw2_1(char h_l){ 
170A:  MOVLB  1
170C:  SETF   x69
170E:  SETF   x68
1710:  CLRF   x6B
1712:  CLRF   x6A
....................     int i; 
....................     unsigned int16 deger_21=DEGER_RST; 
....................     unsigned int16 an_esik_21=ESIK_RST; 
....................     //an_esik=ESIK_RST; 
....................     //deger=DEGER_RST; 
....................     for (i = 0; i < ADC_MAX_OLC; i++) { 
1714:  CLRF   x67
1716:  MOVF   x67,W
1718:  SUBLW  0F
171A:  BNC   175C
....................         an_sw2_1_sec(); 
171C:  BSF    47.6
171E:  BSF    47.5
1720:  BCF    47.4
1722:  MOVFF  46,16C
1726:  MOVFF  47,16D
172A:  MOVFF  48,16E
172E:  MOVLB  0
1730:  CALL   092A
....................         set_adc_channel(0);  
1734:  MOVLW  00
1736:  MOVWF  01
1738:  MOVF   FC2,W
173A:  ANDLW  83
173C:  IORWF  01,W
173E:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
1740:  MOVLW  85
1742:  MOVWF  00
1744:  DECFSZ 00,F
1746:  BRA    1744
....................  
....................         deger_21+=read_adc(); 
1748:  BSF    FC2.1
174A:  BTFSC  FC2.1
174C:  BRA    174A
174E:  MOVF   FC3,W
1750:  MOVLB  1
1752:  ADDWF  x68,F
1754:  MOVF   FC4,W
1756:  ADDWFC x69,F
1758:  INCF   x67,F
175A:  BRA    1716
....................     } 
....................     deger_21=(deger_21>>ADC_SIHFT_R); 
175C:  RRCF   x69,F
175E:  RRCF   x68,F
1760:  RRCF   x69,F
1762:  RRCF   x68,F
1764:  RRCF   x69,F
1766:  RRCF   x68,F
1768:  RRCF   x69,F
176A:  RRCF   x68,F
176C:  MOVLW  0F
176E:  ANDWF  x69,F
....................     an_esik_21=(unsigned long)(an_max[3]-((an_max[3]-an_min[3])/2)); 
1770:  MOVLB  0
1772:  MOVF   x8F,W
1774:  SUBWF  x9D,W
1776:  MOVLB  1
1778:  MOVWF  x6C
177A:  MOVLB  0
177C:  MOVF   x90,W
177E:  SUBWFB x9E,W
1780:  MOVLB  1
1782:  MOVWF  x6D
1784:  BCF    FD8.0
1786:  RRCF   x6D,W
1788:  MOVWF  03
178A:  RRCF   x6C,W
178C:  MOVLB  0
178E:  SUBWF  x9D,W
1790:  MOVLB  1
1792:  MOVWF  x6A
1794:  MOVF   03,W
1796:  MOVLB  0
1798:  SUBWFB x9E,W
179A:  MOVLB  1
179C:  MOVWF  x6B
....................    // an_esik=an_max[3]-ESIK_MV; 
....................     if(h_l==SENS_OKU_H_L){ 
179E:  MOVF   x66,W
17A0:  SUBLW  4C
17A2:  BNZ   17D4
....................         //  0 algýlar: düþen kenar 1-->0 
....................         if( deger_21>=an_esik_21){        //eðer top yoksa çýkýþ gerilimi yüksek   1 
17A4:  MOVF   x6B,W
17A6:  SUBWF  x69,W
17A8:  BNC   17B8
17AA:  BNZ   17B2
17AC:  MOVF   x6A,W
17AE:  SUBWF  x68,W
17B0:  BNC   17B8
....................             return 0; 
17B2:  MOVLW  00
17B4:  MOVWF  01
17B6:  BRA    17D8
....................         }  
....................         if( deger_21<an_esik_21){         // top varsa çýkýþ gerilimi düþtü...   0 
17B8:  MOVF   x69,W
17BA:  SUBWF  x6B,W
17BC:  BNC   17D4
17BE:  BNZ   17C6
17C0:  MOVF   x6A,W
17C2:  SUBWF  x68,W
17C4:  BC    17D4
....................              
.................... //            if((deger<an_min[3] && an_max_arttti_azaldi[3]==AZALDI)   // deger de azalma var, max degerde azaldý ise yeni deger var kaydet... 
.................... //                 ||(deger>an_min[3] && an_max_arttti_azaldi[3]==ARTTI))//deger de artma var,max degerde arttý ise yeni deger oluþtu kaydet...  
.................... //            { 
.................... //               an_min[3]=deger; 
.................... //               write_eeprom(ee_adres_sw21_an_min_3_h, make8(an_min[3],1));     //high deger 
.................... //               write_eeprom(ee_adres_sw21_an_min_3_l, make8(an_min[3],0));     //low deger    
.................... //            } 
....................             last_adc_deger=deger_21; 
17C6:  MOVFF  169,50
17CA:  MOVFF  168,4F
....................             return 1; 
17CE:  MOVLW  01
17D0:  MOVWF  01
17D2:  BRA    17D8
....................         } 
....................     }else{ 
.................... //        //  1 algýlar: yükselen kenar 0-->1 
.................... //        if( deger<an_esik){        //eðer top yoksa çýkýþ gerilimi düþük  0 
.................... //            return 0; 
.................... //        }  
.................... //        if( deger>=an_esik){         // top varsa çýkýþ gerilimi yüksek  1 
.................... //            return 1; 
.................... //        } 
....................     } 
....................      
....................     return 0; 
17D4:  MOVLW  00
17D6:  MOVWF  01
17D8:  MOVLB  0
17DA:  GOTO   1A44 (RETURN)
.................... } 
....................  
.................... int sw2_2(char h_l){     
17DE:  MOVLB  1
17E0:  SETF   x69
17E2:  SETF   x68
17E4:  CLRF   x6B
17E6:  CLRF   x6A
....................     int i; 
....................     unsigned int16 deger_22=DEGER_RST; 
....................     unsigned int16 an_esik_22=ESIK_RST; 
....................     //an_esik=ESIK_RST; 
....................     //deger=DEGER_RST; 
....................     for (i = 0; i < ADC_MAX_OLC; i++) { 
17E8:  CLRF   x67
17EA:  MOVF   x67,W
17EC:  SUBLW  0F
17EE:  BNC   1830
....................         an_sw2_2_sec(); 
17F0:  BCF    47.6
17F2:  BCF    47.5
17F4:  BSF    47.4
17F6:  MOVFF  46,16C
17FA:  MOVFF  47,16D
17FE:  MOVFF  48,16E
1802:  MOVLB  0
1804:  CALL   092A
....................         set_adc_channel(0);  
1808:  MOVLW  00
180A:  MOVWF  01
180C:  MOVF   FC2,W
180E:  ANDLW  83
1810:  IORWF  01,W
1812:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
1814:  MOVLW  85
1816:  MOVWF  00
1818:  DECFSZ 00,F
181A:  BRA    1818
....................  
....................         deger_22+=read_adc(); 
181C:  BSF    FC2.1
181E:  BTFSC  FC2.1
1820:  BRA    181E
1822:  MOVF   FC3,W
1824:  MOVLB  1
1826:  ADDWF  x68,F
1828:  MOVF   FC4,W
182A:  ADDWFC x69,F
182C:  INCF   x67,F
182E:  BRA    17EA
....................     } 
....................     deger_22=(deger_22>>ADC_SIHFT_R); 
1830:  RRCF   x69,F
1832:  RRCF   x68,F
1834:  RRCF   x69,F
1836:  RRCF   x68,F
1838:  RRCF   x69,F
183A:  RRCF   x68,F
183C:  RRCF   x69,F
183E:  RRCF   x68,F
1840:  MOVLW  0F
1842:  ANDWF  x69,F
....................      
....................     an_esik_22=(unsigned long)(an_max[4]-((an_max[4]-an_min[4])/2)); 
1844:  MOVLB  0
1846:  MOVF   x91,W
1848:  SUBWF  x9F,W
184A:  MOVLB  1
184C:  MOVWF  x6C
184E:  MOVLB  0
1850:  MOVF   x92,W
1852:  SUBWFB xA0,W
1854:  MOVLB  1
1856:  MOVWF  x6D
1858:  BCF    FD8.0
185A:  RRCF   x6D,W
185C:  MOVWF  03
185E:  RRCF   x6C,W
1860:  MOVLB  0
1862:  SUBWF  x9F,W
1864:  MOVLB  1
1866:  MOVWF  x6A
1868:  MOVF   03,W
186A:  MOVLB  0
186C:  SUBWFB xA0,W
186E:  MOVLB  1
1870:  MOVWF  x6B
....................     //an_esik=an_max[4]-ESIK_MV; 
....................     if(h_l==SENS_OKU_H_L){ 
1872:  MOVF   x66,W
1874:  SUBLW  4C
1876:  BNZ   18A8
....................         //  0 algýlar: düþen kenar 1-->0 
....................         if( deger_22>=an_esik_22){        //eðer top yoksa çýkýþ gerilimi yüksek   1 
1878:  MOVF   x6B,W
187A:  SUBWF  x69,W
187C:  BNC   188C
187E:  BNZ   1886
1880:  MOVF   x6A,W
1882:  SUBWF  x68,W
1884:  BNC   188C
....................             return 0; 
1886:  MOVLW  00
1888:  MOVWF  01
188A:  BRA    18AC
....................         }  
....................         if( deger_22<an_esik_22){         // top varsa çýkýþ gerilimi düþtü...   0 
188C:  MOVF   x69,W
188E:  SUBWF  x6B,W
1890:  BNC   18A8
1892:  BNZ   189A
1894:  MOVF   x6A,W
1896:  SUBWF  x68,W
1898:  BC    18A8
....................              
.................... //            if((deger<an_min[4] && an_max_arttti_azaldi[4]==AZALDI)   // deger de azalma var, max degerde azaldý ise yeni deger var kaydet... 
.................... //                 ||(deger>an_min[4] && an_max_arttti_azaldi[4]==ARTTI))//deger de artma var,max degerde arttý ise yeni deger oluþtu kaydet...  
.................... //            { 
.................... //               an_min[4]=deger; 
.................... //               write_eeprom(ee_adres_sw22_an_min_4_h, make8(an_min[4],1));     //high deger 
.................... //               write_eeprom(ee_adres_sw22_an_min_4_l, make8(an_min[4],0));     //low deger    
.................... //            } 
....................             last_adc_deger=deger_22; 
189A:  MOVFF  169,50
189E:  MOVFF  168,4F
....................             return 1; 
18A2:  MOVLW  01
18A4:  MOVWF  01
18A6:  BRA    18AC
....................         } 
....................     }else{ 
.................... //        //  1 algýlar: yükselen kenar 0-->1 
.................... //        if( deger<an_esik){        //eðer top yoksa çýkýþ gerilimi düþük  0 
.................... //            return 0; 
.................... //        }  
.................... //        if( deger>=an_esik){         // top varsa çýkýþ gerilimi yüksek  1 
.................... //            return 1; 
.................... //        } 
....................     } 
....................  
....................     return 0; 
18A8:  MOVLW  00
18AA:  MOVWF  01
18AC:  MOVLB  0
18AE:  GOTO   1A66 (RETURN)
.................... } 
....................  
.................... int sw2_3(char h_l){ 
18B2:  MOVLB  1
18B4:  SETF   x69
18B6:  SETF   x68
18B8:  CLRF   x6B
18BA:  CLRF   x6A
....................     int i; 
....................     unsigned int16 deger_23=DEGER_RST; 
....................     unsigned int16 an_esik_23=ESIK_RST; 
....................     //an_esik=ESIK_RST; 
....................     //deger=DEGER_RST; 
....................      
....................     for (i = 0; i < ADC_MAX_OLC; i++) { 
18BC:  CLRF   x67
18BE:  MOVF   x67,W
18C0:  SUBLW  0F
18C2:  BNC   1904
....................         an_sw2_3_sec(); 
18C4:  BSF    47.6
18C6:  BCF    47.5
18C8:  BSF    47.4
18CA:  MOVFF  46,16C
18CE:  MOVFF  47,16D
18D2:  MOVFF  48,16E
18D6:  MOVLB  0
18D8:  CALL   092A
....................         set_adc_channel(0);  
18DC:  MOVLW  00
18DE:  MOVWF  01
18E0:  MOVF   FC2,W
18E2:  ANDLW  83
18E4:  IORWF  01,W
18E6:  MOVWF  FC2
....................         delay_us(ADC_CHNL_SURE); 
18E8:  MOVLW  85
18EA:  MOVWF  00
18EC:  DECFSZ 00,F
18EE:  BRA    18EC
....................  
....................         deger_23+=read_adc(); 
18F0:  BSF    FC2.1
18F2:  BTFSC  FC2.1
18F4:  BRA    18F2
18F6:  MOVF   FC3,W
18F8:  MOVLB  1
18FA:  ADDWF  x68,F
18FC:  MOVF   FC4,W
18FE:  ADDWFC x69,F
1900:  INCF   x67,F
1902:  BRA    18BE
....................     } 
....................     deger_23=(deger_23>>ADC_SIHFT_R); 
1904:  RRCF   x69,F
1906:  RRCF   x68,F
1908:  RRCF   x69,F
190A:  RRCF   x68,F
190C:  RRCF   x69,F
190E:  RRCF   x68,F
1910:  RRCF   x69,F
1912:  RRCF   x68,F
1914:  MOVLW  0F
1916:  ANDWF  x69,F
....................     an_esik_23=(unsigned long)(an_max[5]-((an_max[5]-an_min[5])/2)); 
1918:  MOVLB  0
191A:  MOVF   x93,W
191C:  SUBWF  xA1,W
191E:  MOVLB  1
1920:  MOVWF  x6C
1922:  MOVLB  0
1924:  MOVF   x94,W
1926:  SUBWFB xA2,W
1928:  MOVLB  1
192A:  MOVWF  x6D
192C:  BCF    FD8.0
192E:  RRCF   x6D,W
1930:  MOVWF  03
1932:  RRCF   x6C,W
1934:  MOVLB  0
1936:  SUBWF  xA1,W
1938:  MOVLB  1
193A:  MOVWF  x6A
193C:  MOVF   03,W
193E:  MOVLB  0
1940:  SUBWFB xA2,W
1942:  MOVLB  1
1944:  MOVWF  x6B
....................     //an_esik=an_max[5]-ESIK_MV; 
....................     if(h_l==SENS_OKU_H_L){ 
1946:  MOVF   x66,W
1948:  SUBLW  4C
194A:  BNZ   197C
....................         //  0 algýlar: düþen kenar 1-->0 
....................         if( deger_23>=an_esik_23){        //eðer top yoksa çýkýþ gerilimi yüksek   1 
194C:  MOVF   x6B,W
194E:  SUBWF  x69,W
1950:  BNC   1960
1952:  BNZ   195A
1954:  MOVF   x6A,W
1956:  SUBWF  x68,W
1958:  BNC   1960
....................             return 0; 
195A:  MOVLW  00
195C:  MOVWF  01
195E:  BRA    1980
....................         }  
....................         if( deger_23<an_esik_23){         // top varsa çýkýþ gerilimi düþtü...   0 
1960:  MOVF   x69,W
1962:  SUBWF  x6B,W
1964:  BNC   197C
1966:  BNZ   196E
1968:  MOVF   x6A,W
196A:  SUBWF  x68,W
196C:  BC    197C
....................              
.................... //            if((deger<an_min[5] && an_max_arttti_azaldi[5]==AZALDI)   // deger de azalma var, max degerde azaldý ise yeni deger var kaydet... 
.................... //                 ||(deger>an_min[5] && an_max_arttti_azaldi[5]==ARTTI))//deger de artma var,max degerde arttý ise yeni deger oluþtu kaydet...  
.................... //            { 
.................... //               an_min[5]=deger; 
.................... //               write_eeprom(ee_adres_sw23_an_min_5_h, make8(an_min[5],1));     //high deger 
.................... //               write_eeprom(ee_adres_sw23_an_min_5_l, make8(an_min[5],0));     //low deger    
.................... //            } 
....................             last_adc_deger=deger_23; 
196E:  MOVFF  169,50
1972:  MOVFF  168,4F
....................             return 1; 
1976:  MOVLW  01
1978:  MOVWF  01
197A:  BRA    1980
....................         } 
....................     }else{ 
.................... //        //  1 algýlar: yükselen kenar 0-->1 
.................... //        if( deger<an_esik){        //eðer top yoksa çýkýþ gerilimi düþük  0 
.................... //            return 0; 
.................... //        }  
.................... //        if( deger>=an_esik){         // top varsa çýkýþ gerilimi yüksek  1 
.................... //            return 1; 
.................... //        } 
....................     } 
....................  
....................     return 0; 
197C:  MOVLW  00
197E:  MOVWF  01
1980:  MOVLB  0
1982:  GOTO   1A88 (RETURN)
.................... } 
....................  
....................  
.................... ////// MOTORLAR   ///// 
.................... int sa_m1_1(){ 
....................     an_sa_m1_1_sec(); 
*
0DD2:  BCF    47.3
0DD4:  BCF    47.2
0DD6:  BCF    47.1
0DD8:  MOVFF  46,16C
0DDC:  MOVFF  47,16D
0DE0:  MOVFF  48,16E
0DE4:  RCALL  092A
....................     set_adc_channel(1);  
0DE6:  MOVLW  04
0DE8:  MOVWF  01
0DEA:  MOVF   FC2,W
0DEC:  ANDLW  83
0DEE:  IORWF  01,W
0DF0:  MOVWF  FC2
....................     delay_us(20); 
0DF2:  MOVLW  42
0DF4:  MOVWF  00
0DF6:  DECFSZ 00,F
0DF8:  BRA    0DF6
0DFA:  NOP   
....................     deger=read_adc(); 
0DFC:  BSF    FC2.1
0DFE:  BTFSC  FC2.1
0E00:  BRA    0DFE
0E02:  MOVFF  FC3,87
0E06:  MOVFF  FC4,88
....................      
....................     //if(read_adc()>=an_esik) return 1;// 1 algýlar 
....................     //else if(read_adc()<an_esik) return 0; 
....................      
....................     if(deger>=sa_an_esik) return 0;// 0 algýlar 
0E0A:  MOVF   x88,W
0E0C:  SUBLW  00
0E0E:  BC    0E22
0E10:  XORLW  FF
0E12:  BNZ   0E1A
0E14:  MOVF   x87,W
0E16:  SUBLW  32
0E18:  BC    0E22
0E1A:  MOVLW  00
0E1C:  MOVWF  01
0E1E:  BRA    0E34
0E20:  BRA    0E34
....................     else if(deger<sa_an_esik) return 1; 
0E22:  MOVF   x88,W
0E24:  SUBLW  01
0E26:  BNC   0E34
0E28:  BNZ   0E30
0E2A:  MOVF   x87,W
0E2C:  SUBLW  32
0E2E:  BNC   0E34
0E30:  MOVLW  01
0E32:  MOVWF  01
0E34:  RETURN 0
.................... } 
....................  
.................... int sa_m1_2(){ 
....................     an_sa_m1_2_sec(); 
*
13C6:  BSF    47.3
13C8:  BCF    47.2
13CA:  BCF    47.1
13CC:  MOVFF  46,16C
13D0:  MOVFF  47,16D
13D4:  MOVFF  48,16E
13D8:  CALL   092A
....................     set_adc_channel(1);  
13DC:  MOVLW  04
13DE:  MOVWF  01
13E0:  MOVF   FC2,W
13E2:  ANDLW  83
13E4:  IORWF  01,W
13E6:  MOVWF  FC2
....................     delay_us(ADC_CHNL_SURE); 
13E8:  MOVLW  85
13EA:  MOVWF  00
13EC:  DECFSZ 00,F
13EE:  BRA    13EC
....................     deger=read_adc(); 
13F0:  BSF    FC2.1
13F2:  BTFSC  FC2.1
13F4:  BRA    13F2
13F6:  MOVFF  FC3,87
13FA:  MOVFF  FC4,88
....................      
....................    //if(read_adc()>=an_esik) return 1;// 1 algýlar 
....................     //else if(read_adc()<an_esik) return 0; 
....................      
....................     if(deger>=sa_an_esik) return 0;// 0 algýlar 
13FE:  MOVF   x88,W
1400:  SUBLW  00
1402:  BC    1416
1404:  XORLW  FF
1406:  BNZ   140E
1408:  MOVF   x87,W
140A:  SUBLW  32
140C:  BC    1416
140E:  MOVLW  00
1410:  MOVWF  01
1412:  BRA    1428
1414:  BRA    1428
....................     else if(deger<sa_an_esik) return 1; 
1416:  MOVF   x88,W
1418:  SUBLW  01
141A:  BNC   1428
141C:  BNZ   1424
141E:  MOVF   x87,W
1420:  SUBLW  32
1422:  BNC   1428
1424:  MOVLW  01
1426:  MOVWF  01
1428:  RETURN 0
.................... } 
....................  
.................... int sa_m2_1(){ 
....................     an_sa_m2_1_sec(); 
*
0E36:  BCF    47.3
0E38:  BSF    47.2
0E3A:  BCF    47.1
0E3C:  MOVFF  46,16C
0E40:  MOVFF  47,16D
0E44:  MOVFF  48,16E
0E48:  RCALL  092A
....................     set_adc_channel(1);  
0E4A:  MOVLW  04
0E4C:  MOVWF  01
0E4E:  MOVF   FC2,W
0E50:  ANDLW  83
0E52:  IORWF  01,W
0E54:  MOVWF  FC2
....................     delay_us(20); 
0E56:  MOVLW  42
0E58:  MOVWF  00
0E5A:  DECFSZ 00,F
0E5C:  BRA    0E5A
0E5E:  NOP   
....................     deger=read_adc(); 
0E60:  BSF    FC2.1
0E62:  BTFSC  FC2.1
0E64:  BRA    0E62
0E66:  MOVFF  FC3,87
0E6A:  MOVFF  FC4,88
....................      
....................     //if(read_adc()>=an_esik) return 1;// 1 algýlar 
....................     //else if(read_adc()<an_esik) return 0; 
....................      
....................     if(deger>=sa_an_esik) return 0;// 0 algýlar 
0E6E:  MOVF   x88,W
0E70:  SUBLW  00
0E72:  BC    0E86
0E74:  XORLW  FF
0E76:  BNZ   0E7E
0E78:  MOVF   x87,W
0E7A:  SUBLW  32
0E7C:  BC    0E86
0E7E:  MOVLW  00
0E80:  MOVWF  01
0E82:  BRA    0E98
0E84:  BRA    0E98
....................     else if(deger<sa_an_esik) return 1; 
0E86:  MOVF   x88,W
0E88:  SUBLW  01
0E8A:  BNC   0E98
0E8C:  BNZ   0E94
0E8E:  MOVF   x87,W
0E90:  SUBLW  32
0E92:  BNC   0E98
0E94:  MOVLW  01
0E96:  MOVWF  01
0E98:  RETURN 0
.................... } 
....................  
.................... int sa_m2_2(){ 
....................     an_sa_m2_2_sec(); 
*
142A:  BSF    47.3
142C:  BSF    47.2
142E:  BCF    47.1
1430:  MOVFF  46,16C
1434:  MOVFF  47,16D
1438:  MOVFF  48,16E
143C:  CALL   092A
....................     set_adc_channel(1);  
1440:  MOVLW  04
1442:  MOVWF  01
1444:  MOVF   FC2,W
1446:  ANDLW  83
1448:  IORWF  01,W
144A:  MOVWF  FC2
....................     delay_us(ADC_CHNL_SURE); 
144C:  MOVLW  85
144E:  MOVWF  00
1450:  DECFSZ 00,F
1452:  BRA    1450
....................     deger=read_adc(); 
1454:  BSF    FC2.1
1456:  BTFSC  FC2.1
1458:  BRA    1456
145A:  MOVFF  FC3,87
145E:  MOVFF  FC4,88
....................  
....................    //if(read_adc()>=an_esik) return 1;// 1 algýlar 
....................     //else if(read_adc()<an_esik) return 0; 
....................      
....................     if(deger>=sa_an_esik) return 0;// 0 algýlar 
1462:  MOVF   x88,W
1464:  SUBLW  00
1466:  BC    147A
1468:  XORLW  FF
146A:  BNZ   1472
146C:  MOVF   x87,W
146E:  SUBLW  32
1470:  BC    147A
1472:  MOVLW  00
1474:  MOVWF  01
1476:  BRA    148C
1478:  BRA    148C
....................     else if(deger<sa_an_esik) return 1; 
147A:  MOVF   x88,W
147C:  SUBLW  01
147E:  BNC   148C
1480:  BNZ   1488
1482:  MOVF   x87,W
1484:  SUBLW  32
1486:  BNC   148C
1488:  MOVLW  01
148A:  MOVWF  01
148C:  RETURN 0
.................... } 
....................  
.................... int sa_m3_1(){ 
....................     an_sa_m3_1_sec(); 
....................     set_adc_channel(1);  
....................     delay_us(ADC_CHNL_SURE); 
....................     deger=read_adc(); 
....................      
....................     //if(read_adc()>=an_esik) return 1;// 1 algýlar 
....................     //else if(read_adc()<an_esik) return 0; 
....................      
....................     if(deger>=sa_an_esik) return 0;// 0 algýlar 
....................     else if(deger<sa_an_esik) return 1; 
.................... } 
....................  
.................... int sa_m3_2(){ 
....................     an_sa_m3_2_sec(); 
....................     set_adc_channel(1);  
....................     delay_us(ADC_CHNL_SURE); 
....................     deger=read_adc(); 
....................      
....................    //if(read_adc()>=an_esik) return 1;// 1 algýlar 
....................     //else if(read_adc()<an_esik) return 0; 
....................      
....................     if(deger>=sa_an_esik) return 0;// 0 algýlar 
....................     else if(deger<sa_an_esik) return 1; 
.................... } 
....................  
.................... ////  *****    ////// 
....................  
.................... int swSaAlgila(char sensorHL){ 
....................  
....................     rgb_beyaz_on();  
*
1986:  BSF    48.6
1988:  BSF    48.7
198A:  BSF    47.0
198C:  MOVFF  46,16C
1990:  MOVFF  47,16D
1994:  MOVFF  48,16E
1998:  CALL   092A
....................     spiDataL=0; 
199C:  CLRF   48
....................      
....................     oyunbittiM12dur_doBrk();   
199E:  RCALL  13C6
19A0:  MOVF   01,F
19A2:  BNZ   19AE
19A4:  RCALL  142A
19A6:  MOVF   01,F
19A8:  BNZ   19AE
19AA:  BTFSS  x81.2
19AC:  BRA    19D8
19AE:  BCF    46.0
19B0:  BCF    46.1
19B2:  MOVFF  46,16C
19B6:  MOVFF  47,16D
19BA:  MOVFF  48,16E
19BE:  CALL   092A
19C2:  BCF    46.2
19C4:  BCF    46.3
19C6:  MOVFF  46,16C
19CA:  MOVFF  47,16D
19CE:  MOVFF  48,16E
19D2:  CALL   092A
19D6:  BSF    x81.2
....................     
....................     if(sw1_1(sensorHL)){ 
19D8:  MOVFF  165,166
19DC:  BRA    148E
19DE:  MOVF   01,F
19E0:  BZ    19FA
....................         //mp3_stop(); 
....................        // mp3_play(wav_whoosh); 
....................        // delay_ms(wav_whoosh_sure); 
....................        // delay_m_us(wav_whoosh_sure); 
....................          
....................         o1_L1_on(); 
19E2:  BSF    48.3
19E4:  MOVFF  46,16C
19E8:  MOVFF  47,16D
19EC:  MOVFF  48,16E
19F0:  CALL   092A
....................         return sw_11; 
19F4:  MOVLW  0B
19F6:  MOVWF  01
19F8:  BRA    1B04
....................     } 
....................     if(sw1_2(sensorHL)){ 
19FA:  MOVFF  165,166
19FE:  BRA    1562
1A00:  MOVF   01,F
1A02:  BZ    1A1C
....................        // mp3_stop(); 
....................         //mp3_play(wav_whoosh); 
....................         //delay_ms(wav_whoosh_sure); 
....................         //delay_m_us(wav_whoosh_sure); 
....................          
....................         o1_L2_on(); 
1A04:  BSF    48.4
1A06:  MOVFF  46,16C
1A0A:  MOVFF  47,16D
1A0E:  MOVFF  48,16E
1A12:  CALL   092A
....................         return sw_12; 
1A16:  MOVLW  0C
1A18:  MOVWF  01
1A1A:  BRA    1B04
....................     } 
....................     if(sw1_3(sensorHL)){ 
1A1C:  MOVFF  165,166
1A20:  BRA    1636
1A22:  MOVF   01,F
1A24:  BZ    1A3E
....................         //mp3_stop(); 
....................         //mp3_play(wav_whoosh); 
....................        // delay_ms(wav_whoosh_sure); 
....................        // delay_m_us(wav_whoosh_sure); 
....................          
....................         o1_L3_on(); 
1A26:  BSF    48.5
1A28:  MOVFF  46,16C
1A2C:  MOVFF  47,16D
1A30:  MOVFF  48,16E
1A34:  CALL   092A
....................         return sw_13; 
1A38:  MOVLW  0D
1A3A:  MOVWF  01
1A3C:  BRA    1B04
....................     } 
....................  
....................     if(sw2_1(sensorHL)){ 
1A3E:  MOVFF  165,166
1A42:  BRA    170A
1A44:  MOVF   01,F
1A46:  BZ    1A60
....................        // mp3_stop(); 
....................         //mp3_play(wav_whoosh); 
....................         //delay_ms(wav_whoosh_sure); 
....................         //delay_m_us(wav_whoosh_sure); 
....................          
....................         o2_L1_on(); 
1A48:  BSF    48.0
1A4A:  MOVFF  46,16C
1A4E:  MOVFF  47,16D
1A52:  MOVFF  48,16E
1A56:  CALL   092A
....................         return sw_21; 
1A5A:  MOVLW  15
1A5C:  MOVWF  01
1A5E:  BRA    1B04
....................     } 
....................     if(sw2_2(sensorHL)){ 
1A60:  MOVFF  165,166
1A64:  BRA    17DE
1A66:  MOVF   01,F
1A68:  BZ    1A82
....................         //mp3_stop(); 
....................         //mp3_play(wav_whoosh); 
....................         //delay_ms(wav_whoosh_sure); 
....................        // delay_m_us(wav_whoosh_sure); 
....................          
....................         o2_L2_on(); 
1A6A:  BSF    48.1
1A6C:  MOVFF  46,16C
1A70:  MOVFF  47,16D
1A74:  MOVFF  48,16E
1A78:  CALL   092A
....................         return sw_22; 
1A7C:  MOVLW  16
1A7E:  MOVWF  01
1A80:  BRA    1B04
....................     } 
....................      if(sw2_3(sensorHL)){ 
1A82:  MOVFF  165,166
1A86:  BRA    18B2
1A88:  MOVF   01,F
1A8A:  BZ    1AA4
....................         //mp3_stop(); 
....................        // mp3_play(wav_whoosh); 
....................         //delay_ms(wav_whoosh_sure); 
....................        //delay_m_us(wav_whoosh_sure); 
....................         o2_L3_on(); 
1A8C:  BSF    48.2
1A8E:  MOVFF  46,16C
1A92:  MOVFF  47,16D
1A96:  MOVFF  48,16E
1A9A:  CALL   092A
....................          
....................         return sw_23; 
1A9E:  MOVLW  17
1AA0:  MOVWF  01
1AA2:  BRA    1B04
....................      }   
....................  
....................         oyunbittiM12dur_doBrk(); 
1AA4:  RCALL  13C6
1AA6:  MOVF   01,F
1AA8:  BNZ   1AB4
1AAA:  RCALL  142A
1AAC:  MOVF   01,F
1AAE:  BNZ   1AB4
1AB0:  BTFSS  x81.2
1AB2:  BRA    1ADE
1AB4:  BCF    46.0
1AB6:  BCF    46.1
1AB8:  MOVFF  46,16C
1ABC:  MOVFF  47,16D
1AC0:  MOVFF  48,16E
1AC4:  CALL   092A
1AC8:  BCF    46.2
1ACA:  BCF    46.3
1ACC:  MOVFF  46,16C
1AD0:  MOVFF  47,16D
1AD4:  MOVFF  48,16E
1AD8:  CALL   092A
1ADC:  BSF    x81.2
....................          
.................... //        if(f_oyunBitti||(millis()-oyunBitisSureBasla>((unsigned long long)(_mul(_mul(ee_oyunSure,60LL),1000LL)))) 
.................... //                ||(sa_m1_2())||(sa_m2_2())) 
.................... //        {  
.................... //            f_oyunBitti=TRUE;   
.................... //            return 0; 
.................... //        } 
....................          
....................     if(sa_m1_2()||sa_m2_2()||f_oyunBitti) 
1ADE:  RCALL  13C6
1AE0:  MOVF   01,F
1AE2:  BNZ   1AEE
1AE4:  RCALL  142A
1AE6:  MOVF   01,F
1AE8:  BNZ   1AEE
1AEA:  BTFSS  x81.2
1AEC:  BRA    1AF4
....................         return 0;  
1AEE:  MOVLW  00
1AF0:  MOVWF  01
1AF2:  BRA    1B04
....................  
....................     if(f_oyunBitti) return 0; 
1AF4:  BTFSS  x81.2
1AF6:  BRA    1B00
1AF8:  MOVLW  00
1AFA:  MOVWF  01
1AFC:  BRA    1B04
1AFE:  BRA    1B04
....................     else return 255;  //sensorden bilgi gelmiyorsa 
1B00:  MOVLW  FF
1B02:  MOVWF  01
1B04:  RETURN 0
....................      
.................... }  
....................  
.................... int varSW(char sensorHL){ 
....................      
....................     if(sw1_1(sensorHL)){ 
....................         return sw_11; 
....................     } 
....................     if(sw1_2(sensorHL)){ 
....................         return sw_12; 
....................     } 
....................     if(sw1_3(sensorHL)){ 
....................         return sw_13; 
....................     } 
....................     if(sw2_1(sensorHL)) { 
....................         return sw_21; 
....................     } 
....................     if(sw2_2(sensorHL)){ 
....................         return sw_22; 
....................     } 
....................     if(sw2_3(sensorHL)) { 
....................         return sw_23; 
....................     } 
....................      
....................     return 0;  
.................... } 
....................  
....................  
.................... void puanBelirle(int sw){ 
....................      
....................     switch(sw){ 
....................         case sw_11:  
....................             o1_puan+=birliDelikPuan;         
....................             break; 
....................         case sw_12: 
....................             o1_puan+=ikiliDelikPuan; 
....................             break; 
....................         case sw_13: 
....................             o1_puan+=ucluDelikPuan; 
....................             break; 
....................         case sw_21: 
....................             o2_puan+=birliDelikPuan; 
....................             break; 
....................         case sw_22: 
....................             o2_puan+=ikiliDelikPuan; 
....................             break; 
....................         case sw_23: 
....................             o2_puan+=ucluDelikPuan; 
....................             break; 
....................     } 
.................... }/// 
.................... /////// 
....................  
.................... void sw_ses_oynat(int sw) 
.................... { 
....................     mp3_stop(); 
*
20A8:  CALL   11A8
....................     delay_m_us(20);//ses kacirmadi 
20AC:  MOVLB  1
20AE:  CLRF   x67
20B0:  MOVLW  14
20B2:  MOVWF  x66
20B4:  MOVLB  0
20B6:  CALL   0E9A
....................  
....................     if(sw==sw_11 || sw==sw_21) //tekli delik 
20BA:  MOVLB  1
20BC:  MOVF   x65,W
20BE:  SUBLW  0B
20C0:  BZ    20C8
20C2:  MOVF   x65,W
20C4:  SUBLW  15
20C6:  BNZ   20D6
....................     { 
....................         #ifdef  KOSTUR 
....................             mp3_play(wav_atKisnemesi); 
20C8:  CLRF   x67
20CA:  MOVLW  01
20CC:  MOVWF  x66
20CE:  MOVLB  0
20D0:  CALL   11B8
20D4:  MOVLB  1
....................         #endif 
....................         #ifdef  TOZ_DUMAN 
....................             mp3_play(mp3_tavsan); 
....................         #endif 
....................  
....................     } 
....................     if(sw==sw_12 || sw==sw_13 || sw==sw_22 || sw==sw_23) 
20D6:  MOVF   x65,W
20D8:  SUBLW  0C
20DA:  BZ    20EE
20DC:  MOVF   x65,W
20DE:  SUBLW  0D
20E0:  BZ    20EE
20E2:  MOVF   x65,W
20E4:  SUBLW  16
20E6:  BZ    20EE
20E8:  MOVF   x65,W
20EA:  SUBLW  17
20EC:  BNZ   20FC
....................     { 
....................          #ifdef  KOSTUR 
....................            // mp3_play(wav_atKisnemesi); 
....................             mp3_play(wav_atKosmasi);  
20EE:  CLRF   x67
20F0:  MOVLW  02
20F2:  MOVWF  x66
20F4:  MOVLB  0
20F6:  CALL   11B8
20FA:  MOVLB  1
....................         #endif 
....................         #ifdef  TOZ_DUMAN 
....................            // mp3_play(mp3_tavsan); 
....................             mp3_play(wav_whoosh); 
....................         #endif 
....................         
....................     } 
20FC:  MOVLB  0
20FE:  RETURN 0
.................... } 
....................  
.................... BOOLEAN m1_islem_durum=TRUE; 
.................... BOOLEAN m1_islem_ileri=FALSE; 
.................... BOOLEAN m2_islem_durum=TRUE; 
.................... BOOLEAN m2_islem_ileri=FALSE; 
....................  
....................  
.................... long m_sure_hesapla(int sens_sw) 
2100:  MOVFF  15F,160
.................... { 
....................     int _sw=sens_sw; 
....................      
....................     if(_sw==sw_11){ 
2104:  MOVLB  1
2106:  MOVF   x60,W
2108:  SUBLW  0B
210A:  BNZ   212C
....................         o1_L1_on(); 
210C:  BSF    48.3
210E:  MOVFF  46,16C
2112:  MOVFF  47,16D
2116:  MOVFF  48,16E
211A:  MOVLB  0
211C:  CALL   092A
....................         return m1_birliDelik_sure; 
2120:  MOVFF  71,01
2124:  MOVFF  72,02
2128:  BRA    21E6
212A:  MOVLB  1
....................     } 
....................      if(_sw==sw_12){ 
212C:  MOVF   x60,W
212E:  SUBLW  0C
2130:  BNZ   2152
....................         o1_L2_on(); 
2132:  BSF    48.4
2134:  MOVFF  46,16C
2138:  MOVFF  47,16D
213C:  MOVFF  48,16E
2140:  MOVLB  0
2142:  CALL   092A
....................         return m1_ikiliDelik_sure; 
2146:  MOVFF  73,01
214A:  MOVFF  74,02
214E:  BRA    21E6
2150:  MOVLB  1
....................     } 
....................     if(_sw==sw_13){ 
2152:  MOVF   x60,W
2154:  SUBLW  0D
2156:  BNZ   2178
....................          o1_L3_on(); 
2158:  BSF    48.5
215A:  MOVFF  46,16C
215E:  MOVFF  47,16D
2162:  MOVFF  48,16E
2166:  MOVLB  0
2168:  CALL   092A
....................         return m1_ucluDelik_sure; 
216C:  MOVFF  75,01
2170:  MOVFF  76,02
2174:  BRA    21E6
2176:  MOVLB  1
....................     } 
....................      
....................     if(_sw==sw_21){ 
2178:  MOVF   x60,W
217A:  SUBLW  15
217C:  BNZ   219E
....................          o2_L1_on(); 
217E:  BSF    48.0
2180:  MOVFF  46,16C
2184:  MOVFF  47,16D
2188:  MOVFF  48,16E
218C:  MOVLB  0
218E:  CALL   092A
....................         return m2_birliDelik_sure; 
2192:  MOVFF  77,01
2196:  MOVFF  78,02
219A:  BRA    21E6
219C:  MOVLB  1
....................     } 
....................      if(_sw==sw_22){ 
219E:  MOVF   x60,W
21A0:  SUBLW  16
21A2:  BNZ   21C4
....................         o2_L2_on(); 
21A4:  BSF    48.1
21A6:  MOVFF  46,16C
21AA:  MOVFF  47,16D
21AE:  MOVFF  48,16E
21B2:  MOVLB  0
21B4:  CALL   092A
....................         return m2_ikiliDelik_sure; 
21B8:  MOVFF  79,01
21BC:  MOVFF  7A,02
21C0:  BRA    21E6
21C2:  MOVLB  1
....................     } 
....................      if(_sw==sw_23){ 
21C4:  MOVF   x60,W
21C6:  SUBLW  17
21C8:  BNZ   21E8
....................         o2_L3_on(); 
21CA:  BSF    48.2
21CC:  MOVFF  46,16C
21D0:  MOVFF  47,16D
21D4:  MOVFF  48,16E
21D8:  MOVLB  0
21DA:  CALL   092A
....................         return m2_ucluDelik_sure; 
21DE:  MOVFF  7B,01
21E2:  MOVFF  7C,02
21E6:  MOVLB  1
....................     } 
21E8:  MOVLB  0
21EA:  RETURN 0
.................... } 
....................  
.................... int sw_motor_oynat(int sens_sw, long sure) 
21EC:  MOVFF  15F,162
.................... { 
....................     int _sw=sens_sw; 
....................  
....................     if(_sw==sw_11 || _sw==sw_12 || _sw==sw_13) 
21F0:  MOVLB  1
21F2:  MOVF   x62,W
21F4:  SUBLW  0B
21F6:  BZ    2204
21F8:  MOVF   x62,W
21FA:  SUBLW  0C
21FC:  BZ    2204
21FE:  MOVF   x62,W
2200:  SUBLW  0D
2202:  BNZ   22A8
....................     { 
....................         if(!m1_islem_ileri)  //motor timer sýfýrlanýyor. ilk çalýþma zamaný 
2204:  MOVLB  0
2206:  BTFSC  x81.5
2208:  BRA    2226
....................         { 
....................             motor1_ileri(); 
220A:  BSF    46.0
220C:  BCF    46.1
220E:  MOVFF  46,16C
2212:  MOVFF  47,16D
2216:  MOVFF  48,16E
221A:  CALL   092A
....................             m1_islem_ileri=TRUE; 
221E:  BSF    x81.5
....................             m1_islem_durum=FALSE; 
2220:  BCF    x81.4
....................             //m1_sure+=m1_birliDelik_sure; 
....................             timer_m1_say=0; //timer kesmesinde 1ms artarak içinde sayýyor. 
2222:  CLRF   39
2224:  CLRF   38
....................         } 
....................         
....................         if(timer_m1_say> sure && m1_islem_ileri) // motor sure bitti... 
2226:  MOVLB  1
2228:  MOVF   x61,W
222A:  SUBWF  39,W
222C:  BNC   2260
222E:  BNZ   2236
2230:  MOVF   38,W
2232:  SUBWF  x60,W
2234:  BC    2260
2236:  MOVLB  0
2238:  BTFSC  x81.5
223A:  BRA    2240
223C:  MOVLB  1
223E:  BRA    2260
....................         { 
....................             motor1_dur(); 
2240:  BCF    46.0
2242:  BCF    46.1
2244:  MOVFF  46,16C
2248:  MOVFF  47,16D
224C:  MOVFF  48,16E
2250:  CALL   092A
....................             m1_islem_durum=TRUE; 
2254:  BSF    x81.4
....................             m1_islem_ileri=FALSE; 
2256:  BCF    x81.5
....................            // m1_sure=0; 
....................             return 1; 
2258:  MOVLW  01
225A:  MOVWF  01
225C:  BRA    2364
225E:  MOVLB  1
....................         } 
....................          
....................         printf(lcd_putc,"\ftimer:%Lu", timer_m1_say); 
2260:  MOVLW  16
2262:  MOVWF  FF6
2264:  MOVLW  02
2266:  MOVWF  FF7
2268:  MOVLW  07
226A:  MOVWF  x69
226C:  MOVLB  0
226E:  CALL   0C0E
2272:  MOVLW  10
2274:  MOVWF  FE9
2276:  MOVFF  39,167
227A:  MOVFF  38,166
227E:  CALL   12F4
....................         printf(lcd_putc,"\ntM1:%Lu", sure); 
2282:  MOVLW  22
2284:  MOVWF  FF6
2286:  MOVLW  02
2288:  MOVWF  FF7
228A:  MOVLW  05
228C:  MOVLB  1
228E:  MOVWF  x69
2290:  MOVLB  0
2292:  CALL   0C0E
2296:  MOVLW  10
2298:  MOVWF  FE9
229A:  MOVFF  161,167
229E:  MOVFF  160,166
22A2:  CALL   12F4
22A6:  MOVLB  1
....................   
....................     } 
....................      
....................     if(_sw==sw_21 || _sw==sw_22 || _sw==sw_23) 
22A8:  MOVF   x62,W
22AA:  SUBLW  15
22AC:  BZ    22BA
22AE:  MOVF   x62,W
22B0:  SUBLW  16
22B2:  BZ    22BA
22B4:  MOVF   x62,W
22B6:  SUBLW  17
22B8:  BNZ   235E
....................     { 
....................         if(!m2_islem_ileri)  //motor timer sýfýrlanýyor. ilk çalýþma zamaný 
22BA:  MOVLB  0
22BC:  BTFSC  x81.7
22BE:  BRA    22DC
....................         { 
....................             motor2_ileri(); 
22C0:  BSF    46.2
22C2:  BCF    46.3
22C4:  MOVFF  46,16C
22C8:  MOVFF  47,16D
22CC:  MOVFF  48,16E
22D0:  CALL   092A
....................             m2_islem_ileri=TRUE; 
22D4:  BSF    x81.7
....................             m2_islem_durum=FALSE; 
22D6:  BCF    x81.6
....................             //m1_sure+=m1_birliDelik_sure; 
....................             timer_m2_say=0; 
22D8:  CLRF   3B
22DA:  CLRF   3A
....................         } 
....................         
....................         if(timer_m2_say> sure && m2_islem_ileri) // motor sure bitti... 
22DC:  MOVLB  1
22DE:  MOVF   x61,W
22E0:  SUBWF  3B,W
22E2:  BNC   2316
22E4:  BNZ   22EC
22E6:  MOVF   3A,W
22E8:  SUBWF  x60,W
22EA:  BC    2316
22EC:  MOVLB  0
22EE:  BTFSC  x81.7
22F0:  BRA    22F6
22F2:  MOVLB  1
22F4:  BRA    2316
....................         { 
....................             motor2_dur(); 
22F6:  BCF    46.2
22F8:  BCF    46.3
22FA:  MOVFF  46,16C
22FE:  MOVFF  47,16D
2302:  MOVFF  48,16E
2306:  CALL   092A
....................             m2_islem_durum=TRUE; 
230A:  BSF    x81.6
....................             m2_islem_ileri=FALSE; 
230C:  BCF    x81.7
....................            // m1_sure=0; 
....................             return 1; 
230E:  MOVLW  01
2310:  MOVWF  01
2312:  BRA    2364
2314:  MOVLB  1
....................         } 
....................          
....................         printf(lcd_putc,"\ftimer:%Lu", timer_m2_say); 
2316:  MOVLW  2C
2318:  MOVWF  FF6
231A:  MOVLW  02
231C:  MOVWF  FF7
231E:  MOVLW  07
2320:  MOVWF  x69
2322:  MOVLB  0
2324:  CALL   0C0E
2328:  MOVLW  10
232A:  MOVWF  FE9
232C:  MOVFF  3B,167
2330:  MOVFF  3A,166
2334:  CALL   12F4
....................         printf(lcd_putc,"\ntM2:%Lu", sure); 
2338:  MOVLW  38
233A:  MOVWF  FF6
233C:  MOVLW  02
233E:  MOVWF  FF7
2340:  MOVLW  05
2342:  MOVLB  1
2344:  MOVWF  x69
2346:  MOVLB  0
2348:  CALL   0C0E
234C:  MOVLW  10
234E:  MOVWF  FE9
2350:  MOVFF  161,167
2354:  MOVFF  160,166
2358:  CALL   12F4
235C:  MOVLB  1
....................   
....................     } 
....................     return 0; 
235E:  MOVLW  00
2360:  MOVWF  01
2362:  MOVLB  0
2364:  RETURN 0
....................          
....................      
.................... } 
....................  
....................  
.................... #include "lcd_menu_islem.c" 
.................... #include "kostur_kart_tanimlar.h" 
.................... /*  
....................  * File:   kostur_kart_tanimlar.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 09 Mart 2018 Cuma, 15:36 
....................  */ 
....................  
.................... #ifndef KOSTUR_KART_TANIMLAR_H 
.................... #define	KOSTUR_KART_TANIMLAR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     //unsigned int16 spiData=0;  //16 bit veri gönderileceði zaman 
....................     unsigned int8 spiDataH=0,spiDataM=0,spiDataL=0; 
....................     int8 jetonSay=0; 
....................     void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit); 
....................     void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL); 
....................      
....................     #define spi_yaz16() hc595_spi_yaz(spiData,16) 
....................     #define spi_yaz24() hc595_spi_24bit_yaz(spiDataH,spiDataM,spiDataL) 
....................     #define hc_595_clr_allPins() hc595_spi_24bit_yaz(0x00,0x00,0x00);//delay_ms(100) 
....................     #define hc_595_set_allPins() hc595_spi_24bit_yaz(0xFF,0xFF,0xFF);delay_ms(100) 
....................      
....................     // spiDataL  ilk 8bit 
....................     #define l2_1    0 
....................     #define l2_2    1 
....................     #define l2_3    2 
....................     #define l1_1    3 
....................     #define l1_2    4 
....................     #define l1_3    5 
....................     #define led_k   6 
....................     #define led_y   7 
....................     // spiDataM ikinci 8 bit 
....................     #define led_m   0 
....................     #define c2      1 
....................     #define b2      2 
....................     #define a2      3 
....................     #define c1      4 
....................     #define b1      5 
....................     #define a1      6 
....................     #define u_led   7 
....................     // spiDataH üçüncü 8 bit 
....................     #define in1     0 
....................     #define in2     1 
....................     #define in3     2 
....................     #define in4     3 
....................     #define in5     4 
....................     #define in6     5 
....................     #define in7     6 
....................     #define in8     7 
....................  
....................     //74HC4051_1 tanýmlamalarý 
....................  
....................     #define an_sw1_1_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw1_2_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw1_3_sec() bit_clear(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1); spi_yaz24()      
....................      
....................     #define an_sw2_1_sec() bit_set(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw2_2_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw2_3_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1); spi_yaz24()   
....................                                                         
....................     #define an_dFSesSec() bit_clear(spiDataM,a1);bit_set(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()  
....................      
....................                          
....................     #define dfSesAyarla() an_dFSesSec();set_adc_channel(0); delay_us(20); \ 
....................                            mp3_set_volume(map(read_adc(),0,1023,0,30))     \ 
....................  
....................     #define an_sa_m1_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m1_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_1_sec() bit_clear(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_2_sec() bit_set(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24() 
....................     #define an_sa_m3_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m3_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................  
....................     #define o1_L1_on()  bit_set(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_on()  bit_set(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_on()  bit_set(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_on() o1_L1_on();o1_L2_on();o1_L3_on() 
....................  
....................     #define o1_L1_off()  bit_clear(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_off()  bit_clear(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_off()  bit_clear(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_off()  o1_L1_off();o1_L2_off();o1_L3_off() 
....................  
....................     #define o2_L1_on()  bit_set(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_on()  bit_set(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_on()  bit_set(spiDataL,l2_3);spi_yaz24() 
....................      #define o2_L123_on() o2_L1_on();o2_L2_on();o2_L3_on() 
....................  
....................     #define o2_L1_off()  bit_clear(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_off()  bit_clear(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_off()  bit_clear(spiDataL,l2_3);spi_yaz24() 
....................     #define o2_L123_off()  o2_L1_off();o2_L2_off();o1_L3_off() 
....................  
....................     #define sw_led_off() o1_L123_off(); o2_L123_off() 
....................     #define sw_led_on() o1_L123_on();o2_L123_on() 
....................      
....................     #define rgb_kirmizi_on()  bit_set(spiDataL,led_k);spi_yaz24() 
....................     #define rgb_kirmizi_off() bit_clear(spiDataL,led_k);spi_yaz24() 
....................      
....................     #define rgb_yesil_on() bit_set(spiDataL,led_y);spi_yaz24() 
....................     #define rgb_yesil_off() bit_clear(spiDataL,led_y);spi_yaz24() 
....................      
....................     #define rgb_mavi_on() bit_set(spiDataM,led_m);spi_yaz24() 
....................     #define rgb_mavi_off() bit_clear(spiDataM,led_m);spi_yaz24() 
....................  
....................     //#define rgb_beyaz_on() rgb_kirmizi_on();rgb_yesil_on();rgb_mavi_on() 
....................     #define rgb_beyaz_on()   bit_set(spiDataL,led_k); bit_set(spiDataL,led_y);  \ 
....................                              bit_set(spiDataM,led_m); spi_yaz24()              \ 
....................  
....................     //#define rgb_beyaz_off() rgb_kirmizi_off();rgb_yesil_off();rgb_mavi_off() 
....................     #define rgb_beyaz_off() bit_clear(spiDataL,led_k);bit_clear(spiDataL,led_y);    \ 
....................                             bit_clear(spiDataM,led_m);spi_yaz24()                   \ 
....................  
....................     #define motor1_ileri() bit_set(spiDataH,in1);    \ 
....................                            bit_clear(spiDataH,in2);  \ 
....................                            spi_yaz24()              \                       
....................                            //output_high(PIN_C2)      \ 
....................                           // Rc2 : ccp1                       
....................     #define motor1_geri()  bit_set(spiDataH,in2);    \ 
....................                            bit_clear(spiDataH,in1);  \ 
....................                            spi_yaz24()              \                       
....................                           // output_high(PIN_C2)    \       //PWM yoksa  
....................     #define motor1_dur() bit_clear(spiDataH,in1);    \ 
....................                          bit_clear(spiDataH,in2);    \                          
....................                          spi_yaz24()                \ 
....................                                   
....................     #define motor2_ileri() bit_set(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()              \                        
....................                           // output_high(PIN_C11)    \       //PWM yoksa  
....................                           // Rc1 : ccp2 
....................     #define motor2_geri()  bit_set(spiDataH,in4);    \ 
....................                            bit_clear(spiDataH,in3);  \ 
....................                            spi_yaz24()              \ 
....................                                     
....................     #define motor2_dur()   bit_clear(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()               \          
....................                            //output_high(PIN_C1)    \       //PWM yoksa    
....................     #define motor3_ileri() bit_set(spiDataH,in5);    \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \      //En pin +5V'ta donanýmda   
....................                                    
....................     #define motor3_geri()  bit_set(spiDataH,in6);    \ 
....................                            bit_clear(spiDataH,in5);  \ 
....................                            spi_yaz24()              \ 
....................                                   
....................     #define motor3_dur()   bit_clear(spiDataH,in5);  \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \ 
....................                             
....................     #define oyunbittiM12dur_doBrk() if(sa_m1_2()||sa_m2_2()||f_oyunBitti)\ 
....................                                     {                                   \ 
....................                                         motor1_dur();                   \ 
....................                                         motor2_dur();                   \ 
....................                                         f_oyunBitti=TRUE;               \  
....................                                         break;                          \ 
....................                                     }                                   \ 
....................                             
....................  
....................      
....................     #define jtn_pin PIN_B0                  //Pin ler  büyük harfle olmalý 
....................     #define ticket_out_pin PIN_C0 
....................      //delay_ms(300);;                               
....................     #define jetonKontrol() if(!input(jtn_pin)){                         \ 
....................                                                                         \ 
....................                             jetonSay++;                                 \ 
....................                            }                                            \ 
....................                            if(jetonSay>=jtnTLMik){                      \ 
....................                                 jetonAtildi=TRUE;                       \ 
....................                                 jetonSay=0;                             \ 
....................                            }                                            \ 
....................      
....................     #define btn1 PIN_A5 
....................     #define btn2 PIN_A3                        
....................     #define btn3 PIN_A2 
....................  
....................    /// wav dosyasý tanýmlamlarý 
....................     /// mp3-wav index 
.................... 	#define wav_atKisnemesi     1 
.................... 	#define wav_atKosmasi       2 
.................... 	#define wav_suDamlasi       3 
.................... 	#define wav_heySesi         4 
.................... 	#define wav_alkisSesi       5 
.................... 	#define wav_oyunBitti       6 
.................... 	#define wav_getReady        7 
.................... 	#define wav_whoosh          8 
.................... 	#define wav_jeton           9 
.................... 	#define mp3_remix           10 
.................... 	#define mp3_tavsan          11 
.................... 	#define wav_waterDrop       12 
.................... 	#define mp3_adele_Rolling   14 
.................... 	#define wav_duduk_basla     15 
.................... 	#define wav_ding            16 
.................... 	#define mp3_mars            17 
.................... 	#define mp3_getlowve_araba	18 
....................     #define mp3_beep_uyari      19 
....................  
....................      //// bosta rastgele mp3 müzik 
....................      
....................     #define mp3_adele_Rolling2  20 
....................     #define mp3_anitta          21 
....................     #define mp3_love_lo         22 
....................     #define mp3_agen            23 
....................     #define mp3_dejavu          24 
....................     #define mp3_rain            25 
....................     #define mp3_aweli           26 
....................  
....................     #define wav_remix_sure 200000 //(3*60+20)*1000  //3:20 mS degeri.... 
....................     #define wav_atKisnemesi_sure  1500 
....................     #define wav_atKosmasi_sure    2000 
....................     #define wav_whoosh_sure  20 //300//350 
....................  
....................     #define oyunSure_1dk    (unsigned int32)(60*1250)//60000UL 
....................     #define oyunSure_3dk    (unsigned int32)(180*1250)//180000UL 
....................     #define oyunSure_5dk    (unsigned int32)(300*1250)//300000UL 
....................     #define oyunSure_7dk    (unsigned int32)(420*1250)//420000UL 
....................     #define oyunSure_10dk   (unsigned int32)(600*1250)//600000UL 
....................  
....................     #define millisMaxSayi 0xFFFFFFFF 
....................  
....................     #define birliDelikPuan 30 
....................     #define ikiliDelikPuan 20 
....................     #define ucluDelikPuan  10 
....................  
....................     #define dfPplayerMaxSes() mp3_set_volume (29);delay_ms(100)//48 
....................     #define dfPlayerNormSes() mp3_set_volume(20);delay_ms(100) 
....................     #define dfPlayerMinSes() mp3_set_volume(1);delay_ms(100) 
....................  
....................     #define textBufSil() text_sil() 
....................  
....................     #define ee_adres_jtnCount   0   //LSB Byte, high 3 
....................     #define ee_adres_jtnTL      4 
....................     #define ee_adres_Msure_1    5   //LSB Byte, high 6 
....................     #define ee_adres_Msure_2    7   //LSB Byte, high 8 
....................     #define ee_adres_Msure_3    9   //LSB Byte, high 10 
....................     #define ee_adres_oyunSure   11 
....................     #define ee_adres_dfSes      12 
....................  
....................  
....................     #define ee_adres_sw11_an_min_0_h      13 
....................     #define ee_adres_sw11_an_min_0_l      14 
....................     #define ee_adres_sw12_an_min_1_h      15 
....................     #define ee_adres_sw12_an_min_1_l      16 
....................     #define ee_adres_sw13_an_min_2_h      17 
....................     #define ee_adres_sw13_an_min_2_l      18 
....................     #define ee_adres_sw21_an_min_3_h      19 
....................     #define ee_adres_sw21_an_min_3_l      20 
....................     #define ee_adres_sw22_an_min_4_h      21 
....................     #define ee_adres_sw22_an_min_4_l      22 
....................     #define ee_adres_sw23_an_min_5_h      23 
....................     #define ee_adres_sw23_an_min_5_l      24 
....................  
....................     #define ee_adres_sw11_an_max_0_h      25 
....................     #define ee_adres_sw11_an_max_0_l      26 
....................     #define ee_adres_sw12_an_max_1_h      27 
....................     #define ee_adres_sw12_an_max_1_l      28 
....................     #define ee_adres_sw13_an_max_2_h      29 
....................     #define ee_adres_sw13_an_max_2_l      30 
....................     #define ee_adres_sw21_an_max_3_h      31 
....................     #define ee_adres_sw21_an_max_3_l      32 
....................     #define ee_adres_sw22_an_max_4_h      33 
....................     #define ee_adres_sw22_an_max_4_l      34 
....................     #define ee_adres_sw23_an_max_5_h      35 
....................     #define ee_adres_sw23_an_max_5_l      36 
....................  
....................     #define ee_adr_an_max_kal_h 37 
....................     #define ee_adr_an_max_kal_l 38 
....................     #define ee_adr_an_min_kal_h 39 
....................     #define ee_adr_an_min_kal_l 40 
....................  
....................     #define ee_adr_sens_okuma_sayisi    41 
....................  
....................  
....................  
....................     #define birDelikAdimSys   5 
....................  
....................     #define SENS_OKU_L    'L'     // Sensor normade low 
....................     #define SENS_OKU_H    'H'     // Sensor normade High  
....................  
....................    // #define SENS_OKU_H_L    SENS_OKU_H   
....................     #define SENS_OKU_H_L    SENS_OKU_L 
....................      
....................  
....................     #define lcd_led PIN_B2 
....................  
....................     //  ****    //// 
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_KART_TANIMLAR_H */ 
....................  
....................  
....................  
.................... //extern int8 jtnTLMik; 
.................... extern int8 ee_oyunSure; 
....................  
.................... void sensOkumaSayisiAyar(void); 
.................... void sesAyar(void); 
.................... void jtnTLayar(void); 
.................... void oyunSureAyar(void); 
.................... void sensorTest(char sensHL); 
.................... void sensorKalibre(char sensHL); 
.................... void motorKurulum(void); 
.................... void resetIslemi(void); 
....................  
.................... void lcdMenuIslem(void){ 
*
4058:  MOVLB  1
405A:  CLRF   x5F
....................     signed int btn=0; 
....................  
....................     hc_595_clr_allPins(); 
405C:  CLRF   x6C
405E:  CLRF   x6D
4060:  CLRF   x6E
4062:  MOVLB  0
4064:  CALL   092A
4068:  CLRF   19
406A:  BTFSC  FF2.7
406C:  BSF    19.7
406E:  BCF    FF2.7
....................     //P10_Clear_Display(0); 
....................     delay_ms(100); 
4070:  MOVLW  64
4072:  MOVLB  1
4074:  MOVWF  x86
4076:  MOVLB  0
4078:  CALL   0834
407C:  BTFSC  19.7
407E:  BSF    FF2.7
....................     disable_interrupts(INT_TIMER0); 
4080:  BCF    FF2.5
....................     
....................     while(1){ 
....................          
....................         if(!input(btn1)){ 
4082:  BTFSC  F80.5
4084:  BRA    40B2
4086:  CLRF   19
4088:  BTFSC  FF2.7
408A:  BSF    19.7
408C:  BCF    FF2.7
....................             delay_ms(50); 
408E:  MOVLW  32
4090:  MOVLB  1
4092:  MOVWF  x86
4094:  MOVLB  0
4096:  CALL   0834
409A:  BTFSC  19.7
409C:  BSF    FF2.7
....................             btn--; 
409E:  MOVLB  1
40A0:  DECF   x5F,F
....................             if(btn<=0)btn=9; 
40A2:  BTFSC  x5F.7
40A4:  BRA    40AC
40A6:  MOVF   x5F,W
40A8:  SUBLW  00
40AA:  BNC   40B0
40AC:  MOVLW  09
40AE:  MOVWF  x5F
40B0:  MOVLB  0
....................             //printf(lcd_putc,"\f\nbtn:%d   ",btn); 
....................         } 
....................  
....................         if(!input(btn3)){ 
40B2:  BTFSC  F80.2
40B4:  BRA    40E2
40B6:  CLRF   19
40B8:  BTFSC  FF2.7
40BA:  BSF    19.7
40BC:  BCF    FF2.7
....................             delay_ms(50); 
40BE:  MOVLW  32
40C0:  MOVLB  1
40C2:  MOVWF  x86
40C4:  MOVLB  0
40C6:  CALL   0834
40CA:  BTFSC  19.7
40CC:  BSF    FF2.7
....................             btn++; 
40CE:  MOVLB  1
40D0:  INCF   x5F,F
....................             if(btn>9)btn=1; 
40D2:  BTFSC  x5F.7
40D4:  BRA    40E0
40D6:  MOVF   x5F,W
40D8:  SUBLW  09
40DA:  BC    40E0
40DC:  MOVLW  01
40DE:  MOVWF  x5F
40E0:  MOVLB  0
....................             //printf(lcd_putc,"\f\nbtn:%d  ",btn); 
....................         } 
....................          
....................         if(btn==1){ 
40E2:  MOVLB  1
40E4:  DECFSZ x5F,W
40E6:  BRA    4140
....................              printf(lcd_putc,"\f ...Jeton TL... "); 
40E8:  MOVLW  42
40EA:  MOVWF  FF6
40EC:  MOVLW  02
40EE:  MOVWF  FF7
40F0:  CLRF   19
40F2:  BTFSC  FF2.7
40F4:  BSF    19.7
40F6:  BCF    FF2.7
40F8:  MOVLB  0
40FA:  CALL   08DE
40FE:  BTFSC  19.7
4100:  BSF    FF2.7
....................              printf(lcd_putc,"\n<<<    <>    >>>"); 
4102:  MOVLW  54
4104:  MOVWF  FF6
4106:  MOVLW  02
4108:  MOVWF  FF7
410A:  CLRF   19
410C:  BTFSC  FF2.7
410E:  BSF    19.7
4110:  BCF    FF2.7
4112:  CALL   08DE
4116:  BTFSC  19.7
4118:  BSF    FF2.7
....................              if(!input(btn2)){ 
411A:  BTFSC  F80.3
411C:  BRA    4142
411E:  CLRF   19
4120:  BTFSC  FF2.7
4122:  BSF    19.7
4124:  BCF    FF2.7
....................                 delay_ms(100); 
4126:  MOVLW  64
4128:  MOVLB  1
412A:  MOVWF  x86
412C:  MOVLB  0
412E:  CALL   0834
4132:  BTFSC  19.7
4134:  BSF    FF2.7
....................                 jtnTLayar(); 
4136:  GOTO   2766
....................                 btn=2; 
413A:  MOVLW  02
413C:  MOVLB  1
413E:  MOVWF  x5F
4140:  MOVLB  0
....................              } 
....................         } 
....................         if(btn==2){ 
4142:  MOVLB  1
4144:  MOVF   x5F,W
4146:  SUBLW  02
4148:  BNZ   41A2
....................             printf(lcd_putc,"\f ..Oyun Suresi.."); 
414A:  MOVLW  66
414C:  MOVWF  FF6
414E:  MOVLW  02
4150:  MOVWF  FF7
4152:  CLRF   19
4154:  BTFSC  FF2.7
4156:  BSF    19.7
4158:  BCF    FF2.7
415A:  MOVLB  0
415C:  CALL   08DE
4160:  BTFSC  19.7
4162:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
4164:  MOVLW  78
4166:  MOVWF  FF6
4168:  MOVLW  02
416A:  MOVWF  FF7
416C:  CLRF   19
416E:  BTFSC  FF2.7
4170:  BSF    19.7
4172:  BCF    FF2.7
4174:  CALL   08DE
4178:  BTFSC  19.7
417A:  BSF    FF2.7
....................             if(!input(btn2)){ 
417C:  BTFSC  F80.3
417E:  BRA    41A4
4180:  CLRF   19
4182:  BTFSC  FF2.7
4184:  BSF    19.7
4186:  BCF    FF2.7
....................                 delay_ms(100); 
4188:  MOVLW  64
418A:  MOVLB  1
418C:  MOVWF  x86
418E:  MOVLB  0
4190:  CALL   0834
4194:  BTFSC  19.7
4196:  BSF    FF2.7
....................                 oyunSureAyar(); 
4198:  GOTO   295E
....................                 btn=3; 
419C:  MOVLW  03
419E:  MOVLB  1
41A0:  MOVWF  x5F
41A2:  MOVLB  0
....................              } 
....................         } 
....................          if(btn==3){ 
41A4:  MOVLB  1
41A6:  MOVF   x5F,W
41A8:  SUBLW  03
41AA:  BNZ   420C
....................              printf(lcd_putc,"\f..SENS KALIBRE.."); 
41AC:  MOVLW  8A
41AE:  MOVWF  FF6
41B0:  MOVLW  02
41B2:  MOVWF  FF7
41B4:  CLRF   19
41B6:  BTFSC  FF2.7
41B8:  BSF    19.7
41BA:  BCF    FF2.7
41BC:  MOVLB  0
41BE:  CALL   08DE
41C2:  BTFSC  19.7
41C4:  BSF    FF2.7
....................              printf(lcd_putc,"\n<<<    <>    >>>"); 
41C6:  MOVLW  9C
41C8:  MOVWF  FF6
41CA:  MOVLW  02
41CC:  MOVWF  FF7
41CE:  CLRF   19
41D0:  BTFSC  FF2.7
41D2:  BSF    19.7
41D4:  BCF    FF2.7
41D6:  CALL   08DE
41DA:  BTFSC  19.7
41DC:  BSF    FF2.7
....................              if(!input(btn2)){ 
41DE:  BTFSC  F80.3
41E0:  BRA    420E
41E2:  CLRF   19
41E4:  BTFSC  FF2.7
41E6:  BSF    19.7
41E8:  BCF    FF2.7
....................                 delay_ms(100); 
41EA:  MOVLW  64
41EC:  MOVLB  1
41EE:  MOVWF  x86
41F0:  MOVLB  0
41F2:  CALL   0834
41F6:  BTFSC  19.7
41F8:  BSF    FF2.7
....................                 sensorKalibre(SENS_OKU_H_L); 
41FA:  MOVLW  4C
41FC:  MOVLB  1
41FE:  MOVWF  x60
4200:  MOVLB  0
4202:  GOTO   32A2
....................                 btn=4; 
4206:  MOVLW  04
4208:  MOVLB  1
420A:  MOVWF  x5F
420C:  MOVLB  0
....................              } 
....................         } 
....................         if(btn==4){ 
420E:  MOVLB  1
4210:  MOVF   x5F,W
4212:  SUBLW  04
4214:  BNZ   4276
....................              printf(lcd_putc,"\f ..Sensor Test.."); 
4216:  MOVLW  AE
4218:  MOVWF  FF6
421A:  MOVLW  02
421C:  MOVWF  FF7
421E:  CLRF   19
4220:  BTFSC  FF2.7
4222:  BSF    19.7
4224:  BCF    FF2.7
4226:  MOVLB  0
4228:  CALL   08DE
422C:  BTFSC  19.7
422E:  BSF    FF2.7
....................              printf(lcd_putc,"\n<<<    <>    >>>"); 
4230:  MOVLW  C0
4232:  MOVWF  FF6
4234:  MOVLW  02
4236:  MOVWF  FF7
4238:  CLRF   19
423A:  BTFSC  FF2.7
423C:  BSF    19.7
423E:  BCF    FF2.7
4240:  CALL   08DE
4244:  BTFSC  19.7
4246:  BSF    FF2.7
....................              if(!input(btn2)){ 
4248:  BTFSC  F80.3
424A:  BRA    4278
424C:  CLRF   19
424E:  BTFSC  FF2.7
4250:  BSF    19.7
4252:  BCF    FF2.7
....................                 delay_ms(100); 
4254:  MOVLW  64
4256:  MOVLB  1
4258:  MOVWF  x86
425A:  MOVLB  0
425C:  CALL   0834
4260:  BTFSC  19.7
4262:  BSF    FF2.7
....................                 sensorTest(SENS_OKU_H_L); 
4264:  MOVLW  4C
4266:  MOVLB  1
4268:  MOVWF  x60
426A:  MOVLB  0
426C:  GOTO   384E
....................                 btn=5; 
4270:  MOVLW  05
4272:  MOVLB  1
4274:  MOVWF  x5F
4276:  MOVLB  0
....................              } 
....................         } 
....................         if(btn==5){ 
4278:  MOVLB  1
427A:  MOVF   x5F,W
427C:  SUBLW  05
427E:  BNZ   42D8
....................             printf(lcd_putc,"\f .Motor Kurulum."); 
4280:  MOVLW  D2
4282:  MOVWF  FF6
4284:  MOVLW  02
4286:  MOVWF  FF7
4288:  CLRF   19
428A:  BTFSC  FF2.7
428C:  BSF    19.7
428E:  BCF    FF2.7
4290:  MOVLB  0
4292:  CALL   08DE
4296:  BTFSC  19.7
4298:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
429A:  MOVLW  E4
429C:  MOVWF  FF6
429E:  MOVLW  02
42A0:  MOVWF  FF7
42A2:  CLRF   19
42A4:  BTFSC  FF2.7
42A6:  BSF    19.7
42A8:  BCF    FF2.7
42AA:  CALL   08DE
42AE:  BTFSC  19.7
42B0:  BSF    FF2.7
....................              if(!input(btn2)){ 
42B2:  BTFSC  F80.3
42B4:  BRA    42DA
42B6:  CLRF   19
42B8:  BTFSC  FF2.7
42BA:  BSF    19.7
42BC:  BCF    FF2.7
....................                 delay_ms(100); 
42BE:  MOVLW  64
42C0:  MOVLB  1
42C2:  MOVWF  x86
42C4:  MOVLB  0
42C6:  CALL   0834
42CA:  BTFSC  19.7
42CC:  BSF    FF2.7
....................                 motorKurulum(); 
42CE:  GOTO   0004
....................                 btn=6; 
42D2:  MOVLW  06
42D4:  MOVLB  1
42D6:  MOVWF  x5F
42D8:  MOVLB  0
....................              } 
....................         } 
....................         if(btn==6){ 
42DA:  MOVLB  1
42DC:  MOVF   x5F,W
42DE:  SUBLW  06
42E0:  BNZ   433A
....................             printf(lcd_putc,"\f  ...Reset...  "); 
42E2:  MOVLW  F6
42E4:  MOVWF  FF6
42E6:  MOVLW  02
42E8:  MOVWF  FF7
42EA:  CLRF   19
42EC:  BTFSC  FF2.7
42EE:  BSF    19.7
42F0:  BCF    FF2.7
42F2:  MOVLB  0
42F4:  CALL   08DE
42F8:  BTFSC  19.7
42FA:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
42FC:  MOVLW  08
42FE:  MOVWF  FF6
4300:  MOVLW  03
4302:  MOVWF  FF7
4304:  CLRF   19
4306:  BTFSC  FF2.7
4308:  BSF    19.7
430A:  BCF    FF2.7
430C:  CALL   08DE
4310:  BTFSC  19.7
4312:  BSF    FF2.7
....................             if(!input(btn2)){ 
4314:  BTFSC  F80.3
4316:  BRA    433C
4318:  CLRF   19
431A:  BTFSC  FF2.7
431C:  BSF    19.7
431E:  BCF    FF2.7
....................                 delay_ms(100); 
4320:  MOVLW  64
4322:  MOVLB  1
4324:  MOVWF  x86
4326:  MOVLB  0
4328:  CALL   0834
432C:  BTFSC  19.7
432E:  BSF    FF2.7
....................                 resetIslemi(); 
4330:  GOTO   3AB6
....................                 btn=7; 
4334:  MOVLW  07
4336:  MOVLB  1
4338:  MOVWF  x5F
433A:  MOVLB  0
....................              } 
....................         } 
....................          if(btn==7){ 
433C:  MOVLB  1
433E:  MOVF   x5F,W
4340:  SUBLW  07
4342:  BNZ   439C
....................             printf(lcd_putc,"\f  ...SES...  "); 
4344:  MOVLW  1A
4346:  MOVWF  FF6
4348:  MOVLW  03
434A:  MOVWF  FF7
434C:  CLRF   19
434E:  BTFSC  FF2.7
4350:  BSF    19.7
4352:  BCF    FF2.7
4354:  MOVLB  0
4356:  CALL   08DE
435A:  BTFSC  19.7
435C:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
435E:  MOVLW  2A
4360:  MOVWF  FF6
4362:  MOVLW  03
4364:  MOVWF  FF7
4366:  CLRF   19
4368:  BTFSC  FF2.7
436A:  BSF    19.7
436C:  BCF    FF2.7
436E:  CALL   08DE
4372:  BTFSC  19.7
4374:  BSF    FF2.7
....................             if(!input(btn2)){ 
4376:  BTFSC  F80.3
4378:  BRA    439E
437A:  CLRF   19
437C:  BTFSC  FF2.7
437E:  BSF    19.7
4380:  BCF    FF2.7
....................                 delay_ms(100); 
4382:  MOVLW  64
4384:  MOVLB  1
4386:  MOVWF  x86
4388:  MOVLB  0
438A:  CALL   0834
438E:  BTFSC  19.7
4390:  BSF    FF2.7
....................                 sesAyar(); 
4392:  BRA    3BDA
....................                 btn=8; 
4394:  MOVLW  08
4396:  MOVLB  1
4398:  MOVWF  x5F
....................                 break; 
439A:  BRA    447A
439C:  MOVLB  0
....................             } 
....................         } 
....................          if(btn==8){ 
439E:  MOVLB  1
43A0:  MOVF   x5F,W
43A2:  SUBLW  08
43A4:  BNZ   43FE
....................             printf(lcd_putc,"\fSENS OKU SAYISI"); 
43A6:  MOVLW  3C
43A8:  MOVWF  FF6
43AA:  MOVLW  03
43AC:  MOVWF  FF7
43AE:  CLRF   19
43B0:  BTFSC  FF2.7
43B2:  BSF    19.7
43B4:  BCF    FF2.7
43B6:  MOVLB  0
43B8:  CALL   08DE
43BC:  BTFSC  19.7
43BE:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
43C0:  MOVLW  4E
43C2:  MOVWF  FF6
43C4:  MOVLW  03
43C6:  MOVWF  FF7
43C8:  CLRF   19
43CA:  BTFSC  FF2.7
43CC:  BSF    19.7
43CE:  BCF    FF2.7
43D0:  CALL   08DE
43D4:  BTFSC  19.7
43D6:  BSF    FF2.7
....................             if(!input(btn2)){ 
43D8:  BTFSC  F80.3
43DA:  BRA    4400
43DC:  CLRF   19
43DE:  BTFSC  FF2.7
43E0:  BSF    19.7
43E2:  BCF    FF2.7
....................                 delay_ms(100); 
43E4:  MOVLW  64
43E6:  MOVLB  1
43E8:  MOVWF  x86
43EA:  MOVLB  0
43EC:  CALL   0834
43F0:  BTFSC  19.7
43F2:  BSF    FF2.7
....................                 sensOkumaSayisiAyar(); 
43F4:  BRA    3DDA
....................                 btn=9; 
43F6:  MOVLW  09
43F8:  MOVLB  1
43FA:  MOVWF  x5F
....................                 break; 
43FC:  BRA    447A
43FE:  MOVLB  0
....................             } 
....................         } 
....................         if(btn==9){ 
4400:  MOVLB  1
4402:  MOVF   x5F,W
4404:  SUBLW  09
4406:  BNZ   445C
....................             printf(lcd_putc,"\f  ...CIKIS...  "); 
4408:  MOVLW  60
440A:  MOVWF  FF6
440C:  MOVLW  03
440E:  MOVWF  FF7
4410:  CLRF   19
4412:  BTFSC  FF2.7
4414:  BSF    19.7
4416:  BCF    FF2.7
4418:  MOVLB  0
441A:  CALL   08DE
441E:  BTFSC  19.7
4420:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
4422:  MOVLW  72
4424:  MOVWF  FF6
4426:  MOVLW  03
4428:  MOVWF  FF7
442A:  CLRF   19
442C:  BTFSC  FF2.7
442E:  BSF    19.7
4430:  BCF    FF2.7
4432:  CALL   08DE
4436:  BTFSC  19.7
4438:  BSF    FF2.7
....................             if(!input(btn2)){ 
443A:  BTFSC  F80.3
443C:  BRA    445E
443E:  CLRF   19
4440:  BTFSC  FF2.7
4442:  BSF    19.7
4444:  BCF    FF2.7
....................                 delay_ms(100); 
4446:  MOVLW  64
4448:  MOVLB  1
444A:  MOVWF  x86
444C:  MOVLB  0
444E:  CALL   0834
4452:  BTFSC  19.7
4454:  BSF    FF2.7
....................                 //lcd_putc("\fKOSTUR KART V1.0\n");  
....................                 //lcd_putc("jeton:11111 2TL"); 
....................                 enable_interrupts(INT_TIMER0); 
4456:  BSF    FF2.5
....................                 //output_low(lcd_led); 
....................                 break; 
4458:  MOVLB  1
445A:  BRA    447A
445C:  MOVLB  0
445E:  CLRF   19
4460:  BTFSC  FF2.7
4462:  BSF    19.7
4464:  BCF    FF2.7
....................             } 
....................         } 
....................  
....................        delay_ms(200); 
4466:  MOVLW  C8
4468:  MOVLB  1
446A:  MOVWF  x86
446C:  MOVLB  0
446E:  CALL   0834
4472:  BTFSC  19.7
4474:  BSF    FF2.7
4476:  BRA    4082
4478:  MOVLB  1
....................     }//while 
....................      
....................     printf(lcd_putc,"\fKOSTUR KART V1.0"); 
447A:  MOVLW  84
447C:  MOVWF  FF6
447E:  MOVLW  03
4480:  MOVWF  FF7
4482:  CLRF   19
4484:  BTFSC  FF2.7
4486:  BSF    19.7
4488:  BCF    FF2.7
448A:  MOVLB  0
448C:  CALL   08DE
4490:  BTFSC  19.7
4492:  BSF    FF2.7
....................     printf(lcd_putc,"\n    LYS-2019"); 
4494:  MOVLW  96
4496:  MOVWF  FF6
4498:  MOVLW  03
449A:  MOVWF  FF7
449C:  CLRF   19
449E:  BTFSC  FF2.7
44A0:  BSF    19.7
44A2:  BCF    FF2.7
44A4:  CALL   08DE
44A8:  BTFSC  19.7
44AA:  BSF    FF2.7
....................      
....................     delay_ms(1000); 
44AC:  MOVLW  04
44AE:  MOVLB  1
44B0:  MOVWF  x60
44B2:  CLRF   19
44B4:  BTFSC  FF2.7
44B6:  BSF    19.7
44B8:  BCF    FF2.7
44BA:  MOVLW  FA
44BC:  MOVWF  x86
44BE:  MOVLB  0
44C0:  CALL   0834
44C4:  BTFSC  19.7
44C6:  BSF    FF2.7
44C8:  MOVLB  1
44CA:  DECFSZ x60,F
44CC:  BRA    44B2
....................     reset_cpu(); 
44CE:  RESET
44D0:  MOVLB  0
44D2:  GOTO   5BB4 (RETURN)
.................... } 
....................  
.................... void sensOkumaSayisiAyar(void){ 
*
3DDA:  MOVLB  1
3DDC:  CLRF   x60
3DDE:  MOVLW  28
3DE0:  MOVWF  x61
....................     unsigned int8 okuma_sayisi=0; 
....................     unsigned int okuma_sayisi_ee_deger=40;      // saniyede 25 defa okuma 
....................       
....................      if(read_eeprom(ee_adr_sens_okuma_sayisi)!=0xFF)   
3DE2:  MOVFF  FF2,162
3DE6:  BCF    FF2.7
3DE8:  MOVLW  29
3DEA:  MOVWF  FA9
3DEC:  BCF    FA6.6
3DEE:  BCF    FA6.7
3DF0:  BSF    FA6.0
3DF2:  MOVF   FA8,W
3DF4:  BTFSC  x62.7
3DF6:  BSF    FF2.7
3DF8:  SUBLW  FF
3DFA:  BZ    3E30
....................             okuma_sayisi=(unsigned int8)(1000/read_eeprom(ee_adr_sens_okuma_sayisi)); 
3DFC:  MOVFF  FF2,162
3E00:  BCF    FF2.7
3E02:  MOVLW  29
3E04:  MOVWF  FA9
3E06:  BCF    FA6.6
3E08:  BCF    FA6.7
3E0A:  BSF    FA6.0
3E0C:  MOVF   FA8,W
3E0E:  BTFSC  x62.7
3E10:  BSF    FF2.7
3E12:  MOVWF  x63
3E14:  MOVLW  03
3E16:  MOVWF  x67
3E18:  MOVLW  E8
3E1A:  MOVWF  x66
3E1C:  CLRF   x69
3E1E:  MOVFF  163,168
3E22:  MOVLB  0
3E24:  CALL   0AFC
3E28:  MOVFF  01,160
3E2C:  BRA    3E36
3E2E:  MOVLB  1
....................      else   okuma_sayisi=25; 
3E30:  MOVLW  19
3E32:  MOVWF  x60
3E34:  MOVLB  0
....................      
....................     printf(lcd_putc,"\fSayi=%u\n",okuma_sayisi); 
3E36:  MOVLW  A4
3E38:  MOVWF  FF6
3E3A:  MOVLW  03
3E3C:  MOVWF  FF7
3E3E:  MOVLW  06
3E40:  MOVLB  1
3E42:  MOVWF  x69
3E44:  MOVLB  0
3E46:  CALL   0C0E
3E4A:  MOVFF  160,163
3E4E:  MOVLW  1B
3E50:  MOVLB  1
3E52:  MOVWF  x64
3E54:  MOVLB  0
3E56:  CALL   0B6E
3E5A:  CLRF   19
3E5C:  BTFSC  FF2.7
3E5E:  BSF    19.7
3E60:  BCF    FF2.7
3E62:  MOVLW  0A
3E64:  MOVLB  1
3E66:  MOVWF  x85
3E68:  MOVLB  0
3E6A:  CALL   0884
3E6E:  BTFSC  19.7
3E70:  BSF    FF2.7
....................     printf(lcd_putc,"\n<<<    <>    >>>"); 
3E72:  MOVLW  AE
3E74:  MOVWF  FF6
3E76:  MOVLW  03
3E78:  MOVWF  FF7
3E7A:  CLRF   19
3E7C:  BTFSC  FF2.7
3E7E:  BSF    19.7
3E80:  BCF    FF2.7
3E82:  CALL   08DE
3E86:  BTFSC  19.7
3E88:  BSF    FF2.7
....................     delay_ms(1000); 
3E8A:  MOVLW  04
3E8C:  MOVLB  1
3E8E:  MOVWF  x62
3E90:  CLRF   19
3E92:  BTFSC  FF2.7
3E94:  BSF    19.7
3E96:  BCF    FF2.7
3E98:  MOVLW  FA
3E9A:  MOVWF  x86
3E9C:  MOVLB  0
3E9E:  CALL   0834
3EA2:  BTFSC  19.7
3EA4:  BSF    FF2.7
3EA6:  MOVLB  1
3EA8:  DECFSZ x62,F
3EAA:  BRA    3E90
3EAC:  CLRF   19
3EAE:  BTFSC  FF2.7
3EB0:  BSF    19.7
3EB2:  BCF    FF2.7
....................      
....................     do{ 
....................         lcd_gotoxy(1,1); 
3EB4:  MOVLW  01
3EB6:  MOVWF  x86
3EB8:  MOVWF  x87
3EBA:  MOVLB  0
3EBC:  CALL   085E
3EC0:  BTFSC  19.7
3EC2:  BSF    FF2.7
....................         printf(lcd_putc,"\fSayi=%u\n",okuma_sayisi); 
3EC4:  MOVLW  C0
3EC6:  MOVWF  FF6
3EC8:  MOVLW  03
3ECA:  MOVWF  FF7
3ECC:  MOVLW  06
3ECE:  MOVLB  1
3ED0:  MOVWF  x69
3ED2:  MOVLB  0
3ED4:  CALL   0C0E
3ED8:  MOVFF  160,163
3EDC:  MOVLW  1B
3EDE:  MOVLB  1
3EE0:  MOVWF  x64
3EE2:  MOVLB  0
3EE4:  CALL   0B6E
3EE8:  CLRF   19
3EEA:  BTFSC  FF2.7
3EEC:  BSF    19.7
3EEE:  BCF    FF2.7
3EF0:  MOVLW  0A
3EF2:  MOVLB  1
3EF4:  MOVWF  x85
3EF6:  MOVLB  0
3EF8:  CALL   0884
3EFC:  BTFSC  19.7
3EFE:  BSF    FF2.7
....................         printf(lcd_putc,"\n<<<    <>    >>>"); 
3F00:  MOVLW  CA
3F02:  MOVWF  FF6
3F04:  MOVLW  03
3F06:  MOVWF  FF7
3F08:  CLRF   19
3F0A:  BTFSC  FF2.7
3F0C:  BSF    19.7
3F0E:  BCF    FF2.7
3F10:  CALL   08DE
3F14:  BTFSC  19.7
3F16:  BSF    FF2.7
....................         if(!input(btn1)){ 
3F18:  BTFSC  F80.5
3F1A:  BRA    3F44
3F1C:  CLRF   19
3F1E:  BTFSC  FF2.7
3F20:  BSF    19.7
3F22:  BCF    FF2.7
....................             delay_ms(100); 
3F24:  MOVLW  64
3F26:  MOVLB  1
3F28:  MOVWF  x86
3F2A:  MOVLB  0
3F2C:  CALL   0834
3F30:  BTFSC  19.7
3F32:  BSF    FF2.7
....................             okuma_sayisi--; 
3F34:  MOVLB  1
3F36:  DECF   x60,F
....................             if(okuma_sayisi<4) okuma_sayisi=4; 
3F38:  MOVF   x60,W
3F3A:  SUBLW  03
3F3C:  BNC   3F42
3F3E:  MOVLW  04
3F40:  MOVWF  x60
3F42:  MOVLB  0
....................         } 
....................         if(!input(btn3)){ 
3F44:  BTFSC  F80.2
3F46:  BRA    3F70
3F48:  CLRF   19
3F4A:  BTFSC  FF2.7
3F4C:  BSF    19.7
3F4E:  BCF    FF2.7
....................             delay_ms(100); 
3F50:  MOVLW  64
3F52:  MOVLB  1
3F54:  MOVWF  x86
3F56:  MOVLB  0
3F58:  CALL   0834
3F5C:  BTFSC  19.7
3F5E:  BSF    FF2.7
....................             okuma_sayisi++; 
3F60:  MOVLB  1
3F62:  INCF   x60,F
....................             if(okuma_sayisi>=100) okuma_sayisi=100; 
3F64:  MOVF   x60,W
3F66:  SUBLW  63
3F68:  BC    3F6E
3F6A:  MOVLW  64
3F6C:  MOVWF  x60
3F6E:  MOVLB  0
3F70:  CLRF   19
3F72:  BTFSC  FF2.7
3F74:  BSF    19.7
3F76:  BCF    FF2.7
....................         } 
....................         delay_ms(100); 
3F78:  MOVLW  64
3F7A:  MOVLB  1
3F7C:  MOVWF  x86
3F7E:  MOVLB  0
3F80:  CALL   0834
3F84:  BTFSC  19.7
3F86:  BSF    FF2.7
....................     } while(input(btn2)); 
3F88:  BTFSS  F80.3
3F8A:  BRA    3F90
3F8C:  MOVLB  1
3F8E:  BRA    3EAC
....................      
....................     okuma_sayisi_ee_deger=(unsigned int8)(1000/okuma_sayisi); 
3F90:  MOVLW  03
3F92:  MOVLB  1
3F94:  MOVWF  x67
3F96:  MOVLW  E8
3F98:  MOVWF  x66
3F9A:  CLRF   x69
3F9C:  MOVFF  160,168
3FA0:  MOVLB  0
3FA2:  CALL   0AFC
3FA6:  MOVFF  01,161
....................      
....................     //Kaydet ve çýk 
....................     write_eeprom(ee_adr_sens_okuma_sayisi,okuma_sayisi_ee_deger); 
3FAA:  MOVF   FF2,W
3FAC:  MOVWF  00
3FAE:  BCF    FF2.7
3FB0:  MOVLW  29
3FB2:  MOVWF  FA9
3FB4:  MOVFF  161,FA8
3FB8:  BCF    FA6.6
3FBA:  BCF    FA6.7
3FBC:  BSF    FA6.2
3FBE:  MOVLB  F
3FC0:  MOVLW  55
3FC2:  MOVWF  FA7
3FC4:  MOVLW  AA
3FC6:  MOVWF  FA7
3FC8:  BSF    FA6.1
3FCA:  BTFSC  FA6.1
3FCC:  BRA    3FCA
3FCE:  BCF    FA6.2
3FD0:  MOVF   00,W
3FD2:  IORWF  FF2,F
....................     time_sens_okuma_sayisi= okuma_sayisi_ee_deger; 
3FD4:  MOVFF  161,55
....................     
....................      printf(lcd_putc,"\f!! Kaydedildi !!"); 
3FD8:  MOVLW  DC
3FDA:  MOVWF  FF6
3FDC:  MOVLW  03
3FDE:  MOVWF  FF7
3FE0:  CLRF   19
3FE2:  BTFSC  FF2.7
3FE4:  BSF    19.7
3FE6:  BCF    FF2.7
3FE8:  MOVLB  0
3FEA:  CALL   08DE
3FEE:  BTFSC  19.7
3FF0:  BSF    FF2.7
....................      printf(lcd_putc,"\nSAYI:%u",(unsigned int8)(1000/time_sens_okuma_sayisi)); 
3FF2:  MOVLW  03
3FF4:  MOVLB  1
3FF6:  MOVWF  x67
3FF8:  MOVLW  E8
3FFA:  MOVWF  x66
3FFC:  CLRF   x69
3FFE:  MOVFF  55,168
4002:  MOVLB  0
4004:  CALL   0AFC
4008:  MOVFF  01,162
400C:  MOVLW  EE
400E:  MOVWF  FF6
4010:  MOVLW  03
4012:  MOVWF  FF7
4014:  MOVLW  06
4016:  MOVLB  1
4018:  MOVWF  x69
401A:  MOVLB  0
401C:  CALL   0C0E
4020:  MOVFF  162,163
4024:  MOVLW  1B
4026:  MOVLB  1
4028:  MOVWF  x64
402A:  MOVLB  0
402C:  CALL   0B6E
....................       
....................      delay_ms(1000); 
4030:  MOVLW  04
4032:  MOVLB  1
4034:  MOVWF  x62
4036:  CLRF   19
4038:  BTFSC  FF2.7
403A:  BSF    19.7
403C:  BCF    FF2.7
403E:  MOVLW  FA
4040:  MOVWF  x86
4042:  MOVLB  0
4044:  CALL   0834
4048:  BTFSC  19.7
404A:  BSF    FF2.7
404C:  MOVLB  1
404E:  DECFSZ x62,F
4050:  BRA    4036
4052:  MOVLB  0
4054:  GOTO   43F6 (RETURN)
....................      
.................... } 
....................  
.................... void sesAyar(void){ 
*
3BDA:  MOVLB  1
3BDC:  CLRF   x60
....................     int ses=0; 
....................      
....................     if(read_eeprom(ee_adres_dfSes)!=0xFF) ses=read_eeprom(ee_adres_dfSes); 
3BDE:  MOVFF  FF2,161
3BE2:  BCF    FF2.7
3BE4:  MOVLW  0C
3BE6:  MOVWF  FA9
3BE8:  BCF    FA6.6
3BEA:  BCF    FA6.7
3BEC:  BSF    FA6.0
3BEE:  MOVF   FA8,W
3BF0:  BTFSC  x61.7
3BF2:  BSF    FF2.7
3BF4:  SUBLW  FF
3BF6:  BZ    3C10
3BF8:  MOVFF  FF2,161
3BFC:  BCF    FF2.7
3BFE:  MOVLW  0C
3C00:  MOVWF  FA9
3C02:  BCF    FA6.6
3C04:  BCF    FA6.7
3C06:  BSF    FA6.0
3C08:  MOVF   FA8,W
3C0A:  BTFSC  x61.7
3C0C:  BSF    FF2.7
3C0E:  MOVWF  x60
....................      
....................     printf(lcd_putc,"\fSES=%u\n",ses); 
3C10:  MOVLW  F8
3C12:  MOVWF  FF6
3C14:  MOVLW  03
3C16:  MOVWF  FF7
3C18:  MOVLW  05
3C1A:  MOVWF  x69
3C1C:  MOVLB  0
3C1E:  CALL   0C0E
3C22:  MOVFF  160,163
3C26:  MOVLW  1B
3C28:  MOVLB  1
3C2A:  MOVWF  x64
3C2C:  MOVLB  0
3C2E:  CALL   0B6E
3C32:  CLRF   19
3C34:  BTFSC  FF2.7
3C36:  BSF    19.7
3C38:  BCF    FF2.7
3C3A:  MOVLW  0A
3C3C:  MOVLB  1
3C3E:  MOVWF  x85
3C40:  MOVLB  0
3C42:  CALL   0884
3C46:  BTFSC  19.7
3C48:  BSF    FF2.7
....................     printf(lcd_putc,"\n<<<    <>    >>>"); 
3C4A:  MOVLW  02
3C4C:  MOVWF  FF6
3C4E:  MOVLW  04
3C50:  MOVWF  FF7
3C52:  CLRF   19
3C54:  BTFSC  FF2.7
3C56:  BSF    19.7
3C58:  BCF    FF2.7
3C5A:  CALL   08DE
3C5E:  BTFSC  19.7
3C60:  BSF    FF2.7
....................     delay_ms(1000); 
3C62:  MOVLW  04
3C64:  MOVLB  1
3C66:  MOVWF  x61
3C68:  CLRF   19
3C6A:  BTFSC  FF2.7
3C6C:  BSF    19.7
3C6E:  BCF    FF2.7
3C70:  MOVLW  FA
3C72:  MOVWF  x86
3C74:  MOVLB  0
3C76:  CALL   0834
3C7A:  BTFSC  19.7
3C7C:  BSF    FF2.7
3C7E:  MOVLB  1
3C80:  DECFSZ x61,F
3C82:  BRA    3C68
3C84:  CLRF   19
3C86:  BTFSC  FF2.7
3C88:  BSF    19.7
3C8A:  BCF    FF2.7
....................      
....................     do{ 
....................         lcd_gotoxy(1,1); 
3C8C:  MOVLW  01
3C8E:  MOVWF  x86
3C90:  MOVWF  x87
3C92:  MOVLB  0
3C94:  CALL   085E
3C98:  BTFSC  19.7
3C9A:  BSF    FF2.7
....................         printf(lcd_putc,"\fSES=%u\n",ses); 
3C9C:  MOVLW  14
3C9E:  MOVWF  FF6
3CA0:  MOVLW  04
3CA2:  MOVWF  FF7
3CA4:  MOVLW  05
3CA6:  MOVLB  1
3CA8:  MOVWF  x69
3CAA:  MOVLB  0
3CAC:  CALL   0C0E
3CB0:  MOVFF  160,163
3CB4:  MOVLW  1B
3CB6:  MOVLB  1
3CB8:  MOVWF  x64
3CBA:  MOVLB  0
3CBC:  CALL   0B6E
3CC0:  CLRF   19
3CC2:  BTFSC  FF2.7
3CC4:  BSF    19.7
3CC6:  BCF    FF2.7
3CC8:  MOVLW  0A
3CCA:  MOVLB  1
3CCC:  MOVWF  x85
3CCE:  MOVLB  0
3CD0:  CALL   0884
3CD4:  BTFSC  19.7
3CD6:  BSF    FF2.7
....................         printf(lcd_putc,"\n<<<    <>    >>>"); 
3CD8:  MOVLW  1E
3CDA:  MOVWF  FF6
3CDC:  MOVLW  04
3CDE:  MOVWF  FF7
3CE0:  CLRF   19
3CE2:  BTFSC  FF2.7
3CE4:  BSF    19.7
3CE6:  BCF    FF2.7
3CE8:  CALL   08DE
3CEC:  BTFSC  19.7
3CEE:  BSF    FF2.7
....................         if(!input(btn1)){ 
3CF0:  BTFSC  F80.5
3CF2:  BRA    3D1A
3CF4:  CLRF   19
3CF6:  BTFSC  FF2.7
3CF8:  BSF    19.7
3CFA:  BCF    FF2.7
....................             delay_ms(100); 
3CFC:  MOVLW  64
3CFE:  MOVLB  1
3D00:  MOVWF  x86
3D02:  MOVLB  0
3D04:  CALL   0834
3D08:  BTFSC  19.7
3D0A:  BSF    FF2.7
....................             ses--; 
3D0C:  MOVLB  1
3D0E:  DECF   x60,F
....................             if(ses<1) ses=1; 
3D10:  MOVF   x60,F
3D12:  BNZ   3D18
3D14:  MOVLW  01
3D16:  MOVWF  x60
3D18:  MOVLB  0
....................         } 
....................         if(!input(btn3)){ 
3D1A:  BTFSC  F80.2
3D1C:  BRA    3D46
3D1E:  CLRF   19
3D20:  BTFSC  FF2.7
3D22:  BSF    19.7
3D24:  BCF    FF2.7
....................             delay_ms(100); 
3D26:  MOVLW  64
3D28:  MOVLB  1
3D2A:  MOVWF  x86
3D2C:  MOVLB  0
3D2E:  CALL   0834
3D32:  BTFSC  19.7
3D34:  BSF    FF2.7
....................             ses++; 
3D36:  MOVLB  1
3D38:  INCF   x60,F
....................             if(ses>=30) ses=1; 
3D3A:  MOVF   x60,W
3D3C:  SUBLW  1D
3D3E:  BC    3D44
3D40:  MOVLW  01
3D42:  MOVWF  x60
3D44:  MOVLB  0
3D46:  CLRF   19
3D48:  BTFSC  FF2.7
3D4A:  BSF    19.7
3D4C:  BCF    FF2.7
....................         } 
....................         delay_ms(100); 
3D4E:  MOVLW  64
3D50:  MOVLB  1
3D52:  MOVWF  x86
3D54:  MOVLB  0
3D56:  CALL   0834
3D5A:  BTFSC  19.7
3D5C:  BSF    FF2.7
....................     } while(input(btn2)); 
3D5E:  BTFSS  F80.3
3D60:  BRA    3D66
3D62:  MOVLB  1
3D64:  BRA    3C84
....................      
....................     //Kaydet ve çýk 
....................      write_eeprom(ee_adres_dfSes,ses); 
3D66:  MOVF   FF2,W
3D68:  MOVWF  00
3D6A:  BCF    FF2.7
3D6C:  MOVLW  0C
3D6E:  MOVWF  FA9
3D70:  MOVFF  160,FA8
3D74:  BCF    FA6.6
3D76:  BCF    FA6.7
3D78:  BSF    FA6.2
3D7A:  MOVLB  F
3D7C:  MOVLW  55
3D7E:  MOVWF  FA7
3D80:  MOVLW  AA
3D82:  MOVWF  FA7
3D84:  BSF    FA6.1
3D86:  BTFSC  FA6.1
3D88:  BRA    3D86
3D8A:  BCF    FA6.2
3D8C:  MOVF   00,W
3D8E:  IORWF  FF2,F
....................      mp3_set_volume (ses); 
3D90:  MOVFF  160,165
3D94:  MOVLB  0
3D96:  CALL   1182
....................      printf(lcd_putc,"\f!! Kaydedildi !!"); 
3D9A:  MOVLW  30
3D9C:  MOVWF  FF6
3D9E:  MOVLW  04
3DA0:  MOVWF  FF7
3DA2:  CLRF   19
3DA4:  BTFSC  FF2.7
3DA6:  BSF    19.7
3DA8:  BCF    FF2.7
3DAA:  CALL   08DE
3DAE:  BTFSC  19.7
3DB0:  BSF    FF2.7
....................       
....................      delay_ms(1000); 
3DB2:  MOVLW  04
3DB4:  MOVLB  1
3DB6:  MOVWF  x61
3DB8:  CLRF   19
3DBA:  BTFSC  FF2.7
3DBC:  BSF    19.7
3DBE:  BCF    FF2.7
3DC0:  MOVLW  FA
3DC2:  MOVWF  x86
3DC4:  MOVLB  0
3DC6:  CALL   0834
3DCA:  BTFSC  19.7
3DCC:  BSF    FF2.7
3DCE:  MOVLB  1
3DD0:  DECFSZ x61,F
3DD2:  BRA    3DB8
3DD4:  MOVLB  0
3DD6:  GOTO   4394 (RETURN)
....................      
.................... } 
.................... void jtnTLayar(void){ 
*
2766:  MOVLB  1
2768:  CLRF   x60
....................     int jtn=0; 
....................     if(read_eeprom(ee_adres_jtnTL)!=0xFF) jtn=read_eeprom(ee_adres_jtnTL);  
276A:  MOVFF  FF2,161
276E:  BCF    FF2.7
2770:  MOVLW  04
2772:  MOVWF  FA9
2774:  BCF    FA6.6
2776:  BCF    FA6.7
2778:  BSF    FA6.0
277A:  MOVF   FA8,W
277C:  BTFSC  x61.7
277E:  BSF    FF2.7
2780:  SUBLW  FF
2782:  BZ    279C
2784:  MOVFF  FF2,161
2788:  BCF    FF2.7
278A:  MOVLW  04
278C:  MOVWF  FA9
278E:  BCF    FA6.6
2790:  BCF    FA6.7
2792:  BSF    FA6.0
2794:  MOVF   FA8,W
2796:  BTFSC  x61.7
2798:  BSF    FF2.7
279A:  MOVWF  x60
....................          
....................     printf(lcd_putc,"\fjtn TL=%u\n",jtn); 
279C:  MOVLW  42
279E:  MOVWF  FF6
27A0:  MOVLW  04
27A2:  MOVWF  FF7
27A4:  MOVLW  08
27A6:  MOVWF  x69
27A8:  MOVLB  0
27AA:  CALL   0C0E
27AE:  MOVFF  160,163
27B2:  MOVLW  1B
27B4:  MOVLB  1
27B6:  MOVWF  x64
27B8:  MOVLB  0
27BA:  CALL   0B6E
27BE:  CLRF   19
27C0:  BTFSC  FF2.7
27C2:  BSF    19.7
27C4:  BCF    FF2.7
27C6:  MOVLW  0A
27C8:  MOVLB  1
27CA:  MOVWF  x85
27CC:  MOVLB  0
27CE:  CALL   0884
27D2:  BTFSC  19.7
27D4:  BSF    FF2.7
....................     printf(lcd_putc,"\n<<<    <>    >>>"); 
27D6:  MOVLW  4E
27D8:  MOVWF  FF6
27DA:  MOVLW  04
27DC:  MOVWF  FF7
27DE:  CLRF   19
27E0:  BTFSC  FF2.7
27E2:  BSF    19.7
27E4:  BCF    FF2.7
27E6:  CALL   08DE
27EA:  BTFSC  19.7
27EC:  BSF    FF2.7
....................     delay_ms(1000); 
27EE:  MOVLW  04
27F0:  MOVLB  1
27F2:  MOVWF  x61
27F4:  CLRF   19
27F6:  BTFSC  FF2.7
27F8:  BSF    19.7
27FA:  BCF    FF2.7
27FC:  MOVLW  FA
27FE:  MOVWF  x86
2800:  MOVLB  0
2802:  CALL   0834
2806:  BTFSC  19.7
2808:  BSF    FF2.7
280A:  MOVLB  1
280C:  DECFSZ x61,F
280E:  BRA    27F4
2810:  CLRF   19
2812:  BTFSC  FF2.7
2814:  BSF    19.7
2816:  BCF    FF2.7
....................     do{ 
....................         lcd_gotoxy(1,1); 
2818:  MOVLW  01
281A:  MOVWF  x86
281C:  MOVWF  x87
281E:  MOVLB  0
2820:  CALL   085E
2824:  BTFSC  19.7
2826:  BSF    FF2.7
....................         printf(lcd_putc,"\fjtn TL=%u\n",jtn); 
2828:  MOVLW  60
282A:  MOVWF  FF6
282C:  MOVLW  04
282E:  MOVWF  FF7
2830:  MOVLW  08
2832:  MOVLB  1
2834:  MOVWF  x69
2836:  MOVLB  0
2838:  CALL   0C0E
283C:  MOVFF  160,163
2840:  MOVLW  1B
2842:  MOVLB  1
2844:  MOVWF  x64
2846:  MOVLB  0
2848:  CALL   0B6E
284C:  CLRF   19
284E:  BTFSC  FF2.7
2850:  BSF    19.7
2852:  BCF    FF2.7
2854:  MOVLW  0A
2856:  MOVLB  1
2858:  MOVWF  x85
285A:  MOVLB  0
285C:  CALL   0884
2860:  BTFSC  19.7
2862:  BSF    FF2.7
....................         printf(lcd_putc,"\n<<<    <>    >>>"); 
2864:  MOVLW  6C
2866:  MOVWF  FF6
2868:  MOVLW  04
286A:  MOVWF  FF7
286C:  CLRF   19
286E:  BTFSC  FF2.7
2870:  BSF    19.7
2872:  BCF    FF2.7
2874:  CALL   08DE
2878:  BTFSC  19.7
287A:  BSF    FF2.7
....................         if(!input(btn1)){ 
287C:  BTFSC  F80.5
287E:  BRA    28A6
2880:  CLRF   19
2882:  BTFSC  FF2.7
2884:  BSF    19.7
2886:  BCF    FF2.7
....................             delay_ms(100); 
2888:  MOVLW  64
288A:  MOVLB  1
288C:  MOVWF  x86
288E:  MOVLB  0
2890:  CALL   0834
2894:  BTFSC  19.7
2896:  BSF    FF2.7
....................             jtn--; 
2898:  MOVLB  1
289A:  DECF   x60,F
....................             if(jtn<1) jtn=1; 
289C:  MOVF   x60,F
289E:  BNZ   28A4
28A0:  MOVLW  01
28A2:  MOVWF  x60
28A4:  MOVLB  0
....................         } 
....................         if(!input(btn3)){ 
28A6:  BTFSC  F80.2
28A8:  BRA    28D2
28AA:  CLRF   19
28AC:  BTFSC  FF2.7
28AE:  BSF    19.7
28B0:  BCF    FF2.7
....................             delay_ms(100); 
28B2:  MOVLW  64
28B4:  MOVLB  1
28B6:  MOVWF  x86
28B8:  MOVLB  0
28BA:  CALL   0834
28BE:  BTFSC  19.7
28C0:  BSF    FF2.7
....................             jtn++; 
28C2:  MOVLB  1
28C4:  INCF   x60,F
....................             if(jtn>10) jtn=10; 
28C6:  MOVF   x60,W
28C8:  SUBLW  0A
28CA:  BC    28D0
28CC:  MOVLW  0A
28CE:  MOVWF  x60
28D0:  MOVLB  0
28D2:  CLRF   19
28D4:  BTFSC  FF2.7
28D6:  BSF    19.7
28D8:  BCF    FF2.7
....................         } 
....................         delay_ms(100); 
28DA:  MOVLW  64
28DC:  MOVLB  1
28DE:  MOVWF  x86
28E0:  MOVLB  0
28E2:  CALL   0834
28E6:  BTFSC  19.7
28E8:  BSF    FF2.7
....................     } while(input(btn2)); 
28EA:  BTFSS  F80.3
28EC:  BRA    28F2
28EE:  MOVLB  1
28F0:  BRA    2810
....................     //Kaydet ve çýk 
....................      write_eeprom(ee_adres_jtnTL,jtn); 
28F2:  MOVF   FF2,W
28F4:  MOVWF  00
28F6:  BCF    FF2.7
28F8:  MOVLW  04
28FA:  MOVWF  FA9
28FC:  MOVFF  160,FA8
2900:  BCF    FA6.6
2902:  BCF    FA6.7
2904:  BSF    FA6.2
2906:  MOVLB  F
2908:  MOVLW  55
290A:  MOVWF  FA7
290C:  MOVLW  AA
290E:  MOVWF  FA7
2910:  BSF    FA6.1
2912:  BTFSC  FA6.1
2914:  BRA    2912
2916:  BCF    FA6.2
2918:  MOVF   00,W
291A:  IORWF  FF2,F
....................      printf(lcd_putc,"\f!! Kaydedildi !!"); 
291C:  MOVLW  7E
291E:  MOVWF  FF6
2920:  MOVLW  04
2922:  MOVWF  FF7
2924:  CLRF   19
2926:  BTFSC  FF2.7
2928:  BSF    19.7
292A:  BCF    FF2.7
292C:  MOVLB  0
292E:  CALL   08DE
2932:  BTFSC  19.7
2934:  BSF    FF2.7
....................       
....................      delay_ms(1000); 
2936:  MOVLW  04
2938:  MOVLB  1
293A:  MOVWF  x61
293C:  CLRF   19
293E:  BTFSC  FF2.7
2940:  BSF    19.7
2942:  BCF    FF2.7
2944:  MOVLW  FA
2946:  MOVWF  x86
2948:  MOVLB  0
294A:  CALL   0834
294E:  BTFSC  19.7
2950:  BSF    FF2.7
2952:  MOVLB  1
2954:  DECFSZ x61,F
2956:  BRA    293C
2958:  MOVLB  0
295A:  GOTO   413A (RETURN)
....................      
.................... } 
....................  
.................... void oyunSureAyar(void){ 
295E:  MOVLW  02
2960:  MOVLB  1
2962:  MOVWF  x60
....................      
....................     int sure=2; 
....................     if(read_eeprom(ee_adres_oyunSure)!=0xFF) sure=read_eeprom(ee_adres_oyunSure);  
2964:  MOVFF  FF2,161
2968:  BCF    FF2.7
296A:  MOVLW  0B
296C:  MOVWF  FA9
296E:  BCF    FA6.6
2970:  BCF    FA6.7
2972:  BSF    FA6.0
2974:  MOVF   FA8,W
2976:  BTFSC  x61.7
2978:  BSF    FF2.7
297A:  SUBLW  FF
297C:  BZ    2996
297E:  MOVFF  FF2,161
2982:  BCF    FF2.7
2984:  MOVLW  0B
2986:  MOVWF  FA9
2988:  BCF    FA6.6
298A:  BCF    FA6.7
298C:  BSF    FA6.0
298E:  MOVF   FA8,W
2990:  BTFSC  x61.7
2992:  BSF    FF2.7
2994:  MOVWF  x60
....................          
....................     printf(lcd_putc,"\fOyun Sure=%u dk",sure); 
2996:  MOVLW  90
2998:  MOVWF  FF6
299A:  MOVLW  04
299C:  MOVWF  FF7
299E:  MOVLW  0B
29A0:  MOVWF  x69
29A2:  MOVLB  0
29A4:  CALL   0C0E
29A8:  MOVFF  160,163
29AC:  MOVLW  1B
29AE:  MOVLB  1
29B0:  MOVWF  x64
29B2:  MOVLB  0
29B4:  CALL   0B6E
29B8:  MOVLW  9D
29BA:  MOVWF  FF6
29BC:  MOVLW  04
29BE:  MOVWF  FF7
29C0:  MOVLW  03
29C2:  MOVLB  1
29C4:  MOVWF  x69
29C6:  MOVLB  0
29C8:  CALL   0C0E
....................     printf(lcd_putc,"\n<<<    <>    >>>"); 
29CC:  MOVLW  A2
29CE:  MOVWF  FF6
29D0:  MOVLW  04
29D2:  MOVWF  FF7
29D4:  CLRF   19
29D6:  BTFSC  FF2.7
29D8:  BSF    19.7
29DA:  BCF    FF2.7
29DC:  CALL   08DE
29E0:  BTFSC  19.7
29E2:  BSF    FF2.7
....................     delay_ms(1000); 
29E4:  MOVLW  04
29E6:  MOVLB  1
29E8:  MOVWF  x61
29EA:  CLRF   19
29EC:  BTFSC  FF2.7
29EE:  BSF    19.7
29F0:  BCF    FF2.7
29F2:  MOVLW  FA
29F4:  MOVWF  x86
29F6:  MOVLB  0
29F8:  CALL   0834
29FC:  BTFSC  19.7
29FE:  BSF    FF2.7
2A00:  MOVLB  1
2A02:  DECFSZ x61,F
2A04:  BRA    29EA
2A06:  CLRF   19
2A08:  BTFSC  FF2.7
2A0A:  BSF    19.7
2A0C:  BCF    FF2.7
....................     do{ 
....................         lcd_gotoxy(1,1); 
2A0E:  MOVLW  01
2A10:  MOVWF  x86
2A12:  MOVWF  x87
2A14:  MOVLB  0
2A16:  CALL   085E
2A1A:  BTFSC  19.7
2A1C:  BSF    FF2.7
....................         printf(lcd_putc,"\fOyun Sure=%u dk",sure); 
2A1E:  MOVLW  B4
2A20:  MOVWF  FF6
2A22:  MOVLW  04
2A24:  MOVWF  FF7
2A26:  MOVLW  0B
2A28:  MOVLB  1
2A2A:  MOVWF  x69
2A2C:  MOVLB  0
2A2E:  CALL   0C0E
2A32:  MOVFF  160,163
2A36:  MOVLW  1B
2A38:  MOVLB  1
2A3A:  MOVWF  x64
2A3C:  MOVLB  0
2A3E:  CALL   0B6E
2A42:  MOVLW  C1
2A44:  MOVWF  FF6
2A46:  MOVLW  04
2A48:  MOVWF  FF7
2A4A:  MOVLW  03
2A4C:  MOVLB  1
2A4E:  MOVWF  x69
2A50:  MOVLB  0
2A52:  CALL   0C0E
....................         printf(lcd_putc,"\n<<<    <>    >>>"); 
2A56:  MOVLW  C6
2A58:  MOVWF  FF6
2A5A:  MOVLW  04
2A5C:  MOVWF  FF7
2A5E:  CLRF   19
2A60:  BTFSC  FF2.7
2A62:  BSF    19.7
2A64:  BCF    FF2.7
2A66:  CALL   08DE
2A6A:  BTFSC  19.7
2A6C:  BSF    FF2.7
....................         if(!input(btn1)){ 
2A6E:  BTFSC  F80.5
2A70:  BRA    2A9A
2A72:  CLRF   19
2A74:  BTFSC  FF2.7
2A76:  BSF    19.7
2A78:  BCF    FF2.7
....................             delay_ms(100); 
2A7A:  MOVLW  64
2A7C:  MOVLB  1
2A7E:  MOVWF  x86
2A80:  MOVLB  0
2A82:  CALL   0834
2A86:  BTFSC  19.7
2A88:  BSF    FF2.7
....................             sure--; 
2A8A:  MOVLB  1
2A8C:  DECF   x60,F
....................             if(sure<2) sure=2; 
2A8E:  MOVF   x60,W
2A90:  SUBLW  01
2A92:  BNC   2A98
2A94:  MOVLW  02
2A96:  MOVWF  x60
2A98:  MOVLB  0
....................         } 
....................         if(!input(btn3)){ 
2A9A:  BTFSC  F80.2
2A9C:  BRA    2AC6
2A9E:  CLRF   19
2AA0:  BTFSC  FF2.7
2AA2:  BSF    19.7
2AA4:  BCF    FF2.7
....................             delay_ms(100); 
2AA6:  MOVLW  64
2AA8:  MOVLB  1
2AAA:  MOVWF  x86
2AAC:  MOVLB  0
2AAE:  CALL   0834
2AB2:  BTFSC  19.7
2AB4:  BSF    FF2.7
....................             sure++; 
2AB6:  MOVLB  1
2AB8:  INCF   x60,F
....................             if(sure>25) sure=25; 
2ABA:  MOVF   x60,W
2ABC:  SUBLW  19
2ABE:  BC    2AC4
2AC0:  MOVLW  19
2AC2:  MOVWF  x60
2AC4:  MOVLB  0
2AC6:  CLRF   19
2AC8:  BTFSC  FF2.7
2ACA:  BSF    19.7
2ACC:  BCF    FF2.7
....................         } 
....................         delay_ms(100); 
2ACE:  MOVLW  64
2AD0:  MOVLB  1
2AD2:  MOVWF  x86
2AD4:  MOVLB  0
2AD6:  CALL   0834
2ADA:  BTFSC  19.7
2ADC:  BSF    FF2.7
....................     } while(input(btn2)); 
2ADE:  BTFSS  F80.3
2AE0:  BRA    2AE6
2AE2:  MOVLB  1
2AE4:  BRA    2A06
....................     //Kaydet ve çýk 
....................      write_eeprom(ee_adres_oyunSure,sure); 
2AE6:  MOVF   FF2,W
2AE8:  MOVWF  00
2AEA:  BCF    FF2.7
2AEC:  MOVLW  0B
2AEE:  MOVWF  FA9
2AF0:  MOVFF  160,FA8
2AF4:  BCF    FA6.6
2AF6:  BCF    FA6.7
2AF8:  BSF    FA6.2
2AFA:  MOVLB  F
2AFC:  MOVLW  55
2AFE:  MOVWF  FA7
2B00:  MOVLW  AA
2B02:  MOVWF  FA7
2B04:  BSF    FA6.1
2B06:  BTFSC  FA6.1
2B08:  BRA    2B06
2B0A:  BCF    FA6.2
2B0C:  MOVF   00,W
2B0E:  IORWF  FF2,F
....................      printf(lcd_putc,"\f!! Kaydedildi !!"); 
2B10:  MOVLW  D8
2B12:  MOVWF  FF6
2B14:  MOVLW  04
2B16:  MOVWF  FF7
2B18:  CLRF   19
2B1A:  BTFSC  FF2.7
2B1C:  BSF    19.7
2B1E:  BCF    FF2.7
2B20:  MOVLB  0
2B22:  CALL   08DE
2B26:  BTFSC  19.7
2B28:  BSF    FF2.7
....................      ee_oyunSure=sure; 
2B2A:  MOVFF  160,86
....................      delay_ms(1000); 
2B2E:  MOVLW  04
2B30:  MOVLB  1
2B32:  MOVWF  x61
2B34:  CLRF   19
2B36:  BTFSC  FF2.7
2B38:  BSF    19.7
2B3A:  BCF    FF2.7
2B3C:  MOVLW  FA
2B3E:  MOVWF  x86
2B40:  MOVLB  0
2B42:  CALL   0834
2B46:  BTFSC  19.7
2B48:  BSF    FF2.7
2B4A:  MOVLB  1
2B4C:  DECFSZ x61,F
2B4E:  BRA    2B34
2B50:  MOVLB  0
2B52:  GOTO   419C (RETURN)
....................      
.................... } 
....................  
....................  
.................... const float ADC_ADIM=(float)(5.0/1023.0); 
.................... void sensorKalibre(char sensorHL){ 
*
32A2:  MOVLB  1
32A4:  CLRF   x61
32A6:  CLRF   x63
32A8:  CLRF   x62
32AA:  CLRF   x64
....................   
....................     signed int sens =0; 
....................     unsigned int16 an_deger=0; 
....................     int i=0; 
....................     hc_595_clr_allPins(); 
32AC:  CLRF   x6C
32AE:  CLRF   x6D
32B0:  CLRF   x6E
32B2:  MOVLB  0
32B4:  CALL   092A
....................     mp3_stop(); 
32B8:  CALL   11A8
....................     dfPlayerNormSes(); 
32BC:  MOVLW  14
32BE:  MOVLB  1
32C0:  MOVWF  x65
32C2:  MOVLB  0
32C4:  CALL   1182
32C8:  CLRF   19
32CA:  BTFSC  FF2.7
32CC:  BSF    19.7
32CE:  BCF    FF2.7
32D0:  MOVLW  64
32D2:  MOVLB  1
32D4:  MOVWF  x86
32D6:  MOVLB  0
32D8:  CALL   0834
32DC:  BTFSC  19.7
32DE:  BSF    FF2.7
....................     
....................     motor3_ileri(); 
32E0:  BSF    46.4
32E2:  BCF    46.5
32E4:  MOVFF  46,16C
32E8:  MOVFF  47,16D
32EC:  MOVFF  48,16E
32F0:  CALL   092A
....................     delay_ms(500); 
32F4:  MOVLW  02
32F6:  MOVLB  1
32F8:  MOVWF  x65
32FA:  CLRF   19
32FC:  BTFSC  FF2.7
32FE:  BSF    19.7
3300:  BCF    FF2.7
3302:  MOVLW  FA
3304:  MOVWF  x86
3306:  MOVLB  0
3308:  CALL   0834
330C:  BTFSC  19.7
330E:  BSF    FF2.7
3310:  MOVLB  1
3312:  DECFSZ x65,F
3314:  BRA    32FA
....................     motor3_dur(); 
3316:  BCF    46.4
3318:  BCF    46.5
331A:  MOVFF  46,16C
331E:  MOVFF  47,16D
3322:  MOVFF  48,16E
3326:  MOVLB  0
3328:  CALL   092A
....................      
....................     an_max_min_reset(); 
332C:  CALL   12AC
....................     an_max_adc_oku(); 
3330:  RCALL  2B56
....................      
....................    printf(lcd_putc,"\fSENS deger icin,"); 
3332:  MOVLW  EA
3334:  MOVWF  FF6
3336:  MOVLW  04
3338:  MOVWF  FF7
333A:  CLRF   19
333C:  BTFSC  FF2.7
333E:  BSF    19.7
3340:  BCF    FF2.7
3342:  CALL   08DE
3346:  BTFSC  19.7
3348:  BSF    FF2.7
....................    printf(lcd_putc,"\ntop atin..."); 
334A:  MOVLW  FC
334C:  MOVWF  FF6
334E:  MOVLW  04
3350:  MOVWF  FF7
3352:  CLRF   19
3354:  BTFSC  FF2.7
3356:  BSF    19.7
3358:  BCF    FF2.7
335A:  CALL   08DE
335E:  BTFSC  19.7
3360:  BSF    FF2.7
....................     
....................     do{ 
....................          
....................          sw_sa_algila=swSaAlgila(SENS_OKU_H_L);   //yaklaþýk (100us*16)*6=10mS iþlem süresi 
3362:  MOVLW  4C
3364:  MOVLB  1
3366:  MOVWF  x65
3368:  MOVLB  0
336A:  CALL   1986
336E:  MOVFF  01,4E
....................           
....................          if(sw_sa_algila!=0xFF) 
3372:  INCFSZ 4E,W
3374:  BRA    3378
3376:  BRA    345E
....................          {        
....................             sw_ses_oynat(sw_sa_algila); 
3378:  MOVFF  4E,165
337C:  CALL   20A8
....................              
....................             printf(lcd_putc,"\fSENS: %lu ",last_adc_deger); 
3380:  MOVLW  0A
3382:  MOVWF  FF6
3384:  MOVLW  05
3386:  MOVWF  FF7
3388:  MOVLW  07
338A:  MOVLB  1
338C:  MOVWF  x69
338E:  MOVLB  0
3390:  CALL   0C0E
3394:  MOVLW  10
3396:  MOVWF  FE9
3398:  MOVFF  50,167
339C:  MOVFF  4F,166
33A0:  CALL   12F4
33A4:  CLRF   19
33A6:  BTFSC  FF2.7
33A8:  BSF    19.7
33AA:  BCF    FF2.7
33AC:  MOVLW  20
33AE:  MOVLB  1
33B0:  MOVWF  x85
33B2:  MOVLB  0
33B4:  CALL   0884
33B8:  BTFSC  19.7
33BA:  BSF    FF2.7
....................             printf(lcd_putc,"\nSENS: %1.2f V",last_adc_deger*ADC_ADIM); 
33BC:  MOVFF  50,166
33C0:  MOVFF  4F,165
33C4:  RCALL  2F50
33C6:  MOVFF  03,179
33CA:  MOVFF  02,178
33CE:  MOVFF  01,177
33D2:  MOVFF  00,176
33D6:  MOVLW  0A
33D8:  MOVLB  1
33DA:  MOVWF  x7D
33DC:  MOVLW  28
33DE:  MOVWF  x7C
33E0:  MOVLW  20
33E2:  MOVWF  x7B
33E4:  MOVLW  77
33E6:  MOVWF  x7A
33E8:  MOVLB  0
33EA:  RCALL  2F86
33EC:  MOVFF  03,168
33F0:  MOVFF  02,167
33F4:  MOVFF  01,166
33F8:  MOVFF  00,165
33FC:  MOVLW  16
33FE:  MOVWF  FF6
3400:  MOVLW  05
3402:  MOVWF  FF7
3404:  MOVLW  07
3406:  MOVLB  1
3408:  MOVWF  x69
340A:  MOVLB  0
340C:  CALL   0C0E
3410:  MOVLW  89
3412:  MOVWF  FE9
3414:  MOVFF  168,16C
3418:  MOVFF  167,16B
341C:  MOVFF  166,16A
3420:  MOVFF  165,169
3424:  MOVLW  02
3426:  MOVLB  1
3428:  MOVWF  x6D
342A:  MOVLB  0
342C:  RCALL  30C0
342E:  CLRF   19
3430:  BTFSC  FF2.7
3432:  BSF    19.7
3434:  BCF    FF2.7
3436:  MOVLW  20
3438:  MOVLB  1
343A:  MOVWF  x85
343C:  MOVLB  0
343E:  CALL   0884
3442:  BTFSC  19.7
3444:  BSF    FF2.7
3446:  CLRF   19
3448:  BTFSC  FF2.7
344A:  BSF    19.7
344C:  BCF    FF2.7
344E:  MOVLW  56
3450:  MOVLB  1
3452:  MOVWF  x85
3454:  MOVLB  0
3456:  CALL   0884
345A:  BTFSC  19.7
345C:  BSF    FF2.7
....................          } 
....................         if(!input(btn2)){ 
345E:  BTFSC  F80.3
3460:  BRA    3488
....................             delay_ms(500); 
3462:  MOVLW  02
3464:  MOVLB  1
3466:  MOVWF  x65
3468:  CLRF   19
346A:  BTFSC  FF2.7
346C:  BSF    19.7
346E:  BCF    FF2.7
3470:  MOVLW  FA
3472:  MOVWF  x86
3474:  MOVLB  0
3476:  CALL   0834
347A:  BTFSC  19.7
347C:  BSF    FF2.7
347E:  MOVLB  1
3480:  DECFSZ x65,F
3482:  BRA    3468
....................             break; 
3484:  BRA    34A4
3486:  MOVLB  0
3488:  CLRF   19
348A:  BTFSC  FF2.7
348C:  BSF    19.7
348E:  BCF    FF2.7
....................          } 
....................         
....................        
....................         delay_ms(25); 
3490:  MOVLW  19
3492:  MOVLB  1
3494:  MOVWF  x86
3496:  MOVLB  0
3498:  CALL   0834
349C:  BTFSC  19.7
349E:  BSF    FF2.7
....................          
....................     }while(1); 
34A0:  BRA    3362
34A2:  MOVLB  1
....................      
....................     an_deger=an_max_ort;   
34A4:  MOVFF  B2,163
34A8:  MOVFF  B1,162
....................     printf(lcd_putc,"\fMAX ve MIN"); 
34AC:  MOVLW  26
34AE:  MOVWF  FF6
34B0:  MOVLW  05
34B2:  MOVWF  FF7
34B4:  CLRF   19
34B6:  BTFSC  FF2.7
34B8:  BSF    19.7
34BA:  BCF    FF2.7
34BC:  MOVLB  0
34BE:  CALL   08DE
34C2:  BTFSC  19.7
34C4:  BSF    FF2.7
....................     printf(lcd_putc,"\nbelirleyin..."); 
34C6:  MOVLW  32
34C8:  MOVWF  FF6
34CA:  MOVLW  05
34CC:  MOVWF  FF7
34CE:  CLRF   19
34D0:  BTFSC  FF2.7
34D2:  BSF    19.7
34D4:  BCF    FF2.7
34D6:  CALL   08DE
34DA:  BTFSC  19.7
34DC:  BSF    FF2.7
....................     delay_ms(1000); 
34DE:  MOVLW  04
34E0:  MOVLB  1
34E2:  MOVWF  x65
34E4:  CLRF   19
34E6:  BTFSC  FF2.7
34E8:  BSF    19.7
34EA:  BCF    FF2.7
34EC:  MOVLW  FA
34EE:  MOVWF  x86
34F0:  MOVLB  0
34F2:  CALL   0834
34F6:  BTFSC  19.7
34F8:  BSF    FF2.7
34FA:  MOVLB  1
34FC:  DECFSZ x65,F
34FE:  BRA    34E4
....................      
....................     do{ 
....................         
....................         if(!input(btn1)){ 
3500:  BTFSC  F80.5
3502:  BRA    3524
3504:  CLRF   19
3506:  BTFSC  FF2.7
3508:  BSF    19.7
350A:  BCF    FF2.7
....................             delay_ms(100); 
350C:  MOVLW  64
350E:  MOVWF  x86
3510:  MOVLB  0
3512:  CALL   0834
3516:  BTFSC  19.7
3518:  BSF    FF2.7
....................             an_deger--; 
351A:  MOVLB  1
351C:  MOVF   x62,W
351E:  BTFSC  FD8.2
3520:  DECF   x63,F
3522:  DECF   x62,F
....................             
....................         } 
....................         if(!input(btn3)){ 
3524:  BTFSC  F80.2
3526:  BRA    3546
3528:  CLRF   19
352A:  BTFSC  FF2.7
352C:  BSF    19.7
352E:  BCF    FF2.7
....................             delay_ms(100); 
3530:  MOVLW  64
3532:  MOVWF  x86
3534:  MOVLB  0
3536:  CALL   0834
353A:  BTFSC  19.7
353C:  BSF    FF2.7
....................             an_deger++; 
353E:  MOVLB  1
3540:  INCF   x62,F
3542:  BTFSC  FD8.2
3544:  INCF   x63,F
....................              
....................         } 
....................          if(!input(btn2)){ 
3546:  BTFSC  F80.3
3548:  BRA    356C
....................             delay_ms(500); 
354A:  MOVLW  02
354C:  MOVWF  x65
354E:  CLRF   19
3550:  BTFSC  FF2.7
3552:  BSF    19.7
3554:  BCF    FF2.7
3556:  MOVLW  FA
3558:  MOVWF  x86
355A:  MOVLB  0
355C:  CALL   0834
3560:  BTFSC  19.7
3562:  BSF    FF2.7
3564:  MOVLB  1
3566:  DECFSZ x65,F
3568:  BRA    354E
....................             break; 
356A:  BRA    35DE
....................          } 
....................         printf(lcd_putc,"\fMAX DEGER:"); 
356C:  MOVLW  42
356E:  MOVWF  FF6
3570:  MOVLW  05
3572:  MOVWF  FF7
3574:  CLRF   19
3576:  BTFSC  FF2.7
3578:  BSF    19.7
357A:  BCF    FF2.7
357C:  MOVLB  0
357E:  CALL   08DE
3582:  BTFSC  19.7
3584:  BSF    FF2.7
....................         printf(lcd_putc,"\nSENS: %lu ",an_deger); 
3586:  MOVLW  4E
3588:  MOVWF  FF6
358A:  MOVLW  05
358C:  MOVWF  FF7
358E:  MOVLW  07
3590:  MOVLB  1
3592:  MOVWF  x69
3594:  MOVLB  0
3596:  CALL   0C0E
359A:  MOVLW  10
359C:  MOVWF  FE9
359E:  MOVFF  163,167
35A2:  MOVFF  162,166
35A6:  CALL   12F4
35AA:  CLRF   19
35AC:  BTFSC  FF2.7
35AE:  BSF    19.7
35B0:  BCF    FF2.7
35B2:  MOVLW  20
35B4:  MOVLB  1
35B6:  MOVWF  x85
35B8:  MOVLB  0
35BA:  CALL   0884
35BE:  BTFSC  19.7
35C0:  BSF    FF2.7
35C2:  CLRF   19
35C4:  BTFSC  FF2.7
35C6:  BSF    19.7
35C8:  BCF    FF2.7
....................           
....................         delay_ms(100); 
35CA:  MOVLW  64
35CC:  MOVLB  1
35CE:  MOVWF  x86
35D0:  MOVLB  0
35D2:  CALL   0834
35D6:  BTFSC  19.7
35D8:  BSF    FF2.7
....................     }while(1); 
35DA:  MOVLB  1
35DC:  BRA    3500
....................      
....................     write_eeprom(ee_adr_an_max_kal_h,make8(an_deger,1));        //write_eeprom (address, value) 
35DE:  MOVFF  163,165
35E2:  MOVF   FF2,W
35E4:  MOVWF  00
35E6:  BCF    FF2.7
35E8:  MOVLW  25
35EA:  MOVWF  FA9
35EC:  MOVFF  165,FA8
35F0:  BCF    FA6.6
35F2:  BCF    FA6.7
35F4:  BSF    FA6.2
35F6:  MOVLB  F
35F8:  MOVLW  55
35FA:  MOVWF  FA7
35FC:  MOVLW  AA
35FE:  MOVWF  FA7
3600:  BSF    FA6.1
3602:  BTFSC  FA6.1
3604:  BRA    3602
3606:  BCF    FA6.2
3608:  MOVF   00,W
360A:  IORWF  FF2,F
....................     write_eeprom(ee_adr_an_max_kal_l,make8(an_deger,0)); 
360C:  MOVFF  162,165
3610:  MOVFF  FF2,00
3614:  BCF    FF2.7
3616:  MOVLW  26
3618:  MOVWF  FA9
361A:  MOVFF  162,FA8
361E:  BCF    FA6.6
3620:  BCF    FA6.7
3622:  BSF    FA6.2
3624:  MOVLW  55
3626:  MOVWF  FA7
3628:  MOVLW  AA
362A:  MOVWF  FA7
362C:  BSF    FA6.1
362E:  BTFSC  FA6.1
3630:  BRA    362E
3632:  BCF    FA6.2
3634:  MOVF   00,W
3636:  IORWF  FF2,F
....................              
....................     an_deger=205; 
3638:  MOVLB  1
363A:  CLRF   x63
363C:  MOVLW  CD
363E:  MOVWF  x62
....................      
....................     do{ 
....................          
....................         if(!input(btn1)){ 
3640:  BTFSC  F80.5
3642:  BRA    3664
3644:  CLRF   19
3646:  BTFSC  FF2.7
3648:  BSF    19.7
364A:  BCF    FF2.7
....................             delay_ms(100); 
364C:  MOVLW  64
364E:  MOVWF  x86
3650:  MOVLB  0
3652:  CALL   0834
3656:  BTFSC  19.7
3658:  BSF    FF2.7
....................             an_deger--; 
365A:  MOVLB  1
365C:  MOVF   x62,W
365E:  BTFSC  FD8.2
3660:  DECF   x63,F
3662:  DECF   x62,F
....................             
....................         } 
....................         if(!input(btn3)){ 
3664:  BTFSC  F80.2
3666:  BRA    3686
3668:  CLRF   19
366A:  BTFSC  FF2.7
366C:  BSF    19.7
366E:  BCF    FF2.7
....................             delay_ms(100); 
3670:  MOVLW  64
3672:  MOVWF  x86
3674:  MOVLB  0
3676:  CALL   0834
367A:  BTFSC  19.7
367C:  BSF    FF2.7
....................             an_deger++; 
367E:  MOVLB  1
3680:  INCF   x62,F
3682:  BTFSC  FD8.2
3684:  INCF   x63,F
....................              
....................         } 
....................          if(!input(btn2)){ 
3686:  BTFSC  F80.3
3688:  BRA    36AC
....................             delay_ms(500); 
368A:  MOVLW  02
368C:  MOVWF  x65
368E:  CLRF   19
3690:  BTFSC  FF2.7
3692:  BSF    19.7
3694:  BCF    FF2.7
3696:  MOVLW  FA
3698:  MOVWF  x86
369A:  MOVLB  0
369C:  CALL   0834
36A0:  BTFSC  19.7
36A2:  BSF    FF2.7
36A4:  MOVLB  1
36A6:  DECFSZ x65,F
36A8:  BRA    368E
....................             break; 
36AA:  BRA    371E
....................          } 
....................         printf(lcd_putc,"\fMIN DEGER:"); 
36AC:  MOVLW  5A
36AE:  MOVWF  FF6
36B0:  MOVLW  05
36B2:  MOVWF  FF7
36B4:  CLRF   19
36B6:  BTFSC  FF2.7
36B8:  BSF    19.7
36BA:  BCF    FF2.7
36BC:  MOVLB  0
36BE:  CALL   08DE
36C2:  BTFSC  19.7
36C4:  BSF    FF2.7
....................         printf(lcd_putc,"\nSENS: %lu ",an_deger); 
36C6:  MOVLW  66
36C8:  MOVWF  FF6
36CA:  MOVLW  05
36CC:  MOVWF  FF7
36CE:  MOVLW  07
36D0:  MOVLB  1
36D2:  MOVWF  x69
36D4:  MOVLB  0
36D6:  CALL   0C0E
36DA:  MOVLW  10
36DC:  MOVWF  FE9
36DE:  MOVFF  163,167
36E2:  MOVFF  162,166
36E6:  CALL   12F4
36EA:  CLRF   19
36EC:  BTFSC  FF2.7
36EE:  BSF    19.7
36F0:  BCF    FF2.7
36F2:  MOVLW  20
36F4:  MOVLB  1
36F6:  MOVWF  x85
36F8:  MOVLB  0
36FA:  CALL   0884
36FE:  BTFSC  19.7
3700:  BSF    FF2.7
3702:  CLRF   19
3704:  BTFSC  FF2.7
3706:  BSF    19.7
3708:  BCF    FF2.7
....................         delay_ms(100); 
370A:  MOVLW  64
370C:  MOVLB  1
370E:  MOVWF  x86
3710:  MOVLB  0
3712:  CALL   0834
3716:  BTFSC  19.7
3718:  BSF    FF2.7
....................     }while(1); 
371A:  MOVLB  1
371C:  BRA    3640
....................      
....................     write_eeprom(ee_adr_an_min_kal_h,make8(an_deger,1)); ////write_eeprom (address, value) 
371E:  MOVFF  163,165
3722:  MOVF   FF2,W
3724:  MOVWF  00
3726:  BCF    FF2.7
3728:  MOVLW  27
372A:  MOVWF  FA9
372C:  MOVFF  165,FA8
3730:  BCF    FA6.6
3732:  BCF    FA6.7
3734:  BSF    FA6.2
3736:  MOVLB  F
3738:  MOVLW  55
373A:  MOVWF  FA7
373C:  MOVLW  AA
373E:  MOVWF  FA7
3740:  BSF    FA6.1
3742:  BTFSC  FA6.1
3744:  BRA    3742
3746:  BCF    FA6.2
3748:  MOVF   00,W
374A:  IORWF  FF2,F
....................     write_eeprom(ee_adr_an_min_kal_l, make8(an_deger,0)); 
374C:  MOVFF  162,165
3750:  MOVFF  FF2,00
3754:  BCF    FF2.7
3756:  MOVLW  28
3758:  MOVWF  FA9
375A:  MOVFF  162,FA8
375E:  BCF    FA6.6
3760:  BCF    FA6.7
3762:  BSF    FA6.2
3764:  MOVLW  55
3766:  MOVWF  FA7
3768:  MOVLW  AA
376A:  MOVWF  FA7
376C:  BSF    FA6.1
376E:  BTFSC  FA6.1
3770:  BRA    376E
3772:  BCF    FA6.2
3774:  MOVF   00,W
3776:  IORWF  FF2,F
....................      
....................    // sens_max_kal=make16(read_eeprom(ee_adr_an_max_kal_h),read_eeprom(ee_adr_an_max_kal_l)); 
....................    // sens_min_kal=make16(read_eeprom(ee_adr_an_min_kal_h),read_eeprom(ee_adr_an_min_kal_l)); 
....................      
....................    // an_max_min_reset(); 
....................      
....................      
....................   //  ee_an_max_yaz(); 
....................     //ee_an_min_yaz(); 
....................      
....................     //ee_sens_kalibre_oku(); 
....................      
....................     write_eeprom(ee_adres_jtnCount,make8(jtnCounter,0));    //low 
3778:  MOVFF  51,165
377C:  MOVFF  FF2,00
3780:  BCF    FF2.7
3782:  CLRF   FA9
3784:  MOVFF  51,FA8
3788:  BCF    FA6.6
378A:  BCF    FA6.7
378C:  BSF    FA6.2
378E:  MOVLW  55
3790:  MOVWF  FA7
3792:  MOVLW  AA
3794:  MOVWF  FA7
3796:  BSF    FA6.1
3798:  BTFSC  FA6.1
379A:  BRA    3798
379C:  BCF    FA6.2
379E:  MOVF   00,W
37A0:  IORWF  FF2,F
....................     write_eeprom(ee_adres_jtnCount+1,make8(jtnCounter,1)); 
37A2:  MOVFF  52,165
37A6:  MOVFF  FF2,00
37AA:  BCF    FF2.7
37AC:  MOVLW  01
37AE:  MOVWF  FA9
37B0:  MOVFF  52,FA8
37B4:  BCF    FA6.6
37B6:  BCF    FA6.7
37B8:  BSF    FA6.2
37BA:  MOVLW  55
37BC:  MOVWF  FA7
37BE:  MOVLW  AA
37C0:  MOVWF  FA7
37C2:  BSF    FA6.1
37C4:  BTFSC  FA6.1
37C6:  BRA    37C4
37C8:  BCF    FA6.2
37CA:  MOVF   00,W
37CC:  IORWF  FF2,F
....................     write_eeprom(ee_adres_jtnCount+2,make8(jtnCounter,2)); 
37CE:  MOVFF  53,165
37D2:  MOVFF  FF2,00
37D6:  BCF    FF2.7
37D8:  MOVLW  02
37DA:  MOVWF  FA9
37DC:  MOVFF  53,FA8
37E0:  BCF    FA6.6
37E2:  BCF    FA6.7
37E4:  BSF    FA6.2
37E6:  MOVLW  55
37E8:  MOVWF  FA7
37EA:  MOVLW  AA
37EC:  MOVWF  FA7
37EE:  BSF    FA6.1
37F0:  BTFSC  FA6.1
37F2:  BRA    37F0
37F4:  BCF    FA6.2
37F6:  MOVF   00,W
37F8:  IORWF  FF2,F
....................     write_eeprom(ee_adres_jtnCount+3,make8(jtnCounter,3));//high 
37FA:  MOVFF  54,165
37FE:  MOVFF  FF2,00
3802:  BCF    FF2.7
3804:  MOVLW  03
3806:  MOVWF  FA9
3808:  MOVFF  54,FA8
380C:  BCF    FA6.6
380E:  BCF    FA6.7
3810:  BSF    FA6.2
3812:  MOVLW  55
3814:  MOVWF  FA7
3816:  MOVLW  AA
3818:  MOVWF  FA7
381A:  BSF    FA6.1
381C:  BTFSC  FA6.1
381E:  BRA    381C
3820:  BCF    FA6.2
3822:  MOVF   00,W
3824:  IORWF  FF2,F
....................       
....................      delay_ms(1000); 
3826:  MOVLW  04
3828:  MOVLB  1
382A:  MOVWF  x65
382C:  CLRF   19
382E:  BTFSC  FF2.7
3830:  BSF    19.7
3832:  BCF    FF2.7
3834:  MOVLW  FA
3836:  MOVWF  x86
3838:  MOVLB  0
383A:  CALL   0834
383E:  BTFSC  19.7
3840:  BSF    FF2.7
3842:  MOVLB  1
3844:  DECFSZ x65,F
3846:  BRA    382C
3848:  MOVLB  0
384A:  GOTO   4206 (RETURN)
.................... } 
....................  
.................... void sensorTest(char sensorHL) 
.................... { 
....................      
....................     printf(lcd_putc,"\fSensor Sinyal???"); 
384E:  MOVLW  72
3850:  MOVWF  FF6
3852:  MOVLW  05
3854:  MOVWF  FF7
3856:  CLRF   19
3858:  BTFSC  FF2.7
385A:  BSF    19.7
385C:  BCF    FF2.7
385E:  CALL   08DE
3862:  BTFSC  19.7
3864:  BSF    FF2.7
....................     printf(lcd_putc,"\n<<<    <>    >>>"); 
3866:  MOVLW  84
3868:  MOVWF  FF6
386A:  MOVLW  05
386C:  MOVWF  FF7
386E:  CLRF   19
3870:  BTFSC  FF2.7
3872:  BSF    19.7
3874:  BCF    FF2.7
3876:  CALL   08DE
387A:  BTFSC  19.7
387C:  BSF    FF2.7
....................     hc_595_clr_allPins(); 
387E:  MOVLB  1
3880:  CLRF   x6C
3882:  CLRF   x6D
3884:  CLRF   x6E
3886:  MOVLB  0
3888:  CALL   092A
....................     mp3_stop(); 
388C:  CALL   11A8
....................     dfPlayerNormSes(); 
3890:  MOVLW  14
3892:  MOVLB  1
3894:  MOVWF  x65
3896:  MOVLB  0
3898:  CALL   1182
389C:  CLRF   19
389E:  BTFSC  FF2.7
38A0:  BSF    19.7
38A2:  BCF    FF2.7
38A4:  MOVLW  64
38A6:  MOVLB  1
38A8:  MOVWF  x86
38AA:  MOVLB  0
38AC:  CALL   0834
38B0:  BTFSC  19.7
38B2:  BSF    FF2.7
....................     
....................     hc_595_clr_allPins(); 
38B4:  MOVLB  1
38B6:  CLRF   x6C
38B8:  CLRF   x6D
38BA:  CLRF   x6E
38BC:  MOVLB  0
38BE:  CALL   092A
....................     an_max_min_reset(); 
38C2:  CALL   12AC
....................      
....................     motor3_ileri(); 
38C6:  BSF    46.4
38C8:  BCF    46.5
38CA:  MOVFF  46,16C
38CE:  MOVFF  47,16D
38D2:  MOVFF  48,16E
38D6:  CALL   092A
....................     delay_ms(500); 
38DA:  MOVLW  02
38DC:  MOVLB  1
38DE:  MOVWF  x61
38E0:  CLRF   19
38E2:  BTFSC  FF2.7
38E4:  BSF    19.7
38E6:  BCF    FF2.7
38E8:  MOVLW  FA
38EA:  MOVWF  x86
38EC:  MOVLB  0
38EE:  CALL   0834
38F2:  BTFSC  19.7
38F4:  BSF    FF2.7
38F6:  MOVLB  1
38F8:  DECFSZ x61,F
38FA:  BRA    38E0
....................     motor3_dur(); 
38FC:  BCF    46.4
38FE:  BCF    46.5
3900:  MOVFF  46,16C
3904:  MOVFF  47,16D
3908:  MOVFF  48,16E
390C:  MOVLB  0
390E:  CALL   092A
....................      
....................     an_max_min_reset(); 
3912:  CALL   12AC
....................     an_max_adc_oku(); 
3916:  CALL   2B56
....................      
....................     do{ 
.................... //        if(sw1_1(sensorHL)){ 
.................... //             o1_L1_on(); 
.................... //             printf(lcd_putc,"\fSW1_1"); 
.................... //             printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //             output_toggle(PIN_A4); 
.................... //             mp3_stop();//delay_ms(100); 
.................... //             mp3_play_physical(wav_suDamlasi); 
.................... //             delay_ms(1000); 
.................... //             o1_L1_off(); 
.................... //        } 
.................... //        if(sw1_2(sensorHL)){ 
.................... //             o1_L2_on(); 
.................... //             printf(lcd_putc,"\fSW1_2"); 
.................... //             printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //             output_toggle(PIN_A4); 
.................... //             mp3_stop();//delay_ms(100); 
.................... //             mp3_play_physical(wav_suDamlasi); 
.................... //             delay_ms(1000); 
.................... //             o1_L2_off(); 
.................... //        } 
.................... //        if(sw1_3(sensorHL)){ 
.................... //             o1_L3_on(); 
.................... //             printf(lcd_putc,"\fSW1_3"); 
.................... //             printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //             output_toggle(PIN_A4); 
.................... //             mp3_stop();//delay_ms(100); 
.................... //             mp3_play_physical(wav_suDamlasi); 
.................... //             delay_ms(1000); 
.................... //             o1_L3_off(); 
.................... //        } 
.................... //         
.................... //        if(sw2_1(sensorHL)){ 
.................... //             o2_L1_on(); 
.................... //             printf(lcd_putc,"\fSW2_1"); 
.................... //             printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //             output_toggle(PIN_A4); 
.................... //             mp3_stop();//delay_ms(100); 
.................... //             mp3_play_physical(wav_suDamlasi); 
.................... //             delay_ms(1000); 
.................... //             o2_L1_off(); 
.................... //        } 
.................... //        if(sw2_2(sensorHL)){ 
.................... //             o2_L2_on(); 
.................... //             printf(lcd_putc,"\fSW2_2"); 
.................... //             printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //             output_toggle(PIN_A4); 
.................... //             mp3_stop();//delay_ms(100); 
.................... //             mp3_play_physical(wav_suDamlasi); 
.................... //             delay_ms(1000); 
.................... //             o2_L2_off(); 
.................... //        } 
.................... //        if(sw2_3(sensorHL)){ 
.................... //             o2_L3_on(); 
.................... //             printf(lcd_putc,"\fSW2_3"); 
.................... //             printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //             output_toggle(PIN_A4); 
.................... //             mp3_stop();//delay_ms(100); 
.................... //             mp3_play_physical(wav_suDamlasi); 
.................... //             delay_ms(1000); 
.................... //             o2_L3_off(); 
.................... //        } 
.................... //         
.................... //        if(sa_m1_1()){ 
.................... //            rgb_kirmizi_on(); 
.................... //            printf(lcd_putc,"\fSA_M1_1"); 
.................... //            printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //            output_toggle(PIN_A4); 
.................... //            mp3_stop();//delay_ms(100); 
.................... //            mp3_play_physical(wav_suDamlasi); 
.................... //            delay_ms(1000); 
.................... //            rgb_kirmizi_off(); 
.................... //        } 
.................... //        if(sa_m1_2()){ 
.................... //            rgb_yesil_on(); 
.................... //            printf(lcd_putc,"\fSA_M1_2"); 
.................... //            printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //            output_toggle(PIN_A4); 
.................... //            mp3_stop();//delay_ms(100); 
.................... //            mp3_play_physical(wav_suDamlasi); 
.................... //            delay_ms(1000); 
.................... //            rgb_yesil_off(); 
.................... //        } 
.................... //         
.................... //        if(sa_m2_1()){ 
.................... //            rgb_mavi_on(); 
.................... //            printf(lcd_putc,"\fSA_M2_1"); 
.................... //            printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //            output_toggle(PIN_A4); 
.................... //            mp3_stop();//delay_ms(100); 
.................... //            mp3_play_physical(wav_suDamlasi); 
.................... //            delay_ms(1000); 
.................... //            rgb_mavi_off(); 
.................... //        } 
.................... //        if(sa_m2_2()){ 
.................... //            rgb_beyaz_on(); 
.................... //            printf(lcd_putc,"\fSA_M2_2"); 
.................... //            printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //            output_toggle(PIN_A4); 
.................... //            mp3_stop();//delay_ms(100); 
.................... //            mp3_play_physical(wav_suDamlasi); 
.................... //            delay_ms(1000); 
.................... //            rgb_beyaz_off(); 
.................... //        } 
.................... //        printf(lcd_putc,"\f   ... ??? ... "); 
.................... //        printf(lcd_putc,"\n<<<    <>    >>>"); 
....................          
....................          sw_sa_algila=swSaAlgila(SENS_OKU_H_L);   //yaklaþýk (100us*16)*6=10mS iþlem süresi 
391A:  MOVLW  4C
391C:  MOVLB  1
391E:  MOVWF  x65
3920:  MOVLB  0
3922:  CALL   1986
3926:  MOVFF  01,4E
....................           
....................          if(sw_sa_algila!=0xFF) 
392A:  INCFSZ 4E,W
392C:  BRA    3930
392E:  BRA    3A1C
....................          {        
....................             sw_ses_oynat(sw_sa_algila); 
3930:  MOVFF  4E,165
3934:  CALL   20A8
....................             printf(lcd_putc,"\fSENS: %lu ",last_adc_deger); 
3938:  MOVLW  96
393A:  MOVWF  FF6
393C:  MOVLW  05
393E:  MOVWF  FF7
3940:  MOVLW  07
3942:  MOVLB  1
3944:  MOVWF  x69
3946:  MOVLB  0
3948:  CALL   0C0E
394C:  MOVLW  10
394E:  MOVWF  FE9
3950:  MOVFF  50,167
3954:  MOVFF  4F,166
3958:  CALL   12F4
395C:  CLRF   19
395E:  BTFSC  FF2.7
3960:  BSF    19.7
3962:  BCF    FF2.7
3964:  MOVLW  20
3966:  MOVLB  1
3968:  MOVWF  x85
396A:  MOVLB  0
396C:  CALL   0884
3970:  BTFSC  19.7
3972:  BSF    FF2.7
....................             printf(lcd_putc,"\nSENS: %1.2f V",last_adc_deger*ADC_ADIM); 
3974:  MOVFF  50,166
3978:  MOVFF  4F,165
397C:  CALL   2F50
3980:  MOVFF  03,179
3984:  MOVFF  02,178
3988:  MOVFF  01,177
398C:  MOVFF  00,176
3990:  MOVLW  0A
3992:  MOVLB  1
3994:  MOVWF  x7D
3996:  MOVLW  28
3998:  MOVWF  x7C
399A:  MOVLW  20
399C:  MOVWF  x7B
399E:  MOVLW  77
39A0:  MOVWF  x7A
39A2:  MOVLB  0
39A4:  CALL   2F86
39A8:  MOVFF  03,164
39AC:  MOVFF  02,163
39B0:  MOVFF  01,162
39B4:  MOVFF  00,161
39B8:  MOVLW  A2
39BA:  MOVWF  FF6
39BC:  MOVLW  05
39BE:  MOVWF  FF7
39C0:  MOVLW  07
39C2:  MOVLB  1
39C4:  MOVWF  x69
39C6:  MOVLB  0
39C8:  CALL   0C0E
39CC:  MOVLW  89
39CE:  MOVWF  FE9
39D0:  MOVFF  164,16C
39D4:  MOVFF  163,16B
39D8:  MOVFF  162,16A
39DC:  MOVFF  161,169
39E0:  MOVLW  02
39E2:  MOVLB  1
39E4:  MOVWF  x6D
39E6:  MOVLB  0
39E8:  CALL   30C0
39EC:  CLRF   19
39EE:  BTFSC  FF2.7
39F0:  BSF    19.7
39F2:  BCF    FF2.7
39F4:  MOVLW  20
39F6:  MOVLB  1
39F8:  MOVWF  x85
39FA:  MOVLB  0
39FC:  CALL   0884
3A00:  BTFSC  19.7
3A02:  BSF    FF2.7
3A04:  CLRF   19
3A06:  BTFSC  FF2.7
3A08:  BSF    19.7
3A0A:  BCF    FF2.7
3A0C:  MOVLW  56
3A0E:  MOVLB  1
3A10:  MOVWF  x85
3A12:  MOVLB  0
3A14:  CALL   0884
3A18:  BTFSC  19.7
3A1A:  BSF    FF2.7
....................          } 
....................         if(!input(btn2)){ 
3A1C:  BTFSC  F80.3
3A1E:  BRA    3A46
....................             delay_ms(500); 
3A20:  MOVLW  02
3A22:  MOVLB  1
3A24:  MOVWF  x61
3A26:  CLRF   19
3A28:  BTFSC  FF2.7
3A2A:  BSF    19.7
3A2C:  BCF    FF2.7
3A2E:  MOVLW  FA
3A30:  MOVWF  x86
3A32:  MOVLB  0
3A34:  CALL   0834
3A38:  BTFSC  19.7
3A3A:  BSF    FF2.7
3A3C:  MOVLB  1
3A3E:  DECFSZ x61,F
3A40:  BRA    3A26
....................             break; 
3A42:  BRA    3A62
3A44:  MOVLB  0
3A46:  CLRF   19
3A48:  BTFSC  FF2.7
3A4A:  BSF    19.7
3A4C:  BCF    FF2.7
....................          } 
....................         
....................        
....................         delay_ms(25); 
3A4E:  MOVLW  19
3A50:  MOVLB  1
3A52:  MOVWF  x86
3A54:  MOVLB  0
3A56:  CALL   0834
3A5A:  BTFSC  19.7
3A5C:  BSF    FF2.7
....................          
....................     }while(1); 
3A5E:  BRA    391A
3A60:  MOVLB  1
....................      
....................      mp3_stop();delay_ms(100); 
3A62:  MOVLB  0
3A64:  CALL   11A8
3A68:  CLRF   19
3A6A:  BTFSC  FF2.7
3A6C:  BSF    19.7
3A6E:  BCF    FF2.7
3A70:  MOVLW  64
3A72:  MOVLB  1
3A74:  MOVWF  x86
3A76:  MOVLB  0
3A78:  CALL   0834
3A7C:  BTFSC  19.7
3A7E:  BSF    FF2.7
....................      mp3_play(mp3_remix); 
3A80:  MOVLB  1
3A82:  CLRF   x67
3A84:  MOVLW  0A
3A86:  MOVWF  x66
3A88:  MOVLB  0
3A8A:  CALL   11B8
....................      delay_ms(2000); 
3A8E:  MOVLW  08
3A90:  MOVLB  1
3A92:  MOVWF  x61
3A94:  CLRF   19
3A96:  BTFSC  FF2.7
3A98:  BSF    19.7
3A9A:  BCF    FF2.7
3A9C:  MOVLW  FA
3A9E:  MOVWF  x86
3AA0:  MOVLB  0
3AA2:  CALL   0834
3AA6:  BTFSC  19.7
3AA8:  BSF    FF2.7
3AAA:  MOVLB  1
3AAC:  DECFSZ x61,F
3AAE:  BRA    3A94
3AB0:  MOVLB  0
3AB2:  GOTO   4270 (RETURN)
.................... } 
....................  
....................  
.................... void motorKurulum(void){ 
*
0004:  GOTO   42D2 (RETURN)
....................    // unsigned long long m1Sure=0,m2Sure=0; 
....................     
....................     //disable_interrupt(INT_TIMER3); 
.................... //    printf(lcd_putc,"\fmotor:?"); 
.................... //    printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... //     
.................... //    BOOLEAN m1=0,m2=0; 
.................... //    motor1_ileri(); 
.................... //    motor2_ileri(); 
....................    
.................... //    while(1){ 
....................          
.................... //        if(sa_m1_2()){ 
.................... //            m1=1; 
.................... //            motor1_dur(); 
.................... //        }else m1Sure+=10; 
.................... //         
.................... //        if(sa_m2_2()){ 
.................... //            m2=1; 
.................... //            motor2_dur(); 
.................... //        }else m2Sure+=10; 
.................... //         
.................... //        if((sa_m1_2()&&sa_m2_2() || (m1 && m2))){ 
.................... //             motor1_geri(); 
.................... //             motor2_geri(); 
.................... //             break; 
.................... //        } 
.................... //         
.................... //        printf(lcd_putc,"\fmotor1:%Lu",  m1Sure); 
.................... //        printf(lcd_putc,"\nmotor2:%Lu",  m2Sure); 
.................... //         
.................... //        delay_ms(10); 
.................... //    } 
.................... //    m1=m2=0; 
.................... //    while(1){ 
.................... //        if(sa_m1_1()){ 
.................... //            motor1_dur();  
.................... //            m1=1; 
.................... //        }else m1Sure+=10; 
.................... //        if(sa_m2_1()){ 
.................... //            m2=1; 
.................... //            motor2_dur();  
.................... //        }else m2Sure+=10; 
.................... //         
.................... //        if((sa_m1_1()&&sa_m2_1()) || (m1 && m2)){ 
.................... //             
.................... //             break; 
.................... //        } 
.................... //         
.................... //        printf(lcd_putc,"\fmotor1:%Lu",  m1Sure); 
.................... //        printf(lcd_putc,"\nmotor2:%Lu",  m2Sure); 
.................... //         
.................... //        delay_ms(10); 
.................... //    } 
.................... //    motor1_dur(); motor2_dur();  
.................... ////    m1Sure/=10LL; 
.................... ////    m2Sure/=10LL; 
.................... //     
.................... //    printf(lcd_putc,"\fm1:%04Lu  m2:%04Lu",(unsigned int16)(m1Sure>>1),(unsigned int16)(m2Sure>>1));// 2 ye bölme iþlemi 
.................... //    printf(lcd_putc,"\n<<<    <>    >>>"); 
.................... // 
.................... //    while(input(btn2)); 
.................... //    delay_ms(300);    
.................... //                                                 //(m1Sure/2/5)=m1Sure/10  birli delik sure için hesap, 5 atýþta sona ulaþsýn 
.................... //    write_eeprom(ee_adres_Msure_1,make8((unsigned int16)(m1Sure/10),0));      //Low byte 
.................... //    write_eeprom((ee_adres_Msure_1+1),make8((unsigned int16)(m1Sure/10),1));  //High Byte 
.................... //     
.................... //    write_eeprom(ee_adres_Msure_2,make8((unsigned int16)(m2Sure/10),0));      //Low byte 
.................... //    write_eeprom((ee_adres_Msure_2+1),make8((unsigned int16)(m2Sure/10),1));  //High Byte 
.................... //    delay_ms(2000); 
.................... } 
....................  
.................... void resetIslemi(void){ 
*
3AB6:  MOVLB  1
3AB8:  CLRF   x60
....................      
....................     int i=0; 
....................     printf(lcd_putc,"\fEVET       HAYIR"); 
3ABA:  MOVLW  B2
3ABC:  MOVWF  FF6
3ABE:  MOVLW  05
3AC0:  MOVWF  FF7
3AC2:  CLRF   19
3AC4:  BTFSC  FF2.7
3AC6:  BSF    19.7
3AC8:  BCF    FF2.7
3ACA:  MOVLB  0
3ACC:  CALL   08DE
3AD0:  BTFSC  19.7
3AD2:  BSF    FF2.7
....................     printf(lcd_putc,"\n<<<    <>    >>>"); 
3AD4:  MOVLW  C4
3AD6:  MOVWF  FF6
3AD8:  MOVLW  05
3ADA:  MOVWF  FF7
3ADC:  CLRF   19
3ADE:  BTFSC  FF2.7
3AE0:  BSF    19.7
3AE2:  BCF    FF2.7
3AE4:  CALL   08DE
3AE8:  BTFSC  19.7
3AEA:  BSF    FF2.7
3AEC:  CLRF   19
3AEE:  BTFSC  FF2.7
3AF0:  BSF    19.7
3AF2:  BCF    FF2.7
....................     delay_ms(100); 
3AF4:  MOVLW  64
3AF6:  MOVLB  1
3AF8:  MOVWF  x86
3AFA:  MOVLB  0
3AFC:  CALL   0834
3B00:  BTFSC  19.7
3B02:  BSF    FF2.7
....................     while(!input(btn2));    //orta buton býrakýlýncaya kadar.. 
3B04:  BTFSS  F80.3
3B06:  BRA    3B04
....................     while(1){ 
....................         if(!input(btn1)){       //  EVET resetle 
3B08:  BTFSC  F80.5
3B0A:  BRA    3B8E
3B0C:  CLRF   19
3B0E:  BTFSC  FF2.7
3B10:  BSF    19.7
3B12:  BCF    FF2.7
....................             delay_ms(200); 
3B14:  MOVLW  C8
3B16:  MOVLB  1
3B18:  MOVWF  x86
3B1A:  MOVLB  0
3B1C:  CALL   0834
3B20:  BTFSC  19.7
3B22:  BSF    FF2.7
....................              
....................             for(i=0;i<41;i++)   //37: sensonr kalibre degerleri hariç 
3B24:  MOVLB  1
3B26:  CLRF   x60
3B28:  MOVF   x60,W
3B2A:  SUBLW  28
3B2C:  BNC   3B5C
....................             { 
....................                 write_eeprom(i,255); 
3B2E:  MOVF   FF2,W
3B30:  MOVWF  00
3B32:  BCF    FF2.7
3B34:  MOVFF  160,FA9
3B38:  SETF   FA8
3B3A:  BCF    FA6.6
3B3C:  BCF    FA6.7
3B3E:  BSF    FA6.2
3B40:  MOVLB  F
3B42:  MOVLW  55
3B44:  MOVWF  FA7
3B46:  MOVLW  AA
3B48:  MOVWF  FA7
3B4A:  BSF    FA6.1
3B4C:  BTFSC  FA6.1
3B4E:  BRA    3B4C
3B50:  BCF    FA6.2
3B52:  MOVF   00,W
3B54:  IORWF  FF2,F
3B56:  MOVLB  1
3B58:  INCF   x60,F
3B5A:  BRA    3B28
....................             } 
.................... //            write_eeprom(ee_adres_Msure_1,0xFF);      //Low byte 
.................... //            write_eeprom((ee_adres_Msure_1+1),0xFF);  //High Byte 
.................... //     
.................... //            write_eeprom(ee_adres_Msure_2,0xFF);      //Low byte 
.................... //            write_eeprom((ee_adres_Msure_2+1),0xFF);* 
.................... //             
.................... //            write_eeprom(ee_adres_jtnTL,0xFF); 
....................              
....................             printf(lcd_putc,"\f ! RESET TAMAM !"); 
3B5C:  MOVLW  D6
3B5E:  MOVWF  FF6
3B60:  MOVLW  05
3B62:  MOVWF  FF7
3B64:  CLRF   19
3B66:  BTFSC  FF2.7
3B68:  BSF    19.7
3B6A:  BCF    FF2.7
3B6C:  MOVLB  0
3B6E:  CALL   08DE
3B72:  BTFSC  19.7
3B74:  BSF    FF2.7
....................             printf(lcd_putc,"\n<<<    <>    >>>"); 
3B76:  MOVLW  E8
3B78:  MOVWF  FF6
3B7A:  MOVLW  05
3B7C:  MOVWF  FF7
3B7E:  CLRF   19
3B80:  BTFSC  FF2.7
3B82:  BSF    19.7
3B84:  BCF    FF2.7
3B86:  CALL   08DE
3B8A:  BTFSC  19.7
3B8C:  BSF    FF2.7
....................              
....................         } 
....................          if(!input(btn2)||!input(btn3)){ 
3B8E:  BTFSS  F80.3
3B90:  BRA    3B96
3B92:  BTFSC  F80.2
3B94:  BRA    3BB0
3B96:  CLRF   19
3B98:  BTFSC  FF2.7
3B9A:  BSF    19.7
3B9C:  BCF    FF2.7
....................              delay_ms(100); 
3B9E:  MOVLW  64
3BA0:  MOVLB  1
3BA2:  MOVWF  x86
3BA4:  MOVLB  0
3BA6:  CALL   0834
3BAA:  BTFSC  19.7
3BAC:  BSF    FF2.7
....................              break; 
3BAE:  BRA    3BB2
....................          } 
3BB0:  BRA    3B08
....................     } 
....................      
....................     delay_ms(1000); 
3BB2:  MOVLW  04
3BB4:  MOVLB  1
3BB6:  MOVWF  x61
3BB8:  CLRF   19
3BBA:  BTFSC  FF2.7
3BBC:  BSF    19.7
3BBE:  BCF    FF2.7
3BC0:  MOVLW  FA
3BC2:  MOVWF  x86
3BC4:  MOVLB  0
3BC6:  CALL   0834
3BCA:  BTFSC  19.7
3BCC:  BSF    FF2.7
3BCE:  MOVLB  1
3BD0:  DECFSZ x61,F
3BD2:  BRA    3BB8
3BD4:  MOVLB  0
3BD6:  GOTO   4334 (RETURN)
....................     
.................... } 
....................  
....................  
....................   
....................          
.................... //        if(sens==5){ 
.................... //            if(!input(btn2)){ 
.................... //                delay_ms(500); 
.................... //                break; 
.................... //            } 
.................... //        } 
.................... //         
.................... //        if(sens==0){ 
.................... //            o1_L1_on(); 
.................... //            o1_L2_off();o1_L3_off();o2_L123_off(); 
.................... //             
.................... //            for(i=0;i<16;i++){ 
.................... //                an_sw1_1_sec(); 
.................... //                set_adc_channel(0);  
.................... //                delay_us(20); 
.................... //                an_deger+=read_adc(); 
.................... //            } 
.................... //            an_deger=an_deger>>4; 
.................... //             
.................... //            if(an_deger<an_min[sens]){ 
.................... //                an_min[sens]=an_deger; 
.................... //            } 
.................... //        } 
.................... //        if(sens==1){ 
.................... //            o1_L2_on(); 
.................... //            o1_L1_off();o1_L3_off();o2_L123_off(); 
.................... //            
.................... //            for(i=0;i<16;i++){ 
.................... //                an_sw1_2_sec(); 
.................... //                set_adc_channel(0);  
.................... //                delay_us(20); 
.................... //                an_deger+=read_adc(); 
.................... //            } 
.................... //            an_deger=an_deger>>4; 
.................... //             
.................... //            if(an_deger<an_min[sens]){ 
.................... //                an_min[sens]=an_deger; 
.................... //            } 
.................... //        } 
.................... //         if(sens==2){ 
.................... //            o1_L3_on(); 
.................... //            o1_L1_off();o1_L2_off();o2_L123_off(); 
.................... //           
.................... //            for(i=0;i<16;i++){ 
.................... //                an_sw1_3_sec(); 
.................... //                set_adc_channel(0);  
.................... //                delay_us(20); 
.................... //                an_deger+=read_adc(); 
.................... //            } 
.................... //            an_deger=an_deger>>4; 
.................... //             
.................... //           if(an_deger<an_min[sens]){ 
.................... //                an_min[sens]=an_deger; 
.................... //            } 
.................... //        } 
.................... //         
.................... //         if(sens==3){ 
.................... //            o2_L1_on(); 
.................... //            o2_L2_off();o2_L3_off();o1_L123_off(); 
.................... //             
.................... //            for(i=0;i<16;i++){ 
.................... //                an_sw2_1_sec(); 
.................... //                set_adc_channel(0);  
.................... //                delay_us(20); 
.................... //                an_deger+=read_adc(); 
.................... //            } 
.................... //            an_deger=an_deger>>4; 
.................... //            if(an_deger<an_min[sens]){ 
.................... //                an_min[sens]=an_deger; 
.................... //            } 
.................... //        } 
.................... //        if(sens==4){ 
.................... //            o2_L2_on(); 
.................... //            o2_L1_off();o2_L3_off();o1_L123_off(); 
.................... //            for(i=0;i<16;i++){ 
.................... //                an_sw2_2_sec(); 
.................... //                set_adc_channel(0);  
.................... //                delay_us(20); 
.................... //                an_deger+=read_adc(); 
.................... //            } 
.................... //            an_deger=an_deger>>4; 
.................... //            if(an_deger<an_min[sens]){ 
.................... //                an_min[sens]=an_deger; 
.................... //            } 
.................... //        } 
.................... //        if(sens==5){ 
.................... //            o2_L3_on(); 
.................... //            o2_L1_off();o2_L2_off();o1_L123_off(); 
.................... //            for(i=0;i<16;i++){ 
.................... //                an_sw2_3_sec(); 
.................... //                set_adc_channel(0);  
.................... //                delay_us(20); 
.................... //                an_deger+=read_adc(); 
.................... //            } 
.................... //            an_deger=an_deger>>4; 
.................... //             
.................... //            if(an_deger<an_min[sens]){ 
.................... //                an_min[sens]=an_deger; 
.................... //            } 
.................... //        } 
.................... //         
.................... //        esik=(unsigned long)(an_max[sens]-((an_max[sens]-an_min[sens])/2)); 
.................... //         
.................... //        if(sensorHL==SENS_OKU_H_L){ 
.................... //             
.................... //            if( an_deger<an_esik){         // top varsa çýkýþ gerilimi düþtü...   0 
.................... //                hc_595_clr_allPins(); 
.................... //                mp3_stop();//delay_ms(100); 
.................... //                mp3_play_physical(wav_suDamlasi); 
.................... //                delay_ms(250); 
.................... //            } 
.................... //        } 
.................... //         
.................... //        printf(lcd_putc,"\fSen%d: %1.2f-%1.2f",sens,an_max[sens]*ADC_ADIM,an_min[sens]*ADC_ADIM); 
.................... //        printf(lcd_putc,"\n <<<  %1.2f  >>>",an_deger*ADC_ADIM); 
.................... //         
....................  
....................  
.................... extern unsigned int32 oyunBitisSureBasla;    // Ayarlanan oyun bitiþ süresi için 
.................... extern unsigned int32 oyunSureSayBasla;      // 
.................... extern unsigned int32 oyunSureSaySaniye;     // Oyun süresini saniye olarak sayar.   
....................  
.................... unsigned long long ledAnimSureBasla=0; 
.................... int animSay=0; 
.................... TICK_TYPE time_sens_oku=0,previousTick=0; 
....................  
.................... char text[100]; 
.................... extern int1 jetonDurum; 
.................... int1 jetonAtildi=FALSE; 
....................  
.................... extern int8 jtnTLMik; 
.................... extern unsigned int8 ee_oyunSure; 
.................... int8 btnBasSay=0; 
.................... unsigned int16 maxOyunSure=0xFFFF; 
....................  
.................... int16 delayMsSay=0,delay_mt_geri=0; 
....................  
.................... #include "kostur_anim.h" 
.................... /*  
....................  * File:   kostur_anim.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 21 Nisan 2018 Cumartesi, 08:31 
....................  */ 
....................  
.................... #ifndef KOSTUR_ANIM_H 
.................... #define	KOSTUR_ANIM_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................  
....................     #define led_animKarasimsek  0 
....................     #define led_animKarinca     1 
....................     #define led_animBlink       2 
....................     #define led_animVumetre     3 
....................  
....................     #define P10_animKosturBlink 4 
....................     #define P10_SirketReklam    5 
....................     #define P10_animTL          6 
....................     #define P10_animMaxSurePuan 7 
....................      
....................  
....................     void led_anim_bosta(int animSay); 
....................     void p10_oyun_puan_goster(unsigned int16 o1Puan,unsigned int16 o2Puan); 
....................  
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_ANIM_H */ 
....................  
....................  
.................... #include "kostur_anim.c" 
.................... #include "kostur_kart_tanimlar.h" 
.................... /*  
....................  * File:   kostur_kart_tanimlar.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 09 Mart 2018 Cuma, 15:36 
....................  */ 
....................  
.................... #ifndef KOSTUR_KART_TANIMLAR_H 
.................... #define	KOSTUR_KART_TANIMLAR_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     //unsigned int16 spiData=0;  //16 bit veri gönderileceði zaman 
....................     unsigned int8 spiDataH=0,spiDataM=0,spiDataL=0; 
....................     int8 jetonSay=0; 
....................     void hc595_spi_yaz(unsigned int16 veri,unsigned char yaz_bit); 
....................     void hc595_spi_24bit_yaz(unsigned int8 veriH,unsigned int8 veriM,unsigned int8 veriL); 
....................      
....................     #define spi_yaz16() hc595_spi_yaz(spiData,16) 
....................     #define spi_yaz24() hc595_spi_24bit_yaz(spiDataH,spiDataM,spiDataL) 
....................     #define hc_595_clr_allPins() hc595_spi_24bit_yaz(0x00,0x00,0x00);//delay_ms(100) 
....................     #define hc_595_set_allPins() hc595_spi_24bit_yaz(0xFF,0xFF,0xFF);delay_ms(100) 
....................      
....................     // spiDataL  ilk 8bit 
....................     #define l2_1    0 
....................     #define l2_2    1 
....................     #define l2_3    2 
....................     #define l1_1    3 
....................     #define l1_2    4 
....................     #define l1_3    5 
....................     #define led_k   6 
....................     #define led_y   7 
....................     // spiDataM ikinci 8 bit 
....................     #define led_m   0 
....................     #define c2      1 
....................     #define b2      2 
....................     #define a2      3 
....................     #define c1      4 
....................     #define b1      5 
....................     #define a1      6 
....................     #define u_led   7 
....................     // spiDataH üçüncü 8 bit 
....................     #define in1     0 
....................     #define in2     1 
....................     #define in3     2 
....................     #define in4     3 
....................     #define in5     4 
....................     #define in6     5 
....................     #define in7     6 
....................     #define in8     7 
....................  
....................     //74HC4051_1 tanýmlamalarý 
....................  
....................     #define an_sw1_1_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw1_2_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw1_3_sec() bit_clear(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1); spi_yaz24()      
....................      
....................     #define an_sw2_1_sec() bit_set(spiDataM,a1); bit_set(spiDataM,b1);bit_clear(spiDataM,c1);spi_yaz24()                     
....................     #define an_sw2_2_sec() bit_clear(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()                  
....................     #define an_sw2_3_sec() bit_set(spiDataM,a1); bit_clear(spiDataM,b1);bit_set(spiDataM,c1); spi_yaz24()   
....................                                                         
....................     #define an_dFSesSec() bit_clear(spiDataM,a1);bit_set(spiDataM,b1);bit_set(spiDataM,c1);spi_yaz24()  
....................      
....................                          
....................     #define dfSesAyarla() an_dFSesSec();set_adc_channel(0); delay_us(20); \ 
....................                            mp3_set_volume(map(read_adc(),0,1023,0,30))     \ 
....................  
....................     #define an_sa_m1_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m1_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_1_sec() bit_clear(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m2_2_sec() bit_set(spiDataM,a2); bit_set(spiDataM,b2);bit_clear(spiDataM,c2);spi_yaz24() 
....................     #define an_sa_m3_1_sec() bit_clear(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................     #define an_sa_m3_2_sec() bit_set(spiDataM,a2); bit_clear(spiDataM,b2);bit_set(spiDataM,c2);spi_yaz24()  
....................  
....................     #define o1_L1_on()  bit_set(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_on()  bit_set(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_on()  bit_set(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_on() o1_L1_on();o1_L2_on();o1_L3_on() 
....................  
....................     #define o1_L1_off()  bit_clear(spiDataL,l1_1);spi_yaz24() 
....................     #define o1_L2_off()  bit_clear(spiDataL,l1_2);spi_yaz24() 
....................     #define o1_L3_off()  bit_clear(spiDataL,l1_3);spi_yaz24() 
....................     #define o1_L123_off()  o1_L1_off();o1_L2_off();o1_L3_off() 
....................  
....................     #define o2_L1_on()  bit_set(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_on()  bit_set(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_on()  bit_set(spiDataL,l2_3);spi_yaz24() 
....................      #define o2_L123_on() o2_L1_on();o2_L2_on();o2_L3_on() 
....................  
....................     #define o2_L1_off()  bit_clear(spiDataL,l2_1);spi_yaz24() 
....................     #define o2_L2_off()  bit_clear(spiDataL,l2_2);spi_yaz24() 
....................     #define o2_L3_off()  bit_clear(spiDataL,l2_3);spi_yaz24() 
....................     #define o2_L123_off()  o2_L1_off();o2_L2_off();o1_L3_off() 
....................  
....................     #define sw_led_off() o1_L123_off(); o2_L123_off() 
....................     #define sw_led_on() o1_L123_on();o2_L123_on() 
....................      
....................     #define rgb_kirmizi_on()  bit_set(spiDataL,led_k);spi_yaz24() 
....................     #define rgb_kirmizi_off() bit_clear(spiDataL,led_k);spi_yaz24() 
....................      
....................     #define rgb_yesil_on() bit_set(spiDataL,led_y);spi_yaz24() 
....................     #define rgb_yesil_off() bit_clear(spiDataL,led_y);spi_yaz24() 
....................      
....................     #define rgb_mavi_on() bit_set(spiDataM,led_m);spi_yaz24() 
....................     #define rgb_mavi_off() bit_clear(spiDataM,led_m);spi_yaz24() 
....................  
....................     //#define rgb_beyaz_on() rgb_kirmizi_on();rgb_yesil_on();rgb_mavi_on() 
....................     #define rgb_beyaz_on()   bit_set(spiDataL,led_k); bit_set(spiDataL,led_y);  \ 
....................                              bit_set(spiDataM,led_m); spi_yaz24()              \ 
....................  
....................     //#define rgb_beyaz_off() rgb_kirmizi_off();rgb_yesil_off();rgb_mavi_off() 
....................     #define rgb_beyaz_off() bit_clear(spiDataL,led_k);bit_clear(spiDataL,led_y);    \ 
....................                             bit_clear(spiDataM,led_m);spi_yaz24()                   \ 
....................  
....................     #define motor1_ileri() bit_set(spiDataH,in1);    \ 
....................                            bit_clear(spiDataH,in2);  \ 
....................                            spi_yaz24()              \                       
....................                            //output_high(PIN_C2)      \ 
....................                           // Rc2 : ccp1                       
....................     #define motor1_geri()  bit_set(spiDataH,in2);    \ 
....................                            bit_clear(spiDataH,in1);  \ 
....................                            spi_yaz24()              \                       
....................                           // output_high(PIN_C2)    \       //PWM yoksa  
....................     #define motor1_dur() bit_clear(spiDataH,in1);    \ 
....................                          bit_clear(spiDataH,in2);    \                          
....................                          spi_yaz24()                \ 
....................                                   
....................     #define motor2_ileri() bit_set(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()              \                        
....................                           // output_high(PIN_C11)    \       //PWM yoksa  
....................                           // Rc1 : ccp2 
....................     #define motor2_geri()  bit_set(spiDataH,in4);    \ 
....................                            bit_clear(spiDataH,in3);  \ 
....................                            spi_yaz24()              \ 
....................                                     
....................     #define motor2_dur()   bit_clear(spiDataH,in3);    \ 
....................                            bit_clear(spiDataH,in4);  \ 
....................                            spi_yaz24()               \          
....................                            //output_high(PIN_C1)    \       //PWM yoksa    
....................     #define motor3_ileri() bit_set(spiDataH,in5);    \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \      //En pin +5V'ta donanýmda   
....................                                    
....................     #define motor3_geri()  bit_set(spiDataH,in6);    \ 
....................                            bit_clear(spiDataH,in5);  \ 
....................                            spi_yaz24()              \ 
....................                                   
....................     #define motor3_dur()   bit_clear(spiDataH,in5);  \ 
....................                            bit_clear(spiDataH,in6);  \ 
....................                            spi_yaz24()               \ 
....................                             
....................     #define oyunbittiM12dur_doBrk() if(sa_m1_2()||sa_m2_2()||f_oyunBitti)\ 
....................                                     {                                   \ 
....................                                         motor1_dur();                   \ 
....................                                         motor2_dur();                   \ 
....................                                         f_oyunBitti=TRUE;               \  
....................                                         break;                          \ 
....................                                     }                                   \ 
....................                             
....................  
....................      
....................     #define jtn_pin PIN_B0                  //Pin ler  büyük harfle olmalý 
....................     #define ticket_out_pin PIN_C0 
....................      //delay_ms(300);;                               
....................     #define jetonKontrol() if(!input(jtn_pin)){                         \ 
....................                                                                         \ 
....................                             jetonSay++;                                 \ 
....................                            }                                            \ 
....................                            if(jetonSay>=jtnTLMik){                      \ 
....................                                 jetonAtildi=TRUE;                       \ 
....................                                 jetonSay=0;                             \ 
....................                            }                                            \ 
....................      
....................     #define btn1 PIN_A5 
....................     #define btn2 PIN_A3                        
....................     #define btn3 PIN_A2 
....................  
....................    /// wav dosyasý tanýmlamlarý 
....................     /// mp3-wav index 
.................... 	#define wav_atKisnemesi     1 
.................... 	#define wav_atKosmasi       2 
.................... 	#define wav_suDamlasi       3 
.................... 	#define wav_heySesi         4 
.................... 	#define wav_alkisSesi       5 
.................... 	#define wav_oyunBitti       6 
.................... 	#define wav_getReady        7 
.................... 	#define wav_whoosh          8 
.................... 	#define wav_jeton           9 
.................... 	#define mp3_remix           10 
.................... 	#define mp3_tavsan          11 
.................... 	#define wav_waterDrop       12 
.................... 	#define mp3_adele_Rolling   14 
.................... 	#define wav_duduk_basla     15 
.................... 	#define wav_ding            16 
.................... 	#define mp3_mars            17 
.................... 	#define mp3_getlowve_araba	18 
....................     #define mp3_beep_uyari      19 
....................  
....................      //// bosta rastgele mp3 müzik 
....................      
....................     #define mp3_adele_Rolling2  20 
....................     #define mp3_anitta          21 
....................     #define mp3_love_lo         22 
....................     #define mp3_agen            23 
....................     #define mp3_dejavu          24 
....................     #define mp3_rain            25 
....................     #define mp3_aweli           26 
....................  
....................     #define wav_remix_sure 200000 //(3*60+20)*1000  //3:20 mS degeri.... 
....................     #define wav_atKisnemesi_sure  1500 
....................     #define wav_atKosmasi_sure    2000 
....................     #define wav_whoosh_sure  20 //300//350 
....................  
....................     #define oyunSure_1dk    (unsigned int32)(60*1250)//60000UL 
....................     #define oyunSure_3dk    (unsigned int32)(180*1250)//180000UL 
....................     #define oyunSure_5dk    (unsigned int32)(300*1250)//300000UL 
....................     #define oyunSure_7dk    (unsigned int32)(420*1250)//420000UL 
....................     #define oyunSure_10dk   (unsigned int32)(600*1250)//600000UL 
....................  
....................     #define millisMaxSayi 0xFFFFFFFF 
....................  
....................     #define birliDelikPuan 30 
....................     #define ikiliDelikPuan 20 
....................     #define ucluDelikPuan  10 
....................  
....................     #define dfPplayerMaxSes() mp3_set_volume (29);delay_ms(100)//48 
....................     #define dfPlayerNormSes() mp3_set_volume(20);delay_ms(100) 
....................     #define dfPlayerMinSes() mp3_set_volume(1);delay_ms(100) 
....................  
....................     #define textBufSil() text_sil() 
....................  
....................     #define ee_adres_jtnCount   0   //LSB Byte, high 3 
....................     #define ee_adres_jtnTL      4 
....................     #define ee_adres_Msure_1    5   //LSB Byte, high 6 
....................     #define ee_adres_Msure_2    7   //LSB Byte, high 8 
....................     #define ee_adres_Msure_3    9   //LSB Byte, high 10 
....................     #define ee_adres_oyunSure   11 
....................     #define ee_adres_dfSes      12 
....................  
....................  
....................     #define ee_adres_sw11_an_min_0_h      13 
....................     #define ee_adres_sw11_an_min_0_l      14 
....................     #define ee_adres_sw12_an_min_1_h      15 
....................     #define ee_adres_sw12_an_min_1_l      16 
....................     #define ee_adres_sw13_an_min_2_h      17 
....................     #define ee_adres_sw13_an_min_2_l      18 
....................     #define ee_adres_sw21_an_min_3_h      19 
....................     #define ee_adres_sw21_an_min_3_l      20 
....................     #define ee_adres_sw22_an_min_4_h      21 
....................     #define ee_adres_sw22_an_min_4_l      22 
....................     #define ee_adres_sw23_an_min_5_h      23 
....................     #define ee_adres_sw23_an_min_5_l      24 
....................  
....................     #define ee_adres_sw11_an_max_0_h      25 
....................     #define ee_adres_sw11_an_max_0_l      26 
....................     #define ee_adres_sw12_an_max_1_h      27 
....................     #define ee_adres_sw12_an_max_1_l      28 
....................     #define ee_adres_sw13_an_max_2_h      29 
....................     #define ee_adres_sw13_an_max_2_l      30 
....................     #define ee_adres_sw21_an_max_3_h      31 
....................     #define ee_adres_sw21_an_max_3_l      32 
....................     #define ee_adres_sw22_an_max_4_h      33 
....................     #define ee_adres_sw22_an_max_4_l      34 
....................     #define ee_adres_sw23_an_max_5_h      35 
....................     #define ee_adres_sw23_an_max_5_l      36 
....................  
....................     #define ee_adr_an_max_kal_h 37 
....................     #define ee_adr_an_max_kal_l 38 
....................     #define ee_adr_an_min_kal_h 39 
....................     #define ee_adr_an_min_kal_l 40 
....................  
....................     #define ee_adr_sens_okuma_sayisi    41 
....................  
....................  
....................  
....................     #define birDelikAdimSys   5 
....................  
....................     #define SENS_OKU_L    'L'     // Sensor normade low 
....................     #define SENS_OKU_H    'H'     // Sensor normade High  
....................  
....................    // #define SENS_OKU_H_L    SENS_OKU_H   
....................     #define SENS_OKU_H_L    SENS_OKU_L 
....................      
....................  
....................     #define lcd_led PIN_B2 
....................  
....................     //  ****    //// 
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_KART_TANIMLAR_H */ 
....................  
....................  
.................... #include "dfPlayer.h" 
.................... /*  
....................  * File:   dfPlayer.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 28 Þubat 2018 Çarþamba, 16:11 
....................  */ 
....................  
.................... /* 
....................  *	name:				DFPlayer_Mini_Mp3 
....................  *	version:			1.0 
....................  *	Author:				lisper <lisper.li@dfrobot.com> 
....................  *	Date:				2014-05-22 
....................  *	official website:		http://www.dfrobot.com 
....................  *	Products page:			http://www.dfrobot.com/index.php?route=product/product&product_id=1121#.U5Z_RYbUN8E 
....................  *	Description:			mp3 library for DFPlayer mini board 
....................  *					        note: mp3 file must put into mp3 folder in your tf card 
....................  */ 
....................  
.................... #ifndef DFPLAYER_H 
.................... #define	DFPLAYER_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................     typedef unsigned char mbyte; 
....................      
....................     #define startByte 0x7E 
....................     #define endByte 0xEF 
....................     #define versionByte 0xFF 
....................     #define dataLength 0x06 
....................     #define infoReq 0x01        //0x01 
....................     #define isDebug false 
....................     #define dfPlayerMaxSes 30 // dec30:0x1E 
....................  
....................     #define DF_BUSY_PIN  PIN_B1 //PIN_B3 
....................  
....................     void sendCommand(mbyte Command, mbyte Param1, mbyte Param2); 
....................     void mp3_set_volume (char vol); 
....................     void mp3_set_equalizer(char eq); 
....................     void mp3_play_physical(unsigned int16 fileNum); 
....................     void mp3_get_error (); 
....................     void mp3_single_loop (unsigned int16 fileNum) ; 
....................     void mp3_enableLoopAll(); 
....................     void mp3_disbleLoopAll(); 
....................     void mp3_getData(*dizi); 
....................     void mp3_DataSeriGonder(*dizi,char len); 
....................     void mp3_stop(); 
....................     void mp3_reset(); 
....................     void mp3_baslangic(); 
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* DFPLAYER_H */ 
....................  
....................  
.................... #include "kostur_anim.h" 
.................... /*  
....................  * File:   kostur_anim.h 
....................  * Author: ilyas 
....................  * 
....................  * Created on 21 Nisan 2018 Cumartesi, 08:31 
....................  */ 
....................  
.................... #ifndef KOSTUR_ANIM_H 
.................... #define	KOSTUR_ANIM_H 
....................  
.................... #ifdef	__cplusplus 
.................... extern "C" { 
.................... #endif 
....................  
....................     #define led_animKarasimsek  0 
....................     #define led_animKarinca     1 
....................     #define led_animBlink       2 
....................     #define led_animVumetre     3 
....................  
....................     #define P10_animKosturBlink 4 
....................     #define P10_SirketReklam    5 
....................     #define P10_animTL          6 
....................     #define P10_animMaxSurePuan 7 
....................      
....................  
....................     void led_anim_bosta(int animSay); 
....................     void p10_oyun_puan_goster(unsigned int16 o1Puan,unsigned int16 o2Puan); 
....................  
....................  
....................  
.................... #ifdef	__cplusplus 
.................... } 
.................... #endif 
....................  
.................... #endif	/* KOSTUR_ANIM_H */ 
....................  
....................  
....................  
.................... unsigned int32 p10puanSureBasla=0; 
.................... unsigned int32 oyunSureSayBasla=0;      // 
.................... //int y1=-1,y2=-1; 
....................  
.................... int1 jetonDurum=FALSE; 
.................... int8 dfPlayer_ses=20; 
.................... int8 jtnTLMik=1; 
....................  
.................... void jetonAtildiIslem(){ 
*
1B06:  MOVLB  1
1B08:  CLRF   x5F
....................      
....................     int i=0; 
....................     o1_puan=0; 
1B0A:  MOVLB  0
1B0C:  CLRF   x7E
1B0E:  CLRF   x7D
....................     o2_puan=0; 
1B10:  CLRF   x80
1B12:  CLRF   x7F
....................     jetonAtildi=FALSE ; 
1B14:  MOVLB  1
1B16:  BCF    x40.1
....................      
....................     mp3_stop(); 
1B18:  MOVLB  0
1B1A:  CALL   11A8
1B1E:  CLRF   19
1B20:  BTFSC  FF2.7
1B22:  BSF    19.7
1B24:  BCF    FF2.7
....................     delay_ms(100); 
1B26:  MOVLW  64
1B28:  MOVLB  1
1B2A:  MOVWF  x86
1B2C:  MOVLB  0
1B2E:  CALL   0834
1B32:  BTFSC  19.7
1B34:  BSF    FF2.7
....................     dfPplayerMaxSes();  
1B36:  MOVLW  1D
1B38:  MOVLB  1
1B3A:  MOVWF  x65
1B3C:  MOVLB  0
1B3E:  CALL   1182
1B42:  CLRF   19
1B44:  BTFSC  FF2.7
1B46:  BSF    19.7
1B48:  BCF    FF2.7
1B4A:  MOVLW  64
1B4C:  MOVLB  1
1B4E:  MOVWF  x86
1B50:  MOVLB  0
1B52:  CALL   0834
1B56:  BTFSC  19.7
1B58:  BSF    FF2.7
1B5A:  CLRF   19
1B5C:  BTFSC  FF2.7
1B5E:  BSF    19.7
1B60:  BCF    FF2.7
....................     delay_ms(100); 
1B62:  MOVLW  64
1B64:  MOVLB  1
1B66:  MOVWF  x86
1B68:  MOVLB  0
1B6A:  CALL   0834
1B6E:  BTFSC  19.7
1B70:  BSF    FF2.7
....................     mp3_play_physical(wav_jeton); 
1B72:  MOVLB  1
1B74:  CLRF   x61
1B76:  MOVLW  09
1B78:  MOVWF  x60
1B7A:  MOVLB  0
1B7C:  GOTO   128E
....................     delay_ms(1000); 
1B80:  MOVLW  04
1B82:  MOVLB  1
1B84:  MOVWF  x60
1B86:  CLRF   19
1B88:  BTFSC  FF2.7
1B8A:  BSF    19.7
1B8C:  BCF    FF2.7
1B8E:  MOVLW  FA
1B90:  MOVWF  x86
1B92:  MOVLB  0
1B94:  CALL   0834
1B98:  BTFSC  19.7
1B9A:  BSF    FF2.7
1B9C:  MOVLB  1
1B9E:  DECFSZ x60,F
1BA0:  BRA    1B86
....................  
....................     //P10_Currentfonts=Font8x8; 
.................... //    P10_Currentfonts=Font11x12; 
.................... //    textBufSil(); 
.................... //    for(i=0;i<8;i++){ 
.................... //        P10_Clear_Display(1); 
.................... //        delay_ms(5);     
.................... //        P10_Clear_Display(0);     
.................... //        delay_ms(5); 
.................... //         
.................... //        textBufSil();sprintf(text,"Oyun"); 
.................... //        P10_DisplayShowString(1,0,text, 0); 
.................... //        delay_ms(50); 
.................... // 
.................... //    } 
....................  
....................     //mp3_stop(); 
....................      
....................     rgb_beyaz_on();    
1BA2:  BSF    48.6
1BA4:  BSF    48.7
1BA6:  BSF    47.0
1BA8:  MOVFF  46,16C
1BAC:  MOVFF  47,16D
1BB0:  MOVFF  48,16E
1BB4:  MOVLB  0
1BB6:  CALL   092A
....................     sw_led_off(); 
1BBA:  BCF    48.3
1BBC:  MOVFF  46,16C
1BC0:  MOVFF  47,16D
1BC4:  MOVFF  48,16E
1BC8:  CALL   092A
1BCC:  BCF    48.4
1BCE:  MOVFF  46,16C
1BD2:  MOVFF  47,16D
1BD6:  MOVFF  48,16E
1BDA:  CALL   092A
1BDE:  BCF    48.5
1BE0:  MOVFF  46,16C
1BE4:  MOVFF  47,16D
1BE8:  MOVFF  48,16E
1BEC:  CALL   092A
1BF0:  BCF    48.0
1BF2:  MOVFF  46,16C
1BF6:  MOVFF  47,16D
1BFA:  MOVFF  48,16E
1BFE:  CALL   092A
1C02:  BCF    48.1
1C04:  MOVFF  46,16C
1C08:  MOVFF  47,16D
1C0C:  MOVFF  48,16E
1C10:  CALL   092A
1C14:  BCF    48.5
1C16:  MOVFF  46,16C
1C1A:  MOVFF  47,16D
1C1E:  MOVFF  48,16E
1C22:  CALL   092A
....................     mp3_play(wav_getReady); 
1C26:  MOVLB  1
1C28:  CLRF   x67
1C2A:  MOVLW  07
1C2C:  MOVWF  x66
1C2E:  MOVLB  0
1C30:  CALL   11B8
....................      
....................     if(read_eeprom(ee_adres_Msure_1)!=0xFF && read_eeprom(ee_adres_Msure_1+1)!=0xFF){ 
1C34:  MOVFF  FF2,160
1C38:  BCF    FF2.7
1C3A:  MOVLW  05
1C3C:  MOVWF  FA9
1C3E:  BCF    FA6.6
1C40:  BCF    FA6.7
1C42:  BSF    FA6.0
1C44:  MOVF   FA8,W
1C46:  MOVLB  1
1C48:  BTFSC  x60.7
1C4A:  BSF    FF2.7
1C4C:  SUBLW  FF
1C4E:  BZ    1CCA
1C50:  MOVFF  FF2,161
1C54:  BCF    FF2.7
1C56:  MOVLW  06
1C58:  MOVWF  FA9
1C5A:  BCF    FA6.6
1C5C:  BCF    FA6.7
1C5E:  BSF    FA6.0
1C60:  MOVF   FA8,W
1C62:  BTFSC  x61.7
1C64:  BSF    FF2.7
1C66:  SUBLW  FF
1C68:  BZ    1CCA
....................         m1_birliDelik_sure=make16(read_eeprom(ee_adres_Msure_1+1),read_eeprom(ee_adres_Msure_1)); 
1C6A:  MOVFF  FF2,160
1C6E:  BCF    FF2.7
1C70:  MOVLW  06
1C72:  MOVWF  FA9
1C74:  BCF    FA6.6
1C76:  BCF    FA6.7
1C78:  BSF    FA6.0
1C7A:  MOVF   FA8,W
1C7C:  BTFSC  x60.7
1C7E:  BSF    FF2.7
1C80:  MOVWF  x61
1C82:  MOVFF  FF2,162
1C86:  BCF    FF2.7
1C88:  MOVLW  05
1C8A:  MOVWF  FA9
1C8C:  BCF    FA6.6
1C8E:  BCF    FA6.7
1C90:  BSF    FA6.0
1C92:  MOVF   FA8,W
1C94:  BTFSC  x62.7
1C96:  BSF    FF2.7
1C98:  MOVWF  x63
1C9A:  MOVFF  161,72
1C9E:  MOVFF  163,71
....................         m1_ucluDelik_sure=(unsigned int16)(m1_birliDelik_sure/3); 
1CA2:  MOVFF  72,167
1CA6:  MOVFF  71,166
1CAA:  CLRF   x69
1CAC:  MOVLW  03
1CAE:  MOVWF  x68
1CB0:  MOVLB  0
1CB2:  CALL   0AFC
1CB6:  MOVFF  02,76
1CBA:  MOVFF  01,75
....................         m1_ikiliDelik_sure=(unsigned int16)(m1_ucluDelik_sure*2); 
1CBE:  BCF    FD8.0
1CC0:  RLCF   x75,W
1CC2:  MOVWF  x73
1CC4:  RLCF   x76,W
1CC6:  MOVWF  x74
1CC8:  MOVLB  1
....................     } 
....................      if(read_eeprom(ee_adres_Msure_2)!=0xFF && read_eeprom(ee_adres_Msure_2+1)!=0xFF){ 
1CCA:  MOVFF  FF2,160
1CCE:  BCF    FF2.7
1CD0:  MOVLW  07
1CD2:  MOVWF  FA9
1CD4:  BCF    FA6.6
1CD6:  BCF    FA6.7
1CD8:  BSF    FA6.0
1CDA:  MOVF   FA8,W
1CDC:  BTFSC  x60.7
1CDE:  BSF    FF2.7
1CE0:  SUBLW  FF
1CE2:  BZ    1D5E
1CE4:  MOVFF  FF2,161
1CE8:  BCF    FF2.7
1CEA:  MOVLW  08
1CEC:  MOVWF  FA9
1CEE:  BCF    FA6.6
1CF0:  BCF    FA6.7
1CF2:  BSF    FA6.0
1CF4:  MOVF   FA8,W
1CF6:  BTFSC  x61.7
1CF8:  BSF    FF2.7
1CFA:  SUBLW  FF
1CFC:  BZ    1D5E
....................         m2_birliDelik_sure=make16(read_eeprom(ee_adres_Msure_2+1),read_eeprom(ee_adres_Msure_2)); 
1CFE:  MOVFF  FF2,160
1D02:  BCF    FF2.7
1D04:  MOVLW  08
1D06:  MOVWF  FA9
1D08:  BCF    FA6.6
1D0A:  BCF    FA6.7
1D0C:  BSF    FA6.0
1D0E:  MOVF   FA8,W
1D10:  BTFSC  x60.7
1D12:  BSF    FF2.7
1D14:  MOVWF  x61
1D16:  MOVFF  FF2,162
1D1A:  BCF    FF2.7
1D1C:  MOVLW  07
1D1E:  MOVWF  FA9
1D20:  BCF    FA6.6
1D22:  BCF    FA6.7
1D24:  BSF    FA6.0
1D26:  MOVF   FA8,W
1D28:  BTFSC  x62.7
1D2A:  BSF    FF2.7
1D2C:  MOVWF  x63
1D2E:  MOVFF  161,78
1D32:  MOVFF  163,77
....................         m2_ucluDelik_sure=(unsigned int16)(m2_birliDelik_sure/3); 
1D36:  MOVFF  78,167
1D3A:  MOVFF  77,166
1D3E:  CLRF   x69
1D40:  MOVLW  03
1D42:  MOVWF  x68
1D44:  MOVLB  0
1D46:  CALL   0AFC
1D4A:  MOVFF  02,7C
1D4E:  MOVFF  01,7B
....................         m2_ikiliDelik_sure=(unsigned int16)(m2_ucluDelik_sure*2); 
1D52:  BCF    FD8.0
1D54:  RLCF   x7B,W
1D56:  MOVWF  x79
1D58:  RLCF   x7C,W
1D5A:  MOVWF  x7A
1D5C:  MOVLB  1
....................     } 
....................     if(read_eeprom(ee_adres_oyunSure)!=0xFF) ee_oyunSure=read_eeprom(ee_adres_oyunSure); 
1D5E:  MOVFF  FF2,160
1D62:  BCF    FF2.7
1D64:  MOVLW  0B
1D66:  MOVWF  FA9
1D68:  BCF    FA6.6
1D6A:  BCF    FA6.7
1D6C:  BSF    FA6.0
1D6E:  MOVF   FA8,W
1D70:  BTFSC  x60.7
1D72:  BSF    FF2.7
1D74:  SUBLW  FF
1D76:  BZ    1D94
1D78:  MOVFF  FF2,160
1D7C:  BCF    FF2.7
1D7E:  MOVLW  0B
1D80:  MOVWF  FA9
1D82:  BCF    FA6.6
1D84:  BCF    FA6.7
1D86:  BSF    FA6.0
1D88:  MOVF   FA8,W
1D8A:  BTFSC  x60.7
1D8C:  BSF    FF2.7
1D8E:  MOVLB  0
1D90:  MOVWF  x86
1D92:  BRA    1D9A
....................     else ee_oyunSure=2; 
1D94:  MOVLW  02
1D96:  MOVLB  0
1D98:  MOVWF  x86
....................      
....................     //her durumda oyun baþlamadan önce sensortlerin max degeri oku... 
....................     an_max_min_reset(); 
1D9A:  CALL   12AC
....................  
....................     //ee_sens_kalibre_oku();//an min ee de varsa min okunur yoksa min deger reset  degeridir... 
....................     //an_max_adc_oku();  
....................     printf(lcd_putc,"\fMAX:%Lu,%Lu,%Lu",an_max[0],an_max[1],an_max[2]); 
1D9E:  MOVLW  FA
1DA0:  MOVWF  FF6
1DA2:  MOVLW  05
1DA4:  MOVWF  FF7
1DA6:  MOVLW  05
1DA8:  MOVLB  1
1DAA:  MOVWF  x69
1DAC:  MOVLB  0
1DAE:  CALL   0C0E
1DB2:  MOVLW  10
1DB4:  MOVWF  FE9
1DB6:  MOVFF  98,167
1DBA:  MOVFF  97,166
1DBE:  CALL   12F4
1DC2:  CLRF   19
1DC4:  BTFSC  FF2.7
1DC6:  BSF    19.7
1DC8:  BCF    FF2.7
1DCA:  MOVLW  2C
1DCC:  MOVLB  1
1DCE:  MOVWF  x85
1DD0:  MOVLB  0
1DD2:  CALL   0884
1DD6:  BTFSC  19.7
1DD8:  BSF    FF2.7
1DDA:  MOVLW  10
1DDC:  MOVWF  FE9
1DDE:  MOVFF  9A,167
1DE2:  MOVFF  99,166
1DE6:  CALL   12F4
1DEA:  CLRF   19
1DEC:  BTFSC  FF2.7
1DEE:  BSF    19.7
1DF0:  BCF    FF2.7
1DF2:  MOVLW  2C
1DF4:  MOVLB  1
1DF6:  MOVWF  x85
1DF8:  MOVLB  0
1DFA:  CALL   0884
1DFE:  BTFSC  19.7
1E00:  BSF    FF2.7
1E02:  MOVLW  10
1E04:  MOVWF  FE9
1E06:  MOVFF  9C,167
1E0A:  MOVFF  9B,166
1E0E:  CALL   12F4
1E12:  CLRF   19
1E14:  BTFSC  FF2.7
1E16:  BSF    19.7
1E18:  BCF    FF2.7
....................     printf(lcd_putc,"\n%Lu,%Lu,%Lu:%Lu",an_max[3],an_max[4],an_max[5],an_max_ort); 
1E1A:  MOVLW  0A
1E1C:  MOVLB  1
1E1E:  MOVWF  x85
1E20:  MOVLB  0
1E22:  CALL   0884
1E26:  BTFSC  19.7
1E28:  BSF    FF2.7
1E2A:  MOVLW  10
1E2C:  MOVWF  FE9
1E2E:  MOVFF  9E,167
1E32:  MOVFF  9D,166
1E36:  CALL   12F4
1E3A:  CLRF   19
1E3C:  BTFSC  FF2.7
1E3E:  BSF    19.7
1E40:  BCF    FF2.7
1E42:  MOVLW  2C
1E44:  MOVLB  1
1E46:  MOVWF  x85
1E48:  MOVLB  0
1E4A:  CALL   0884
1E4E:  BTFSC  19.7
1E50:  BSF    FF2.7
1E52:  MOVLW  10
1E54:  MOVWF  FE9
1E56:  MOVFF  A0,167
1E5A:  MOVFF  9F,166
1E5E:  CALL   12F4
1E62:  CLRF   19
1E64:  BTFSC  FF2.7
1E66:  BSF    19.7
1E68:  BCF    FF2.7
1E6A:  MOVLW  2C
1E6C:  MOVLB  1
1E6E:  MOVWF  x85
1E70:  MOVLB  0
1E72:  CALL   0884
1E76:  BTFSC  19.7
1E78:  BSF    FF2.7
1E7A:  MOVLW  10
1E7C:  MOVWF  FE9
1E7E:  MOVFF  A2,167
1E82:  MOVFF  A1,166
1E86:  CALL   12F4
1E8A:  CLRF   19
1E8C:  BTFSC  FF2.7
1E8E:  BSF    19.7
1E90:  BCF    FF2.7
1E92:  MOVLW  3A
1E94:  MOVLB  1
1E96:  MOVWF  x85
1E98:  MOVLB  0
1E9A:  CALL   0884
1E9E:  BTFSC  19.7
1EA0:  BSF    FF2.7
1EA2:  MOVLW  10
1EA4:  MOVWF  FE9
1EA6:  MOVFF  B2,167
1EAA:  MOVFF  B1,166
1EAE:  CALL   12F4
....................     delay_ms(1500); 
1EB2:  MOVLW  06
1EB4:  MOVLB  1
1EB6:  MOVWF  x60
1EB8:  CLRF   19
1EBA:  BTFSC  FF2.7
1EBC:  BSF    19.7
1EBE:  BCF    FF2.7
1EC0:  MOVLW  FA
1EC2:  MOVWF  x86
1EC4:  MOVLB  0
1EC6:  CALL   0834
1ECA:  BTFSC  19.7
1ECC:  BSF    FF2.7
1ECE:  MOVLB  1
1ED0:  DECFSZ x60,F
1ED2:  BRA    1EB8
....................     printf(lcd_putc,"\fMIN:%Lu,%Lu,%Lu",an_min[0],an_min[1],an_min[2]); 
1ED4:  MOVLW  0C
1ED6:  MOVWF  FF6
1ED8:  MOVLW  06
1EDA:  MOVWF  FF7
1EDC:  MOVLW  05
1EDE:  MOVWF  x69
1EE0:  MOVLB  0
1EE2:  CALL   0C0E
1EE6:  MOVLW  10
1EE8:  MOVWF  FE9
1EEA:  MOVFF  8A,167
1EEE:  MOVFF  89,166
1EF2:  CALL   12F4
1EF6:  CLRF   19
1EF8:  BTFSC  FF2.7
1EFA:  BSF    19.7
1EFC:  BCF    FF2.7
1EFE:  MOVLW  2C
1F00:  MOVLB  1
1F02:  MOVWF  x85
1F04:  MOVLB  0
1F06:  CALL   0884
1F0A:  BTFSC  19.7
1F0C:  BSF    FF2.7
1F0E:  MOVLW  10
1F10:  MOVWF  FE9
1F12:  MOVFF  8C,167
1F16:  MOVFF  8B,166
1F1A:  CALL   12F4
1F1E:  CLRF   19
1F20:  BTFSC  FF2.7
1F22:  BSF    19.7
1F24:  BCF    FF2.7
1F26:  MOVLW  2C
1F28:  MOVLB  1
1F2A:  MOVWF  x85
1F2C:  MOVLB  0
1F2E:  CALL   0884
1F32:  BTFSC  19.7
1F34:  BSF    FF2.7
1F36:  MOVLW  10
1F38:  MOVWF  FE9
1F3A:  MOVFF  8E,167
1F3E:  MOVFF  8D,166
1F42:  CALL   12F4
1F46:  CLRF   19
1F48:  BTFSC  FF2.7
1F4A:  BSF    19.7
1F4C:  BCF    FF2.7
....................     printf(lcd_putc,"\n%Lu,%Lu,%Lu",an_min[3],an_min[4],an_min[5]); 
1F4E:  MOVLW  0A
1F50:  MOVLB  1
1F52:  MOVWF  x85
1F54:  MOVLB  0
1F56:  CALL   0884
1F5A:  BTFSC  19.7
1F5C:  BSF    FF2.7
1F5E:  MOVLW  10
1F60:  MOVWF  FE9
1F62:  MOVFF  90,167
1F66:  MOVFF  8F,166
1F6A:  CALL   12F4
1F6E:  CLRF   19
1F70:  BTFSC  FF2.7
1F72:  BSF    19.7
1F74:  BCF    FF2.7
1F76:  MOVLW  2C
1F78:  MOVLB  1
1F7A:  MOVWF  x85
1F7C:  MOVLB  0
1F7E:  CALL   0884
1F82:  BTFSC  19.7
1F84:  BSF    FF2.7
1F86:  MOVLW  10
1F88:  MOVWF  FE9
1F8A:  MOVFF  92,167
1F8E:  MOVFF  91,166
1F92:  CALL   12F4
1F96:  CLRF   19
1F98:  BTFSC  FF2.7
1F9A:  BSF    19.7
1F9C:  BCF    FF2.7
1F9E:  MOVLW  2C
1FA0:  MOVLB  1
1FA2:  MOVWF  x85
1FA4:  MOVLB  0
1FA6:  CALL   0884
1FAA:  BTFSC  19.7
1FAC:  BSF    FF2.7
1FAE:  MOVLW  10
1FB0:  MOVWF  FE9
1FB2:  MOVFF  94,167
1FB6:  MOVFF  93,166
1FBA:  CALL   12F4
....................     delay_ms(1500); 
1FBE:  MOVLW  06
1FC0:  MOVLB  1
1FC2:  MOVWF  x60
1FC4:  CLRF   19
1FC6:  BTFSC  FF2.7
1FC8:  BSF    19.7
1FCA:  BCF    FF2.7
1FCC:  MOVLW  FA
1FCE:  MOVWF  x86
1FD0:  MOVLB  0
1FD2:  CALL   0834
1FD6:  BTFSC  19.7
1FD8:  BSF    FF2.7
1FDA:  MOVLB  1
1FDC:  DECFSZ x60,F
1FDE:  BRA    1FC4
....................  
....................     dfPplayerMaxSes(); 
1FE0:  MOVLW  1D
1FE2:  MOVWF  x65
1FE4:  MOVLB  0
1FE6:  CALL   1182
1FEA:  CLRF   19
1FEC:  BTFSC  FF2.7
1FEE:  BSF    19.7
1FF0:  BCF    FF2.7
1FF2:  MOVLW  64
1FF4:  MOVLB  1
1FF6:  MOVWF  x86
1FF8:  MOVLB  0
1FFA:  CALL   0834
1FFE:  BTFSC  19.7
2000:  BSF    FF2.7
....................     mp3_stop(); 
2002:  CALL   11A8
2006:  CLRF   19
2008:  BTFSC  FF2.7
200A:  BSF    19.7
200C:  BCF    FF2.7
....................     delay_ms(100); 
200E:  MOVLW  64
2010:  MOVLB  1
2012:  MOVWF  x86
2014:  MOVLB  0
2016:  CALL   0834
201A:  BTFSC  19.7
201C:  BSF    FF2.7
....................     mp3_play(mp3_remix); 
201E:  MOVLB  1
2020:  CLRF   x67
2022:  MOVLW  0A
2024:  MOVWF  x66
2026:  MOVLB  0
2028:  CALL   11B8
....................    // mp3_play_physical(wav_remix); 
....................    // delay_ms(100); 
....................  
....................     for(i=0;i<10;i++) { 
202C:  MOVLB  1
202E:  CLRF   x5F
2030:  MOVF   x5F,W
2032:  SUBLW  09
2034:  BNC   2048
....................         sw_sa_algila=swSaAlgila(SENS_OKU_H_L); 
2036:  MOVLW  4C
2038:  MOVWF  x65
203A:  MOVLB  0
203C:  RCALL  1986
203E:  MOVFF  01,4E
2042:  MOVLB  1
2044:  INCF   x5F,F
2046:  BRA    2030
....................     } 
....................      
....................     motor3_ileri(); 
2048:  BSF    46.4
204A:  BCF    46.5
204C:  MOVFF  46,16C
2050:  MOVFF  47,16D
2054:  MOVFF  48,16E
2058:  MOVLB  0
205A:  CALL   092A
....................      
.................... //    do{           //Çekme motoru yerine dc gear motor kullanýlýrsa... 
.................... //        if(sa_m3_2()){ 
.................... //           motor3_dur(); 
.................... //           break; 
.................... //        } 
.................... //    }while(1); 
....................      
....................    delay_ms(500); 
205E:  MOVLW  02
2060:  MOVLB  1
2062:  MOVWF  x60
2064:  CLRF   19
2066:  BTFSC  FF2.7
2068:  BSF    19.7
206A:  BCF    FF2.7
206C:  MOVLW  FA
206E:  MOVWF  x86
2070:  MOVLB  0
2072:  CALL   0834
2076:  BTFSC  19.7
2078:  BSF    FF2.7
207A:  MOVLB  1
207C:  DECFSZ x60,F
207E:  BRA    2064
....................    motor3_dur(); 
2080:  BCF    46.4
2082:  BCF    46.5
2084:  MOVFF  46,16C
2088:  MOVFF  47,16D
208C:  MOVFF  48,16E
2090:  MOVLB  0
2092:  CALL   092A
....................      
.................... //    for(i=0;i<10;i++){ 
.................... //        P10_Clear_Display(1); 
.................... //        delay_ms(5);     
.................... //        P10_Clear_Display(0);     
.................... //        delay_ms(5); 
.................... //         
.................... //        textBufSil();sprintf(text,"Basliyor"); 
.................... //        P10_DisplayShowString(1,0,text, 0); 
.................... //        delay_ms(50); 
.................... //    } 
.................... //     
.................... //    P10_Clear_Display(0); 
.................... //    textBufSil();sprintf(text,"---  ---"); 
.................... //    P10_DisplayShowString(1,0,text, 0); 
....................    
....................     jetonDurum=TRUE; 
2096:  MOVLB  1
2098:  BSF    x40.0
....................  
....................    // enable_interrupts(INT_TIMER3); 
....................      
....................     //delay_ms(1000); 
....................     //delay_ms(500); 
....................     oyunSureSaySaniye=0; 
209A:  CLRF   37
209C:  CLRF   36
209E:  CLRF   35
20A0:  CLRF   34
20A2:  MOVLB  0
20A4:  GOTO   5210 (RETURN)
....................     //P10_Clear_Display(0); 
....................      
....................    // p10_oyun_puan_goster(0,0); 
....................              
.................... } 
....................  
.................... void p10_oyun_puan_goster(unsigned int16 o1Puan,unsigned int16 o2Puan) 
.................... { 
....................      
....................     char t1[8],t2[8]; 
....................     rgb_beyaz_on(); 
....................     sw_led_off(); 
....................      
....................     //P10_Currentfonts=Font8x8; 
....................     //P10_Currentfonts=Font11x12; 
....................    // P10_Clear_Display(1); 
....................     delay_ms(5);     
....................     //P10_Clear_Display(0);     
....................     delay_ms(5); 
....................      
....................     sprintf(t1,"%Lu",o1Puan); 
....................     sprintf(t2,"%Lu",o2Puan); 
.................... //    P10_DisplayShowString(0,0,t1, 0); 
.................... //    P10_DisplayShowString(52,0,t2, 0); 
....................       
....................      printf(lcd_putc,"\f_O1_    _O2_\n"); 
....................      printf(lcd_putc,"  %Lu      %Lu  ",o1Puan,o2Puan); 
....................  
.................... //    if(yeniPuan_o1){ 
.................... // 
.................... //        if(y1==-1){ 
.................... //            P10_Clear_Display(0); 
.................... //            y1++; 
.................... //        } 
.................... //         
.................... //        if(millis()-p10puanSureBasla>50){ 
.................... //             p10_DisplayShowString(0,y1,t1, 0); 
.................... //             p10puanSureBasla=millis(); 
.................... //             y1++; 
.................... //        } 
.................... //        if(y1>3){ 
.................... //            y1=-1; 
.................... //            p10puanSureBasla=millis(); 
.................... //            P10_Clear_Display(0); 
.................... //            //delay_ms(10); 
.................... // 
.................... //            P10_DisplayShowString(0,4,t1, 0); 
.................... //            P10_DisplayShowString(64,4,t2, 0); 
.................... //            yeniPuan_o1=FALSE; 
.................... //        } 
.................... // 
.................... //    }else if(yeniPuan_o2){ 
.................... //         
.................... //        if(y2==-1){ 
.................... //            P10_Clear_Display(0); 
.................... //            y2++; 
.................... //        } 
.................... //        if(millis()-p10puanSureBasla>50){ 
.................... //            P10_DisplayShowString(64,y2,t2, 0); 
.................... //            p10puanSureBasla=millis(); 
.................... //            y2++; 
.................... //        } 
.................... //        if(y2>3){ 
.................... //            y2=-1; 
.................... //            p10puanSureBasla=millis(); 
.................... //            P10_Clear_Display(0); 
.................... //            //delay_ms(10); 
.................... // 
.................... //            P10_DisplayShowString(0,4,t1, 0); 
.................... //            P10_DisplayShowString(64,4,t2, 0); 
.................... //            yeniPuan_o2=FALSE; 
.................... //        } 
.................... // 
.................... //    } else{ 
.................... //         
.................... //        //P10_Clear_Display(0); 
.................... //        //delay_us(500); 
.................... //        P10_DisplayShowString(0,4,t1, 0); 
.................... //        P10_DisplayShowString(64,4,t2, 0); 
.................... //    } 
....................       
.................... } 
....................  
.................... void p10_oyun_bitti(unsigned int16 o1Puan,unsigned int16 o2Puan,unsigned int16 oyunSure){ 
....................  
....................     //P10_Clear_Display(0); 
....................     //P10_Currentfonts=Font8x8; 
....................     //P10_Currentfonts=Font11x12; 
....................     hc_595_clr_allPins(); 
....................     mp3_stop(); 
....................     dfPplayerMaxSes(); 
....................     mp3_disbleLoopAll(); 
....................     mp3_play_physical(wav_oyunBitti); 
....................      
....................     printf(lcd_putc,"\f  OYUN BITTI \n"); 
....................     printf(lcd_putc,"%Lu - %Lu - S=%LU",o1Puan,o2Puan,oyunSure); 
....................      
....................    // textBufSil(); 
....................     sprintf(text,"Bitti..."); 
....................    // P10_DisplayShowString(1,0,text, 0); 
....................  
....................     delay_ms(1000); 
....................    
....................     //P10_Clear_Display(0); 
....................     if(o1Puan>o2Puan){ 
....................          //textBufSil(); 
....................          sprintf(text,"Kazanan Oyuncu 1 Puan=%lu ",o1Puan); 
....................          //P10_DisplayScrollString(0,11,0,10,text,0); 
....................     } else if(o1Puan<o2Puan){ 
....................          //textBufSil(); 
....................          sprintf(text,"Kazanan Oyuncu 2 Puan=%lu ",o2Puan); 
....................          //P10_DisplayScrollString(0,11,0,10,text,0); 
....................     }else{ 
....................         //textBufSil(); 
....................         sprintf(text,"<<< Berabere Kaldiniz..."); 
....................         //P10_DisplayScrollString(0,11,0,10,text,0); 
....................     } 
.................... //    P10_Clear_Display(0); 
....................     //textBufSil(); 
....................     sprintf(text,"Sure:%Lu saniye  ",oyunSure); 
....................     //P10_DisplayScrollString(0,11,0,10,text,0); 
....................     //P10_Clear_Display(0); 
....................    // textBufSil(); 
....................     sprintf(text,"%Lu Sn.",oyunSure); 
....................     //P10_DisplayShowString(1,0,text, 0); 
....................      
....................     mp3_stop(); 
....................     mp3_play_physical(wav_alkisSesi); 
....................     delay_ms(1000); 
....................  
....................     mp3_stop(); 
....................     mp3_play(mp3_remix); 
....................      
.................... } 
....................  
.................... int8 p10_kosturAnim(){ 
....................       //P10_Clear_Display(0); 
....................     //P10_Currentfonts=Font11x12; 
.................... //    textBufSil(); 
....................     text="KOSTUR"; 
*
4704:  CLRF   FEA
4706:  MOVLW  DC
4708:  MOVWF  FE9
470A:  MOVLW  00
470C:  CALL   0178
4710:  TBLRD*-
4712:  TBLRD*+
4714:  MOVF   FF5,W
4716:  MOVWF  FEE
4718:  IORLW  00
471A:  BNZ   4712
....................     for(int i=0;i<5;i++){ 
471C:  MOVLB  1
471E:  CLRF   x5F
4720:  MOVF   x5F,W
4722:  SUBLW  04
4724:  BNC   4778
....................         hc_595_clr_allPins(); 
4726:  CLRF   x6C
4728:  CLRF   x6D
472A:  CLRF   x6E
472C:  MOVLB  0
472E:  CALL   092A
....................         //P10_Clear_Display(1); 
....................         //P10_DisplayShowString(15,0,text, 1); 
....................         hc_595_set_allPins(); 
4732:  MOVLB  1
4734:  SETF   x6C
4736:  SETF   x6D
4738:  SETF   x6E
473A:  MOVLB  0
473C:  CALL   092A
4740:  CLRF   19
4742:  BTFSC  FF2.7
4744:  BSF    19.7
4746:  BCF    FF2.7
4748:  MOVLW  64
474A:  MOVLB  1
474C:  MOVWF  x86
474E:  MOVLB  0
4750:  CALL   0834
4754:  BTFSC  19.7
4756:  BSF    FF2.7
....................         //P10_Clear_Display(0); 
....................         //P10_DisplayShowString(15,0,text, 0); 
....................         jetonKontrol(); if(jetonAtildi) return 0; 
4758:  BTFSC  F81.0
475A:  BRA    475E
475C:  INCF   49,F
475E:  MOVLB  1
4760:  MOVF   x41,W
4762:  SUBWF  49,W
4764:  BNC   476A
4766:  BSF    x40.1
4768:  CLRF   49
476A:  BTFSS  x40.1
476C:  BRA    4774
476E:  MOVLW  00
4770:  MOVWF  01
4772:  BRA    4778
4774:  INCF   x5F,F
4776:  BRA    4720
....................     } 
4778:  MOVLB  0
477A:  GOTO   5C60 (RETURN)
.................... } 
.................... int8 p10_TL_anim(){ 
*
491E:  MOVFF  FF2,162
4922:  BCF    FF2.7
4924:  MOVLW  04
4926:  MOVWF  FA9
4928:  BCF    FA6.6
492A:  BCF    FA6.7
492C:  BSF    FA6.0
492E:  MOVF   FA8,W
4930:  MOVLB  1
4932:  BTFSC  x62.7
4934:  BSF    FF2.7
4936:  MOVWF  x5F
....................      
....................       // P10_Clear_Display(0); 
....................     int jtnTLmiktari=read_eeprom(ee_adres_jtnTL); 
....................     if(jtnTLmiktari==255) jtnTLmiktari=1; 
4938:  INCFSZ x5F,W
493A:  BRA    4940
493C:  MOVLW  01
493E:  MOVWF  x5F
....................     
....................     //P10_Currentfonts=Font11x12; 
....................  
....................     for(int i=0;i<6;i++){ 
4940:  CLRF   x60
4942:  MOVF   x60,W
4944:  SUBLW  05
4946:  BNC   49CA
....................         hc_595_clr_allPins(); 
4948:  CLRF   x6C
494A:  CLRF   x6D
494C:  CLRF   x6E
494E:  MOVLB  0
4950:  CALL   092A
4954:  CLRF   19
4956:  BTFSC  FF2.7
4958:  BSF    19.7
495A:  BCF    FF2.7
....................         //P10_Clear_Display(1); 
....................          
....................         //textBufSil();sprintf(text,"%u TL AT ",jtnTLmiktari); 
....................         //P10_DisplayShowString(8,0,text, 1); 
....................         delay_ms(150); 
495C:  MOVLW  96
495E:  MOVLB  1
4960:  MOVWF  x86
4962:  MOVLB  0
4964:  CALL   0834
4968:  BTFSC  19.7
496A:  BSF    FF2.7
....................         hc_595_set_allPins(); 
496C:  MOVLB  1
496E:  SETF   x6C
4970:  SETF   x6D
4972:  SETF   x6E
4974:  MOVLB  0
4976:  CALL   092A
497A:  CLRF   19
497C:  BTFSC  FF2.7
497E:  BSF    19.7
4980:  BCF    FF2.7
4982:  MOVLW  64
4984:  MOVLB  1
4986:  MOVWF  x86
4988:  MOVLB  0
498A:  CALL   0834
498E:  BTFSC  19.7
4990:  BSF    FF2.7
4992:  CLRF   19
4994:  BTFSC  FF2.7
4996:  BSF    19.7
4998:  BCF    FF2.7
....................         //P10_Clear_Display(0); 
....................         //textBufSil();text="Calistir"; 
....................         //P10_DisplayShowString(4,0,text, 0); 
....................         delay_ms(150); 
499A:  MOVLW  96
499C:  MOVLB  1
499E:  MOVWF  x86
49A0:  MOVLB  0
49A2:  CALL   0834
49A6:  BTFSC  19.7
49A8:  BSF    FF2.7
....................          
....................         jetonKontrol(); if(jetonAtildi) return 0; 
49AA:  BTFSC  F81.0
49AC:  BRA    49B0
49AE:  INCF   49,F
49B0:  MOVLB  1
49B2:  MOVF   x41,W
49B4:  SUBWF  49,W
49B6:  BNC   49BC
49B8:  BSF    x40.1
49BA:  CLRF   49
49BC:  BTFSS  x40.1
49BE:  BRA    49C6
49C0:  MOVLW  00
49C2:  MOVWF  01
49C4:  BRA    4A0A
49C6:  INCF   x60,F
49C8:  BRA    4942
....................     } 
....................      //P10_Clear_Display(0); 
....................      //textBufSil();sprintf(text,"%u TL AT ",jtnTLmiktari); 
....................       
....................      //P10_DisplayShowString(8,0,text, 0); 
....................       
....................      int say=0; 
49CA:  CLRF   x61
....................      while(1){ 
....................           
....................          jetonKontrol(); if(jetonAtildi) return 0; 
49CC:  BTFSC  F81.0
49CE:  BRA    49D2
49D0:  INCF   49,F
49D2:  MOVF   x41,W
49D4:  SUBWF  49,W
49D6:  BNC   49DC
49D8:  BSF    x40.1
49DA:  CLRF   49
49DC:  BTFSS  x40.1
49DE:  BRA    49E6
49E0:  MOVLW  00
49E2:  MOVWF  01
49E4:  BRA    4A0A
49E6:  CLRF   19
49E8:  BTFSC  FF2.7
49EA:  BSF    19.7
49EC:  BCF    FF2.7
....................          delay_ms(5); 
49EE:  MOVLW  05
49F0:  MOVWF  x86
49F2:  MOVLB  0
49F4:  CALL   0834
49F8:  BTFSC  19.7
49FA:  BSF    FF2.7
....................          say++; 
49FC:  MOVLB  1
49FE:  INCF   x61,F
....................          if(say>200) break; 
4A00:  MOVF   x61,W
4A02:  SUBLW  C8
4A04:  BTFSS  FD8.0
4A06:  BRA    4A0A
4A08:  BRA    49CC
....................      } 
4A0A:  MOVLB  0
4A0C:  GOTO   5D0E (RETURN)
....................       
.................... } 
....................  
.................... void P10_baslangic(){ 
....................  
....................     //P10_Clear_Display(0);     //Ekraný Temizle 
....................     hc_595_clr_allPins(); 
*
0A14:  MOVLB  1
0A16:  CLRF   x6C
0A18:  CLRF   x6D
0A1A:  CLRF   x6E
0A1C:  MOVLB  0
0A1E:  RCALL  092A
....................     //Fontlarýnn büyüklükleri yüksekliði taþýnca Fonttan keserek yazýyor... 
....................    
....................     //P10_Currentfonts=Font11x12; 
....................     //textBufSil();text="YOYUNCAK"; 
....................     //P10_DisplayScrollString(0,11,0,10,text,0); 
....................     //P10_Clear_Display(0);     
.................... //    P10_DisplayShowString(4,0,text, 0); 
....................     delay_ms(500); 
0A20:  MOVLW  02
0A22:  MOVLB  1
0A24:  MOVWF  x5F
0A26:  CLRF   19
0A28:  BTFSC  FF2.7
0A2A:  BSF    19.7
0A2C:  BCF    FF2.7
0A2E:  MOVLW  FA
0A30:  MOVWF  x86
0A32:  MOVLB  0
0A34:  RCALL  0834
0A36:  BTFSC  19.7
0A38:  BSF    FF2.7
0A3A:  MOVLB  1
0A3C:  DECFSZ x5F,F
0A3E:  BRA    0A26
0A40:  MOVLB  0
0A42:  GOTO   4CF8 (RETURN)
....................     
.................... //    text="KOSTUR"; 
.................... //        for(i=0;i<5;i++){ 
.................... //        P10_Clear_Display(0); 
.................... //        delay_ms(25); 
.................... //        P10_DisplayShowString(15,0,text, 0); 
.................... //        delay_ms(25); 
.................... //    } 
.................... //    for(i=0;i<5;i++){ 
.................... //        P10_Clear_Display(1); 
.................... //        delay_ms(25); 
.................... //        P10_DisplayShowString(15,0,text, 1); 
.................... //        delay_ms(25); 
.................... //    } 
....................      
.................... //    P10_Clear_Display(0); 
.................... //    P10_Currentfonts=Font11x12; 
.................... //    P10_DisplayShowString(15,0,text, 0); 
....................     //delay_ms(1000); 
.................... //    P10_Clear_Display(0); 
.................... //    P10_Currentfonts=Font8x8; 
.................... //    text="-O1-"; 
.................... //    P10_DisplayShowString(0,3,text, 0); 
.................... //    text="-O2-"; 
.................... //    P10_DisplayShowString(64,3,text, 0); 
.................... //    delay_ms(1000); 
.................... //    P10_Clear_Display(0);     //Ekraný Temizle 
.................... //     
.................... } 
....................  
.................... void led_anim_bosta(int animSay){ 
....................      
....................   if(animSay==0){ 
*
44D6:  MOVLB  1
44D8:  MOVF   x60,F
44DA:  BNZ   4516
....................       rgb_kirmizi_on(); 
44DC:  BSF    48.6
44DE:  MOVFF  46,16C
44E2:  MOVFF  47,16D
44E6:  MOVFF  48,16E
44EA:  MOVLB  0
44EC:  CALL   092A
....................       rgb_yesil_off(); 
44F0:  BCF    48.7
44F2:  MOVFF  46,16C
44F6:  MOVFF  47,16D
44FA:  MOVFF  48,16E
44FE:  CALL   092A
....................       rgb_mavi_off();  
4502:  BCF    47.0
4504:  MOVFF  46,16C
4508:  MOVFF  47,16D
450C:  MOVFF  48,16E
4510:  CALL   092A
4514:  MOVLB  1
....................   } 
....................   if(animSay==1){ 
4516:  DECFSZ x60,W
4518:  BRA    4554
....................       rgb_yesil_on();  
451A:  BSF    48.7
451C:  MOVFF  46,16C
4520:  MOVFF  47,16D
4524:  MOVFF  48,16E
4528:  MOVLB  0
452A:  CALL   092A
....................       rgb_mavi_off(); 
452E:  BCF    47.0
4530:  MOVFF  46,16C
4534:  MOVFF  47,16D
4538:  MOVFF  48,16E
453C:  CALL   092A
....................       rgb_kirmizi_off(); 
4540:  BCF    48.6
4542:  MOVFF  46,16C
4546:  MOVFF  47,16D
454A:  MOVFF  48,16E
454E:  CALL   092A
4552:  MOVLB  1
....................   } 
....................   if(animSay==2){ 
4554:  MOVF   x60,W
4556:  SUBLW  02
4558:  BNZ   4594
....................       rgb_mavi_on();  
455A:  BSF    47.0
455C:  MOVFF  46,16C
4560:  MOVFF  47,16D
4564:  MOVFF  48,16E
4568:  MOVLB  0
456A:  CALL   092A
....................       rgb_yesil_off(); 
456E:  BCF    48.7
4570:  MOVFF  46,16C
4574:  MOVFF  47,16D
4578:  MOVFF  48,16E
457C:  CALL   092A
....................       rgb_kirmizi_off(); 
4580:  BCF    48.6
4582:  MOVFF  46,16C
4586:  MOVFF  47,16D
458A:  MOVFF  48,16E
458E:  CALL   092A
4592:  MOVLB  1
....................   } 
....................    
....................   if(animSay==3){ 
4594:  MOVF   x60,W
4596:  SUBLW  03
4598:  BNZ   45C6
....................       rgb_beyaz_off(); 
459A:  BCF    48.6
459C:  BCF    48.7
459E:  BCF    47.0
45A0:  MOVFF  46,16C
45A4:  MOVFF  47,16D
45A8:  MOVFF  48,16E
45AC:  MOVLB  0
45AE:  CALL   092A
....................       o2_L1_on(); 
45B2:  BSF    48.0
45B4:  MOVFF  46,16C
45B8:  MOVFF  47,16D
45BC:  MOVFF  48,16E
45C0:  CALL   092A
45C4:  MOVLB  1
....................   } 
....................   if(animSay==4)o2_L2_on(); 
45C6:  MOVF   x60,W
45C8:  SUBLW  04
45CA:  BNZ   45CE
45CC:  BSF    48.1
45CE:  MOVFF  46,16C
45D2:  MOVFF  47,16D
45D6:  MOVFF  48,16E
45DA:  MOVLB  0
45DC:  CALL   092A
....................   if(animSay==5)o2_L3_on(); 
45E0:  MOVLB  1
45E2:  MOVF   x60,W
45E4:  SUBLW  05
45E6:  BNZ   45EA
45E8:  BSF    48.2
45EA:  MOVFF  46,16C
45EE:  MOVFF  47,16D
45F2:  MOVFF  48,16E
45F6:  MOVLB  0
45F8:  CALL   092A
....................    
....................   if(animSay==6)o1_L1_on(); 
45FC:  MOVLB  1
45FE:  MOVF   x60,W
4600:  SUBLW  06
4602:  BNZ   4606
4604:  BSF    48.3
4606:  MOVFF  46,16C
460A:  MOVFF  47,16D
460E:  MOVFF  48,16E
4612:  MOVLB  0
4614:  CALL   092A
....................   if(animSay==7)o1_L2_on(); 
4618:  MOVLB  1
461A:  MOVF   x60,W
461C:  SUBLW  07
461E:  BNZ   4622
4620:  BSF    48.4
4622:  MOVFF  46,16C
4626:  MOVFF  47,16D
462A:  MOVFF  48,16E
462E:  MOVLB  0
4630:  CALL   092A
....................   if(animSay==8)o1_L3_on(); 
4634:  MOVLB  1
4636:  MOVF   x60,W
4638:  SUBLW  08
463A:  BNZ   463E
463C:  BSF    48.5
463E:  MOVFF  46,16C
4642:  MOVFF  47,16D
4646:  MOVFF  48,16E
464A:  MOVLB  0
464C:  CALL   092A
....................    
....................   if(animSay==9){ 
4650:  MOVLB  1
4652:  MOVF   x60,W
4654:  SUBLW  09
4656:  BNZ   46FE
....................        
....................         o1_L1_off(); 
4658:  BCF    48.3
465A:  MOVFF  46,16C
465E:  MOVFF  47,16D
4662:  MOVFF  48,16E
4666:  MOVLB  0
4668:  CALL   092A
....................         o1_L2_off(); 
466C:  BCF    48.4
466E:  MOVFF  46,16C
4672:  MOVFF  47,16D
4676:  MOVFF  48,16E
467A:  CALL   092A
....................         o1_L3_off(); 
467E:  BCF    48.5
4680:  MOVFF  46,16C
4684:  MOVFF  47,16D
4688:  MOVFF  48,16E
468C:  CALL   092A
....................          
....................         o2_L1_off(); 
4690:  BCF    48.0
4692:  MOVFF  46,16C
4696:  MOVFF  47,16D
469A:  MOVFF  48,16E
469E:  CALL   092A
....................         o2_L2_off(); 
46A2:  BCF    48.1
46A4:  MOVFF  46,16C
46A8:  MOVFF  47,16D
46AC:  MOVFF  48,16E
46B0:  CALL   092A
....................         o2_L3_off(); 
46B4:  BCF    48.2
46B6:  MOVFF  46,16C
46BA:  MOVFF  47,16D
46BE:  MOVFF  48,16E
46C2:  CALL   092A
....................          
....................         rgb_kirmizi_off(); 
46C6:  BCF    48.6
46C8:  MOVFF  46,16C
46CC:  MOVFF  47,16D
46D0:  MOVFF  48,16E
46D4:  CALL   092A
....................         rgb_yesil_off(); 
46D8:  BCF    48.7
46DA:  MOVFF  46,16C
46DE:  MOVFF  47,16D
46E2:  MOVFF  48,16E
46E6:  CALL   092A
....................         rgb_mavi_off(); 
46EA:  BCF    47.0
46EC:  MOVFF  46,16C
46F0:  MOVFF  47,16D
46F4:  MOVFF  48,16E
46F8:  CALL   092A
46FC:  MOVLB  1
....................  
....................   } 
46FE:  MOVLB  0
4700:  GOTO   5C50 (RETURN)
....................   
.................... } 
.................... void ledAnimKarinca(int animSay){ 
....................      
....................   if(animSay==0){ 
*
477E:  MOVLB  1
4780:  MOVF   x60,F
4782:  BNZ   47AC
....................       o2_L1_on(); 
4784:  BSF    48.0
4786:  MOVFF  46,16C
478A:  MOVFF  47,16D
478E:  MOVFF  48,16E
4792:  MOVLB  0
4794:  CALL   092A
....................       rgb_yesil_on(); 
4798:  BSF    48.7
479A:  MOVFF  46,16C
479E:  MOVFF  47,16D
47A2:  MOVFF  48,16E
47A6:  CALL   092A
47AA:  MOVLB  1
....................   } 
....................   if(animSay==1)o2_L1_off(); 
47AC:  DECFSZ x60,W
47AE:  BRA    47B2
47B0:  BCF    48.0
47B2:  MOVFF  46,16C
47B6:  MOVFF  47,16D
47BA:  MOVFF  48,16E
47BE:  MOVLB  0
47C0:  CALL   092A
....................    
....................   if(animSay==2)o2_L2_on(); 
47C4:  MOVLB  1
47C6:  MOVF   x60,W
47C8:  SUBLW  02
47CA:  BNZ   47CE
47CC:  BSF    48.1
47CE:  MOVFF  46,16C
47D2:  MOVFF  47,16D
47D6:  MOVFF  48,16E
47DA:  MOVLB  0
47DC:  CALL   092A
....................   if(animSay==3){ 
47E0:  MOVLB  1
47E2:  MOVF   x60,W
47E4:  SUBLW  03
47E6:  BNZ   4810
....................       o2_L2_off(); 
47E8:  BCF    48.1
47EA:  MOVFF  46,16C
47EE:  MOVFF  47,16D
47F2:  MOVFF  48,16E
47F6:  MOVLB  0
47F8:  CALL   092A
....................       rgb_kirmizi_on(); 
47FC:  BSF    48.6
47FE:  MOVFF  46,16C
4802:  MOVFF  47,16D
4806:  MOVFF  48,16E
480A:  CALL   092A
480E:  MOVLB  1
....................   } 
....................    
....................   if(animSay==4)o2_L3_on(); 
4810:  MOVF   x60,W
4812:  SUBLW  04
4814:  BNZ   4818
4816:  BSF    48.2
4818:  MOVFF  46,16C
481C:  MOVFF  47,16D
4820:  MOVFF  48,16E
4824:  MOVLB  0
4826:  CALL   092A
....................   if(animSay==5)o2_L3_off(); 
482A:  MOVLB  1
482C:  MOVF   x60,W
482E:  SUBLW  05
4830:  BNZ   4834
4832:  BCF    48.2
4834:  MOVFF  46,16C
4838:  MOVFF  47,16D
483C:  MOVFF  48,16E
4840:  MOVLB  0
4842:  CALL   092A
....................    
....................   if(animSay==6)o1_L1_on(); 
4846:  MOVLB  1
4848:  MOVF   x60,W
484A:  SUBLW  06
484C:  BNZ   4850
484E:  BSF    48.3
4850:  MOVFF  46,16C
4854:  MOVFF  47,16D
4858:  MOVFF  48,16E
485C:  MOVLB  0
485E:  CALL   092A
....................   if(animSay==7){ 
4862:  MOVLB  1
4864:  MOVF   x60,W
4866:  SUBLW  07
4868:  BNZ   4892
....................       o1_L1_off(); 
486A:  BCF    48.3
486C:  MOVFF  46,16C
4870:  MOVFF  47,16D
4874:  MOVFF  48,16E
4878:  MOVLB  0
487A:  CALL   092A
....................       rgb_mavi_on(); 
487E:  BSF    47.0
4880:  MOVFF  46,16C
4884:  MOVFF  47,16D
4888:  MOVFF  48,16E
488C:  CALL   092A
4890:  MOVLB  1
....................   } 
....................    
....................   if(animSay==8)o1_L2_on(); 
4892:  MOVF   x60,W
4894:  SUBLW  08
4896:  BNZ   489A
4898:  BSF    48.4
489A:  MOVFF  46,16C
489E:  MOVFF  47,16D
48A2:  MOVFF  48,16E
48A6:  MOVLB  0
48A8:  CALL   092A
....................   if(animSay==9)o1_L2_off(); 
48AC:  MOVLB  1
48AE:  MOVF   x60,W
48B0:  SUBLW  09
48B2:  BNZ   48B6
48B4:  BCF    48.4
48B6:  MOVFF  46,16C
48BA:  MOVFF  47,16D
48BE:  MOVFF  48,16E
48C2:  MOVLB  0
48C4:  CALL   092A
....................    
....................   if(animSay==10)o1_L3_on(); 
48C8:  MOVLB  1
48CA:  MOVF   x60,W
48CC:  SUBLW  0A
48CE:  BNZ   48D2
48D0:  BSF    48.5
48D2:  MOVFF  46,16C
48D6:  MOVFF  47,16D
48DA:  MOVFF  48,16E
48DE:  MOVLB  0
48E0:  CALL   092A
....................   if(animSay==11){ 
48E4:  MOVLB  1
48E6:  MOVF   x60,W
48E8:  SUBLW  0B
48EA:  BNZ   4918
....................       o1_L3_off(); 
48EC:  BCF    48.5
48EE:  MOVFF  46,16C
48F2:  MOVFF  47,16D
48F6:  MOVFF  48,16E
48FA:  MOVLB  0
48FC:  CALL   092A
....................       rgb_beyaz_off(); 
4900:  BCF    48.6
4902:  BCF    48.7
4904:  BCF    47.0
4906:  MOVFF  46,16C
490A:  MOVFF  47,16D
490E:  MOVFF  48,16E
4912:  CALL   092A
4916:  MOVLB  1
....................   } 
4918:  MOVLB  0
491A:  GOTO   5CFE (RETURN)
....................      
.................... } 
.................... int8 P10_animkosturSirket() 
.................... { 
....................     for(int i=0;i<6;i++){ 
*
4A10:  MOVLB  1
4A12:  CLRF   x5F
4A14:  MOVF   x5F,W
4A16:  SUBLW  05
4A18:  BNC   4AB4
....................         hc_595_clr_allPins(); 
4A1A:  CLRF   x6C
4A1C:  CLRF   x6D
4A1E:  CLRF   x6E
4A20:  MOVLB  0
4A22:  CALL   092A
4A26:  CLRF   19
4A28:  BTFSC  FF2.7
4A2A:  BSF    19.7
4A2C:  BCF    FF2.7
....................        // P10_Clear_Display(1); 
....................        // P10_Currentfonts=Font11x12; 
.................... //        textBufSil(); 
.................... //        text="AK"; 
.................... //        P10_DisplayShowString(4,0,text, 1); 
....................         delay_ms(150); 
4A2E:  MOVLW  96
4A30:  MOVLB  1
4A32:  MOVWF  x86
4A34:  MOVLB  0
4A36:  CALL   0834
4A3A:  BTFSC  19.7
4A3C:  BSF    FF2.7
....................         hc_595_set_allPins(); 
4A3E:  MOVLB  1
4A40:  SETF   x6C
4A42:  SETF   x6D
4A44:  SETF   x6E
4A46:  MOVLB  0
4A48:  CALL   092A
4A4C:  CLRF   19
4A4E:  BTFSC  FF2.7
4A50:  BSF    19.7
4A52:  BCF    FF2.7
4A54:  MOVLW  64
4A56:  MOVLB  1
4A58:  MOVWF  x86
4A5A:  MOVLB  0
4A5C:  CALL   0834
4A60:  BTFSC  19.7
4A62:  BSF    FF2.7
....................        // P10_Clear_Display(0); 
....................        // textBufSil(); 
....................         text="YOYUNCAK"; 
4A64:  CLRF   FEA
4A66:  MOVLW  DC
4A68:  MOVWF  FE9
4A6A:  MOVLW  00
4A6C:  CALL   0190
4A70:  TBLRD*-
4A72:  TBLRD*+
4A74:  MOVF   FF5,W
4A76:  MOVWF  FEE
4A78:  IORLW  00
4A7A:  BNZ   4A72
4A7C:  CLRF   19
4A7E:  BTFSC  FF2.7
4A80:  BSF    19.7
4A82:  BCF    FF2.7
....................        // P10_DisplayShowString(4,0,text, 1); 
....................         delay_ms(150); 
4A84:  MOVLW  96
4A86:  MOVLB  1
4A88:  MOVWF  x86
4A8A:  MOVLB  0
4A8C:  CALL   0834
4A90:  BTFSC  19.7
4A92:  BSF    FF2.7
.................... //        P10_Currentfonts=Font8x8; 
.................... //        text="Eskisehir"; 
.................... //        P10_DisplayShowString(12,4,text, 0); 
....................        // delay_ms(100); 
....................         jetonKontrol(); if(jetonAtildi) return 0; 
4A94:  BTFSC  F81.0
4A96:  BRA    4A9A
4A98:  INCF   49,F
4A9A:  MOVLB  1
4A9C:  MOVF   x41,W
4A9E:  SUBWF  49,W
4AA0:  BNC   4AA6
4AA2:  BSF    x40.1
4AA4:  CLRF   49
4AA6:  BTFSS  x40.1
4AA8:  BRA    4AB0
4AAA:  MOVLW  00
4AAC:  MOVWF  01
4AAE:  BRA    4AC2
4AB0:  INCF   x5F,F
4AB2:  BRA    4A14
....................     } 
....................      hc_595_clr_allPins(); 
4AB4:  CLRF   x6C
4AB6:  CLRF   x6D
4AB8:  CLRF   x6E
4ABA:  MOVLB  0
4ABC:  CALL   092A
4AC0:  MOVLB  1
4AC2:  MOVLB  0
4AC4:  GOTO   5D4E (RETURN)
.................... //     P10_Currentfonts=Font11x12; 
.................... //     text="YOYUNCAK";; 
.................... //     P10_DisplayShowString(4,0,text, 0); 
.................... } 
.................... int8 P10_animMaxPuanMinSure( unsigned int16 puan, unsigned int16 sure) 
.................... { 
....................     if(sure==0xFFFF) sure=0; 
....................     //P10_Clear_Display(0); 
....................     hc_595_clr_allPins(); 
....................     //P10_Currentfonts=Font8x8; 
....................     //P10_Currentfonts=Font11x12; 
....................      
....................     //textBufSil();sprintf(text,"Rekor: %Lu saniye ",sure); 
....................     //P10_DisplayScrollString(0,11,0,10,text,0); 
....................     //P10_Clear_Display(0);  
....................     //textBufSil();sprintf(text,"%Lu Sn.",sure); 
....................     //P10_DisplayShowString(1,0,text, 0); 
....................     jetonKontrol(); if(jetonAtildi) return 0; 
....................      int say=0; 
....................      while(1){ 
....................          jetonKontrol(); if(jetonAtildi) return 0; 
....................          delay_ms(10); 
....................          say++; 
....................          if(say>200) break; 
....................      } 
.................... } 
....................  
....................  
....................  
.................... int anim=P10_animKosturBlink; 
....................  
.................... /// global fonksiyonlar 
....................  
.................... void mtr1Mtr2IlkKonum(); 
.................... void motorGeriLedAnim(); 
....................  
....................   
.................... void main(void){ 
4AC8:  CLRF   FF8
4ACA:  BSF    FF1.2
4ACC:  BSF    FD0.7
4ACE:  BSF    07.7
4AD0:  CLRF   2F
4AD2:  BSF    F70.3
4AD4:  MOVLW  11
4AD6:  MOVWF  F75
4AD8:  MOVLW  04
4ADA:  MOVWF  F76
4ADC:  MOVLW  A6
4ADE:  MOVWF  F72
4AE0:  MOVLW  90
4AE2:  MOVWF  F71
4AE4:  BSF    FB8.3
4AE6:  MOVLW  11
4AE8:  MOVWF  FAF
4AEA:  MOVLW  04
4AEC:  MOVWF  FB0
4AEE:  MOVLW  A6
4AF0:  MOVWF  FAC
4AF2:  MOVLW  90
4AF4:  MOVWF  FAB
4AF6:  CLRF   37
4AF8:  CLRF   36
4AFA:  CLRF   35
4AFC:  CLRF   34
4AFE:  CLRF   33
4B00:  CLRF   32
4B02:  CLRF   31
4B04:  CLRF   30
4B06:  CLRF   39
4B08:  CLRF   38
4B0A:  CLRF   3B
4B0C:  CLRF   3A
4B0E:  CLRF   3D
4B10:  CLRF   3C
4B12:  CLRF   3F
4B14:  CLRF   3E
4B16:  CLRF   46
4B18:  CLRF   47
4B1A:  CLRF   48
4B1C:  CLRF   49
4B1E:  CLRF   4B
4B20:  CLRF   4A
4B22:  CLRF   4D
4B24:  CLRF   4C
4B26:  SETF   4E
4B28:  CLRF   50
4B2A:  CLRF   4F
4B2C:  CLRF   54
4B2E:  CLRF   53
4B30:  CLRF   52
4B32:  CLRF   51
4B34:  MOVLW  28
4B36:  MOVWF  55
4B38:  MOVLW  13
4B3A:  MOVWF  56
4B3C:  CLRF   5E
4B3E:  CLRF   x60
4B40:  CLRF   5F
4B42:  CLRF   x64
4B44:  CLRF   x63
4B46:  CLRF   x62
4B48:  CLRF   x61
4B4A:  CLRF   x68
4B4C:  CLRF   x67
4B4E:  CLRF   x66
4B50:  CLRF   x65
4B52:  CLRF   x6C
4B54:  CLRF   x6B
4B56:  CLRF   x6A
4B58:  CLRF   x69
4B5A:  CLRF   x70
4B5C:  CLRF   x6F
4B5E:  CLRF   x6E
4B60:  CLRF   x6D
4B62:  MOVLW  09
4B64:  MOVWF  x72
4B66:  MOVLW  60
4B68:  MOVWF  x71
4B6A:  MOVLW  06
4B6C:  MOVWF  x74
4B6E:  MOVLW  40
4B70:  MOVWF  x73
4B72:  MOVLW  03
4B74:  MOVWF  x76
4B76:  MOVLW  20
4B78:  MOVWF  x75
4B7A:  MOVLW  09
4B7C:  MOVWF  x78
4B7E:  MOVLW  60
4B80:  MOVWF  x77
4B82:  MOVLW  06
4B84:  MOVWF  x7A
4B86:  MOVLW  40
4B88:  MOVWF  x79
4B8A:  MOVLW  03
4B8C:  MOVWF  x7C
4B8E:  MOVLW  20
4B90:  MOVWF  x7B
4B92:  CLRF   x7E
4B94:  CLRF   x7D
4B96:  CLRF   x80
4B98:  CLRF   x7F
4B9A:  BCF    x81.0
4B9C:  BCF    x81.1
4B9E:  BCF    x81.2
4BA0:  BCF    x81.3
4BA2:  CLRF   x85
4BA4:  CLRF   x84
4BA6:  CLRF   x83
4BA8:  CLRF   x82
4BAA:  MOVLW  05
4BAC:  MOVWF  x86
4BAE:  CLRF   x88
4BB0:  CLRF   x87
4BB2:  CLRF   x96
4BB4:  MOVLW  CC
4BB6:  MOVWF  x95
4BB8:  MOVLW  01
4BBA:  MOVWF  xB0
4BBC:  MOVLW  33
4BBE:  MOVWF  xAF
4BC0:  CLRF   xB2
4BC2:  CLRF   xB1
4BC4:  BSF    x81.4
4BC6:  BCF    x81.5
4BC8:  BSF    x81.6
4BCA:  BCF    x81.7
4BCC:  CLRF   xD2
4BCE:  CLRF   xD1
4BD0:  CLRF   xD0
4BD2:  CLRF   xCF
4BD4:  CLRF   xD3
4BD6:  CLRF   xD7
4BD8:  CLRF   xD6
4BDA:  CLRF   xD5
4BDC:  CLRF   xD4
4BDE:  CLRF   xDB
4BE0:  CLRF   xDA
4BE2:  CLRF   xD9
4BE4:  CLRF   xD8
4BE6:  MOVLB  1
4BE8:  BCF    x40.1
4BEA:  CLRF   x42
4BEC:  SETF   x44
4BEE:  SETF   x43
4BF0:  CLRF   x46
4BF2:  CLRF   x45
4BF4:  CLRF   x48
4BF6:  CLRF   x47
4BF8:  CLRF   x4C
4BFA:  CLRF   x4B
4BFC:  CLRF   x4A
4BFE:  CLRF   x49
4C00:  MOVLB  0
4C02:  CLRF   xCE
4C04:  CLRF   xCD
4C06:  CLRF   xCC
4C08:  CLRF   xCB
4C0A:  MOVLB  1
4C0C:  BCF    x40.0
4C0E:  MOVLW  14
4C10:  MOVWF  x4D
4C12:  MOVLW  01
4C14:  MOVWF  x41
4C16:  MOVLW  04
4C18:  MOVWF  x4E
4C1A:  MOVLB  F
4C1C:  CLRF   x38
4C1E:  CLRF   x39
4C20:  CLRF   x3A
4C22:  CLRF   x3B
4C24:  CLRF   x3C
4C26:  CLRF   F77
4C28:  CLRF   F78
4C2A:  CLRF   F79
4C2C:  CLRF   40
4C2E:  CLRF   41
....................      
....................    setup_ccp3(CCP_OFF);  
4C30:  MOVLW  F0
4C32:  ANDWF  x5D,F
....................    setup_ccp4(CCP_OFF);  
4C34:  ANDWF  x57,F
....................    setup_ccp5(CCP_OFF);  
4C36:  ANDWF  x54,F
....................     
....................    setup_timer_1(T1_DISABLED);  
4C38:  CLRF   FCD
4C3A:  CLRF   FCC
....................    setup_timer_2(T2_DIV_BY_16, 250, 1);   // 40MHz fosc ile 2.5KHz yaklaþýk(div_16) 
4C3C:  MOVLW  00
4C3E:  IORLW  06
4C40:  MOVWF  FBA
4C42:  MOVLW  FA
4C44:  MOVWF  FBB
....................     
....................    setup_ccp1(CCP_PWM );  
4C46:  BCF    F8B.2
4C48:  MOVLW  0C
4C4A:  MOVWF  FBD
4C4C:  CLRF   FB7
4C4E:  CLRF   FB6
4C50:  MOVLW  01
4C52:  MOVWF  FB9
4C54:  MOVLW  FC
4C56:  ANDWF  x49,F
4C58:  MOVLW  00
4C5A:  IORWF  x49,F
....................    setup_ccp2(CCP_PWM );  
4C5C:  BCF    F8B.1
4C5E:  MOVLW  0C
4C60:  MOVWF  F66
4C62:  CLRF   F65
4C64:  CLRF   F64
4C66:  MOVLW  01
4C68:  MOVWF  F63
4C6A:  MOVLW  E7
4C6C:  ANDWF  x49,F
4C6E:  MOVLW  00
4C70:  IORWF  x49,F
....................  
....................    setup_timer_4(T4_DISABLED,0,1);  
4C72:  MOVWF  x51
4C74:  MOVLW  00
4C76:  MOVWF  x52
....................    setup_timer_5(T5_DISABLED); 
4C78:  CLRF   x4D
4C7A:  CLRF   x4E
....................    setup_timer_6(T6_DISABLED,0,1);  
4C7C:  MOVWF  x4A
4C7E:  MOVLW  00
4C80:  MOVWF  x4B
....................     
....................   
....................    setup_dac(DAC_OFF);  
4C82:  CLRF   x41
....................    setup_comparator(NC_NC_NC_NC);  
4C84:  CLRF   F77
4C86:  MOVLW  04
4C88:  MOVWF  F78
4C8A:  MOVWF  F79
....................    setup_vref(FALSE);  
4C8C:  CLRF   x42
....................    setup_adc(ADC_OFF);  
4C8E:  BCF    FC2.0
....................     
....................    setup_adc_ports(sAN0|sAN1); 
4C90:  MOVF   FC1,W
4C92:  ANDLW  F0
4C94:  MOVWF  FC1
4C96:  MOVLW  03
4C98:  MOVWF  x38
4C9A:  MOVLW  00
4C9C:  MOVWF  x3C
4C9E:  MOVWF  x39
4CA0:  MOVWF  x3A
4CA2:  MOVWF  x3B
....................    //setup_adc_ports(AN0_TO_AN1);   //18f4520 
....................    setup_adc(ADC_CLOCK_DIV_8); 
4CA4:  MOVF   FC0,W
4CA6:  ANDLW  C0
4CA8:  IORLW  01
4CAA:  MOVWF  FC0
4CAC:  BSF    FC0.7
4CAE:  BSF    FC2.0
....................  
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H |SPI_SS_DISABLED);//P10 veri spi gondermek için 
....................   //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_SS_DISABLED);//P10 veri spi gondermek için 
....................     
....................    set_tris_a(0b11101111); 
4CB0:  MOVLW  EF
4CB2:  MOVWF  F92
....................    set_tris_b(0b00000011); 
4CB4:  MOVLW  03
4CB6:  MOVWF  F93
....................    set_tris_c(0b10000000); 
4CB8:  MOVLW  80
4CBA:  MOVWF  F94
....................    set_tris_d(0b10000000); 
4CBC:  MOVWF  F95
....................    set_tris_e(0b0000); 
4CBE:  BCF    F96.0
4CC0:  BCF    F96.1
4CC2:  BCF    F96.2
4CC4:  BCF    F96.3
....................     
....................    hc_595_clr_allPins(); 
4CC6:  MOVLB  1
4CC8:  CLRF   x6C
4CCA:  CLRF   x6D
4CCC:  CLRF   x6E
4CCE:  MOVLB  0
4CD0:  CALL   092A
....................    //motor3_geri();delay_ms(100); motor3_dur(); 
....................    timer_kur(); 
4CD4:  GOTO   0A04
....................    ext_int_edge(H_TO_L);      // init interrupt triggering for button press  
4CD8:  BCF    FF1.6
....................    enable_interrupts(INT_EXT); 
4CDA:  BSF    FF2.4
....................    enable_interrupts(GLOBAL); 
4CDC:  MOVLW  C0
4CDE:  IORWF  FF2,F
....................   
....................     //set_pwm1_duty(512);       //yarým peryot motoru döndürmediiii 
....................    set_pwm1_duty(1023); 
4CE0:  SETF   FBE
4CE2:  MOVF   FBD,W
4CE4:  ANDLW  CF
4CE6:  IORLW  30
4CE8:  MOVWF  FBD
....................    set_pwm2_duty(1023); 
4CEA:  SETF   F67
4CEC:  MOVF   F66,W
4CEE:  ANDLW  CF
4CF0:  IORLW  30
4CF2:  MOVWF  F66
....................     
....................    P10_baslangic(); 
4CF4:  GOTO   0A14
....................     
....................    lcd_init();  // Always call this first.  
4CF8:  GOTO   0A46
....................     
....................    if(read_eeprom(ee_adres_jtnTL)!=0xFF) jtnTLMik=read_eeprom(ee_adres_jtnTL); 
4CFC:  MOVFF  FF2,15F
4D00:  BCF    FF2.7
4D02:  MOVLW  04
4D04:  MOVWF  FA9
4D06:  BCF    FA6.6
4D08:  BCF    FA6.7
4D0A:  BSF    FA6.0
4D0C:  MOVF   FA8,W
4D0E:  MOVLB  1
4D10:  BTFSC  x5F.7
4D12:  BSF    FF2.7
4D14:  SUBLW  FF
4D16:  BZ    4D32
4D18:  MOVFF  FF2,15F
4D1C:  BCF    FF2.7
4D1E:  MOVLW  04
4D20:  MOVWF  FA9
4D22:  BCF    FA6.6
4D24:  BCF    FA6.7
4D26:  BSF    FA6.0
4D28:  MOVF   FA8,W
4D2A:  BTFSC  x5F.7
4D2C:  BSF    FF2.7
4D2E:  MOVWF  x41
4D30:  BRA    4D36
....................    else jtnTLMik=1; 
4D32:  MOVLW  01
4D34:  MOVWF  x41
....................         
....................    jtnCounter=make32(read_eeprom(ee_adres_jtnCount+3),read_eeprom(ee_adres_jtnCount+2), 
....................                           read_eeprom(ee_adres_jtnCount+1),read_eeprom(ee_adres_jtnCount)); 
4D36:  MOVFF  FF2,15F
4D3A:  BCF    FF2.7
4D3C:  MOVLW  03
4D3E:  MOVWF  FA9
4D40:  BCF    FA6.6
4D42:  BCF    FA6.7
4D44:  BSF    FA6.0
4D46:  MOVF   FA8,W
4D48:  BTFSC  x5F.7
4D4A:  BSF    FF2.7
4D4C:  MOVWF  x60
4D4E:  MOVFF  FF2,161
4D52:  BCF    FF2.7
4D54:  MOVLW  02
4D56:  MOVWF  FA9
4D58:  BCF    FA6.6
4D5A:  BCF    FA6.7
4D5C:  BSF    FA6.0
4D5E:  MOVF   FA8,W
4D60:  BTFSC  x61.7
4D62:  BSF    FF2.7
4D64:  MOVWF  x62
4D66:  MOVFF  FF2,163
4D6A:  BCF    FF2.7
4D6C:  MOVLW  01
4D6E:  MOVWF  FA9
4D70:  BCF    FA6.6
4D72:  BCF    FA6.7
4D74:  BSF    FA6.0
4D76:  MOVF   FA8,W
4D78:  BTFSC  x63.7
4D7A:  BSF    FF2.7
4D7C:  MOVWF  x64
4D7E:  MOVFF  FF2,165
4D82:  BCF    FF2.7
4D84:  CLRF   FA9
4D86:  BCF    FA6.6
4D88:  BCF    FA6.7
4D8A:  BSF    FA6.0
4D8C:  MOVF   FA8,W
4D8E:  BTFSC  x65.7
4D90:  BSF    FF2.7
4D92:  MOVWF  x66
4D94:  MOVFF  160,54
4D98:  MOVFF  162,53
4D9C:  MOVFF  164,52
4DA0:  MOVFF  166,51
....................      
....................    if(jtnCounter==0xffffffff) jtnCounter=0x00000000; 
4DA4:  INCFSZ 51,W
4DA6:  BRA    4DBC
4DA8:  INCFSZ 52,W
4DAA:  BRA    4DBC
4DAC:  INCFSZ 53,W
4DAE:  BRA    4DBC
4DB0:  INCFSZ 54,W
4DB2:  BRA    4DBC
4DB4:  CLRF   54
4DB6:  CLRF   53
4DB8:  CLRF   52
4DBA:  CLRF   51
....................  
....................    if(read_eeprom(ee_adres_oyunSure)!=0xFF) ee_oyunSure=read_eeprom(ee_adres_oyunSure); 
4DBC:  MOVFF  FF2,15F
4DC0:  BCF    FF2.7
4DC2:  MOVLW  0B
4DC4:  MOVWF  FA9
4DC6:  BCF    FA6.6
4DC8:  BCF    FA6.7
4DCA:  BSF    FA6.0
4DCC:  MOVF   FA8,W
4DCE:  BTFSC  x5F.7
4DD0:  BSF    FF2.7
4DD2:  SUBLW  FF
4DD4:  BZ    4DF2
4DD6:  MOVFF  FF2,15F
4DDA:  BCF    FF2.7
4DDC:  MOVLW  0B
4DDE:  MOVWF  FA9
4DE0:  BCF    FA6.6
4DE2:  BCF    FA6.7
4DE4:  BSF    FA6.0
4DE6:  MOVF   FA8,W
4DE8:  BTFSC  x5F.7
4DEA:  BSF    FF2.7
4DEC:  MOVLB  0
4DEE:  MOVWF  x86
4DF0:  BRA    4DF8
....................    else ee_oyunSure=2; 
4DF2:  MOVLW  02
4DF4:  MOVLB  0
4DF6:  MOVWF  x86
....................     
....................    sens_max_kal=make16(read_eeprom(ee_adr_an_max_kal_h),read_eeprom(ee_adr_an_max_kal_l)); 
4DF8:  MOVFF  FF2,15F
4DFC:  BCF    FF2.7
4DFE:  MOVLW  25
4E00:  MOVWF  FA9
4E02:  BCF    FA6.6
4E04:  BCF    FA6.7
4E06:  BSF    FA6.0
4E08:  MOVF   FA8,W
4E0A:  MOVLB  1
4E0C:  BTFSC  x5F.7
4E0E:  BSF    FF2.7
4E10:  MOVWF  x60
4E12:  MOVFF  FF2,161
4E16:  BCF    FF2.7
4E18:  MOVLW  26
4E1A:  MOVWF  FA9
4E1C:  BCF    FA6.6
4E1E:  BCF    FA6.7
4E20:  BSF    FA6.0
4E22:  MOVF   FA8,W
4E24:  BTFSC  x61.7
4E26:  BSF    FF2.7
4E28:  MOVWF  x62
4E2A:  MOVFF  160,4B
4E2E:  MOVFF  162,4A
....................    if(sens_max_kal==0xffff){ 
4E32:  INCFSZ 4A,W
4E34:  BRA    4E42
4E36:  INCFSZ 4B,W
4E38:  BRA    4E42
....................       sens_max_kal=410;   
4E3A:  MOVLW  01
4E3C:  MOVWF  4B
4E3E:  MOVLW  9A
4E40:  MOVWF  4A
....................    } 
....................     
....................    sens_min_kal=make16(read_eeprom(ee_adr_an_min_kal_h),read_eeprom(ee_adr_an_min_kal_l)); 
4E42:  MOVFF  FF2,15F
4E46:  BCF    FF2.7
4E48:  MOVLW  27
4E4A:  MOVWF  FA9
4E4C:  BCF    FA6.6
4E4E:  BCF    FA6.7
4E50:  BSF    FA6.0
4E52:  MOVF   FA8,W
4E54:  BTFSC  x5F.7
4E56:  BSF    FF2.7
4E58:  MOVWF  x60
4E5A:  MOVFF  FF2,161
4E5E:  BCF    FF2.7
4E60:  MOVLW  28
4E62:  MOVWF  FA9
4E64:  BCF    FA6.6
4E66:  BCF    FA6.7
4E68:  BSF    FA6.0
4E6A:  MOVF   FA8,W
4E6C:  BTFSC  x61.7
4E6E:  BSF    FF2.7
4E70:  MOVWF  x62
4E72:  MOVFF  160,4D
4E76:  MOVFF  162,4C
....................    if(sens_min_kal==0xffff){ 
4E7A:  INCFSZ 4C,W
4E7C:  BRA    4E88
4E7E:  INCFSZ 4D,W
4E80:  BRA    4E88
....................         sens_min_kal=205; 
4E82:  CLRF   4D
4E84:  MOVLW  CD
4E86:  MOVWF  4C
....................    }  
....................     
....................    if(read_eeprom(ee_adr_sens_okuma_sayisi)!=0xFF)   
4E88:  MOVFF  FF2,15F
4E8C:  BCF    FF2.7
4E8E:  MOVLW  29
4E90:  MOVWF  FA9
4E92:  BCF    FA6.6
4E94:  BCF    FA6.7
4E96:  BSF    FA6.0
4E98:  MOVF   FA8,W
4E9A:  BTFSC  x5F.7
4E9C:  BSF    FF2.7
4E9E:  SUBLW  FF
4EA0:  BZ    4EBC
....................         time_sens_okuma_sayisi=read_eeprom(ee_adr_sens_okuma_sayisi); 
4EA2:  MOVFF  FF2,15F
4EA6:  BCF    FF2.7
4EA8:  MOVLW  29
4EAA:  MOVWF  FA9
4EAC:  BCF    FA6.6
4EAE:  BCF    FA6.7
4EB0:  BSF    FA6.0
4EB2:  MOVF   FA8,W
4EB4:  BTFSC  x5F.7
4EB6:  BSF    FF2.7
4EB8:  MOVWF  55
4EBA:  BRA    4EC0
....................    else time_sens_okuma_sayisi=20;// 25mS,saniyede 40 defa ölçüm yap default deger. 
4EBC:  MOVLW  14
4EBE:  MOVWF  55
....................     
....................    printf(lcd_putc,"\fSENS OKUMA SAYI"); 
4EC0:  MOVLW  D8
4EC2:  MOVWF  FF6
4EC4:  MOVLW  06
4EC6:  MOVWF  FF7
4EC8:  CLRF   19
4ECA:  BTFSC  FF2.7
4ECC:  BSF    19.7
4ECE:  BCF    FF2.7
4ED0:  MOVLB  0
4ED2:  CALL   08DE
4ED6:  BTFSC  19.7
4ED8:  BSF    FF2.7
....................    printf(lcd_putc,"\n%u -> t:%u mS",(unsigned int8)(1000/time_sens_okuma_sayisi),time_sens_okuma_sayisi); 
4EDA:  MOVLW  03
4EDC:  MOVLB  1
4EDE:  MOVWF  x67
4EE0:  MOVLW  E8
4EE2:  MOVWF  x66
4EE4:  CLRF   x69
4EE6:  MOVFF  55,168
4EEA:  MOVLB  0
4EEC:  CALL   0AFC
4EF0:  MOVFF  01,15F
4EF4:  CLRF   19
4EF6:  BTFSC  FF2.7
4EF8:  BSF    19.7
4EFA:  BCF    FF2.7
4EFC:  MOVLW  0A
4EFE:  MOVLB  1
4F00:  MOVWF  x85
4F02:  MOVLB  0
4F04:  CALL   0884
4F08:  BTFSC  19.7
4F0A:  BSF    FF2.7
4F0C:  MOVFF  15F,163
4F10:  MOVLW  1B
4F12:  MOVLB  1
4F14:  MOVWF  x64
4F16:  MOVLB  0
4F18:  CALL   0B6E
4F1C:  MOVLW  ED
4F1E:  MOVWF  FF6
4F20:  MOVLW  06
4F22:  MOVWF  FF7
4F24:  MOVLW  06
4F26:  MOVLB  1
4F28:  MOVWF  x69
4F2A:  MOVLB  0
4F2C:  CALL   0C0E
4F30:  MOVFF  55,163
4F34:  MOVLW  1B
4F36:  MOVLB  1
4F38:  MOVWF  x64
4F3A:  MOVLB  0
4F3C:  CALL   0B6E
4F40:  MOVLW  F5
4F42:  MOVWF  FF6
4F44:  MOVLW  06
4F46:  MOVWF  FF7
4F48:  MOVLW  03
4F4A:  MOVLB  1
4F4C:  MOVWF  x69
4F4E:  MOVLB  0
4F50:  CALL   0C0E
....................    delay_ms(2000); 
4F54:  MOVLW  08
4F56:  MOVLB  1
4F58:  MOVWF  x5F
4F5A:  CLRF   19
4F5C:  BTFSC  FF2.7
4F5E:  BSF    19.7
4F60:  BCF    FF2.7
4F62:  MOVLW  FA
4F64:  MOVWF  x86
4F66:  MOVLB  0
4F68:  CALL   0834
4F6C:  BTFSC  19.7
4F6E:  BSF    FF2.7
4F70:  MOVLB  1
4F72:  DECFSZ x5F,F
4F74:  BRA    4F5A
....................     
....................    output_high(lcd_led); 
4F76:  BSF    F8A.2
....................     
....................    printf(lcd_putc,"\fKOSTUR KART V1.0"); 
4F78:  MOVLW  FA
4F7A:  MOVWF  FF6
4F7C:  MOVLW  06
4F7E:  MOVWF  FF7
4F80:  CLRF   19
4F82:  BTFSC  FF2.7
4F84:  BSF    19.7
4F86:  BCF    FF2.7
4F88:  MOVLB  0
4F8A:  CALL   08DE
4F8E:  BTFSC  19.7
4F90:  BSF    FF2.7
4F92:  CLRF   19
4F94:  BTFSC  FF2.7
4F96:  BSF    19.7
4F98:  BCF    FF2.7
....................    printf(lcd_putc,"\n%05Lu  jtn:%uTL",jtnCounter,jtnTLMik); 
4F9A:  MOVLW  0A
4F9C:  MOVLB  1
4F9E:  MOVWF  x85
4FA0:  MOVLB  0
4FA2:  CALL   0884
4FA6:  BTFSC  19.7
4FA8:  BSF    FF2.7
4FAA:  MOVLW  45
4FAC:  MOVWF  FE9
4FAE:  MOVFF  54,166
4FB2:  MOVFF  53,165
4FB6:  MOVFF  52,164
4FBA:  MOVFF  51,163
4FBE:  CALL   0CD6
4FC2:  MOVLW  12
4FC4:  MOVWF  FF6
4FC6:  MOVLW  07
4FC8:  MOVWF  FF7
4FCA:  MOVLW  06
4FCC:  MOVLB  1
4FCE:  MOVWF  x69
4FD0:  MOVLB  0
4FD2:  CALL   0C0E
4FD6:  MOVFF  141,163
4FDA:  MOVLW  1B
4FDC:  MOVLB  1
4FDE:  MOVWF  x64
4FE0:  MOVLB  0
4FE2:  CALL   0B6E
4FE6:  CLRF   19
4FE8:  BTFSC  FF2.7
4FEA:  BSF    19.7
4FEC:  BCF    FF2.7
4FEE:  MOVLW  54
4FF0:  MOVLB  1
4FF2:  MOVWF  x85
4FF4:  MOVLB  0
4FF6:  CALL   0884
4FFA:  BTFSC  19.7
4FFC:  BSF    FF2.7
4FFE:  CLRF   19
5000:  BTFSC  FF2.7
5002:  BSF    19.7
5004:  BCF    FF2.7
5006:  MOVLW  4C
5008:  MOVLB  1
500A:  MOVWF  x85
500C:  MOVLB  0
500E:  CALL   0884
5012:  BTFSC  19.7
5014:  BSF    FF2.7
....................  
....................    hc_595_clr_allPins(); 
5016:  MOVLB  1
5018:  CLRF   x6C
501A:  CLRF   x6D
501C:  CLRF   x6E
501E:  MOVLB  0
5020:  CALL   092A
....................    fprintf(softSerial,"Basla ...\r\n"); 
5024:  MOVLW  1E
5026:  MOVWF  FF6
5028:  MOVLW  07
502A:  MOVWF  FF7
502C:  GOTO   0DB0
....................     
....................     mtr1Mtr2IlkKonum(); 
5030:  GOTO   0EC8
....................     
....................     if(read_eeprom(ee_adres_dfSes)!=0xFF) 
5034:  MOVFF  FF2,15F
5038:  BCF    FF2.7
503A:  MOVLW  0C
503C:  MOVWF  FA9
503E:  BCF    FA6.6
5040:  BCF    FA6.7
5042:  BSF    FA6.0
5044:  MOVF   FA8,W
5046:  MOVLB  1
5048:  BTFSC  x5F.7
504A:  BSF    FF2.7
504C:  SUBLW  FF
504E:  BZ    506A
....................           // mp3_set_volume(read_eeprom(ee_adres_dfSes)); 
....................         dfPlayer_ses=read_eeprom(ee_adres_dfSes); 
5050:  MOVFF  FF2,15F
5054:  BCF    FF2.7
5056:  MOVLW  0C
5058:  MOVWF  FA9
505A:  BCF    FA6.6
505C:  BCF    FA6.7
505E:  BSF    FA6.0
5060:  MOVF   FA8,W
5062:  BTFSC  x5F.7
5064:  BSF    FF2.7
5066:  MOVWF  x4D
5068:  BRA    5076
....................     else dfPlayerNormSes(); 
506A:  MOVLW  14
506C:  MOVWF  x65
506E:  MOVLB  0
5070:  CALL   1182
5074:  MOVLB  1
5076:  CLRF   19
5078:  BTFSC  FF2.7
507A:  BSF    19.7
507C:  BCF    FF2.7
507E:  MOVLW  64
5080:  MOVWF  x86
5082:  MOVLB  0
5084:  CALL   0834
5088:  BTFSC  19.7
508A:  BSF    FF2.7
....................  
....................     mp3_baslangic(dfPlayer_ses); 
508C:  MOVFF  14D,15F
5090:  GOTO   11D4
....................         
....................    output_high(lcd_led); 
5094:  BSF    F8A.2
....................    delayMsSay=0; 
5096:  MOVLB  1
5098:  CLRF   x46
509A:  CLRF   x45
....................     
....................    while(TRUE){ 
....................         
....................        if(jetonAtildi){ 
509C:  BTFSS  x40.1
509E:  BRA    5212
....................             
....................             hc_595_clr_allPins(); 
50A0:  CLRF   x6C
50A2:  CLRF   x6D
50A4:  CLRF   x6E
50A6:  MOVLB  0
50A8:  CALL   092A
....................             disable_interrupts(INT_EXT); 
50AC:  BCF    FF2.4
....................             jtnCounter++; 
50AE:  MOVLW  01
50B0:  ADDWF  51,F
50B2:  BTFSC  FD8.0
50B4:  INCF   52,F
50B6:  BTFSC  FD8.2
50B8:  INCF   53,F
50BA:  BTFSC  FD8.2
50BC:  INCF   54,F
....................              
....................             write_eeprom(ee_adres_jtnCount,make8(jtnCounter,0));    //low 
50BE:  MOVFF  51,15F
50C2:  MOVF   FF2,W
50C4:  MOVWF  00
50C6:  BCF    FF2.7
50C8:  CLRF   FA9
50CA:  MOVFF  15F,FA8
50CE:  BCF    FA6.6
50D0:  BCF    FA6.7
50D2:  BSF    FA6.2
50D4:  MOVLB  F
50D6:  MOVLW  55
50D8:  MOVWF  FA7
50DA:  MOVLW  AA
50DC:  MOVWF  FA7
50DE:  BSF    FA6.1
50E0:  BTFSC  FA6.1
50E2:  BRA    50E0
50E4:  BCF    FA6.2
50E6:  MOVF   00,W
50E8:  IORWF  FF2,F
....................             write_eeprom(ee_adres_jtnCount+1,make8(jtnCounter,1)); 
50EA:  MOVFF  52,15F
50EE:  MOVFF  FF2,00
50F2:  BCF    FF2.7
50F4:  MOVLW  01
50F6:  MOVWF  FA9
50F8:  MOVFF  52,FA8
50FC:  BCF    FA6.6
50FE:  BCF    FA6.7
5100:  BSF    FA6.2
5102:  MOVLW  55
5104:  MOVWF  FA7
5106:  MOVLW  AA
5108:  MOVWF  FA7
510A:  BSF    FA6.1
510C:  BTFSC  FA6.1
510E:  BRA    510C
5110:  BCF    FA6.2
5112:  MOVF   00,W
5114:  IORWF  FF2,F
....................             write_eeprom(ee_adres_jtnCount+2,make8(jtnCounter,2)); 
5116:  MOVFF  53,15F
511A:  MOVFF  FF2,00
511E:  BCF    FF2.7
5120:  MOVLW  02
5122:  MOVWF  FA9
5124:  MOVFF  53,FA8
5128:  BCF    FA6.6
512A:  BCF    FA6.7
512C:  BSF    FA6.2
512E:  MOVLW  55
5130:  MOVWF  FA7
5132:  MOVLW  AA
5134:  MOVWF  FA7
5136:  BSF    FA6.1
5138:  BTFSC  FA6.1
513A:  BRA    5138
513C:  BCF    FA6.2
513E:  MOVF   00,W
5140:  IORWF  FF2,F
....................             write_eeprom(ee_adres_jtnCount+3,make8(jtnCounter,3));//high 
5142:  MOVFF  54,15F
5146:  MOVFF  FF2,00
514A:  BCF    FF2.7
514C:  MOVLW  03
514E:  MOVWF  FA9
5150:  MOVFF  54,FA8
5154:  BCF    FA6.6
5156:  BCF    FA6.7
5158:  BSF    FA6.2
515A:  MOVLW  55
515C:  MOVWF  FA7
515E:  MOVLW  AA
5160:  MOVWF  FA7
5162:  BSF    FA6.1
5164:  BTFSC  FA6.1
5166:  BRA    5164
5168:  BCF    FA6.2
516A:  MOVF   00,W
516C:  IORWF  FF2,F
....................              
....................             printf(lcd_putc,"\fKOSTUR KART V1.0"); 
516E:  MOVLW  2A
5170:  MOVWF  FF6
5172:  MOVLW  07
5174:  MOVWF  FF7
5176:  CLRF   19
5178:  BTFSC  FF2.7
517A:  BSF    19.7
517C:  BCF    FF2.7
517E:  MOVLB  0
5180:  CALL   08DE
5184:  BTFSC  19.7
5186:  BSF    FF2.7
5188:  CLRF   19
518A:  BTFSC  FF2.7
518C:  BSF    19.7
518E:  BCF    FF2.7
....................             printf(lcd_putc,"\n%05Lu  jtn:%uTL",jtnCounter,jtnTLMik); 
5190:  MOVLW  0A
5192:  MOVLB  1
5194:  MOVWF  x85
5196:  MOVLB  0
5198:  CALL   0884
519C:  BTFSC  19.7
519E:  BSF    FF2.7
51A0:  MOVLW  45
51A2:  MOVWF  FE9
51A4:  MOVFF  54,166
51A8:  MOVFF  53,165
51AC:  MOVFF  52,164
51B0:  MOVFF  51,163
51B4:  CALL   0CD6
51B8:  MOVLW  42
51BA:  MOVWF  FF6
51BC:  MOVLW  07
51BE:  MOVWF  FF7
51C0:  MOVLW  06
51C2:  MOVLB  1
51C4:  MOVWF  x69
51C6:  MOVLB  0
51C8:  CALL   0C0E
51CC:  MOVFF  141,163
51D0:  MOVLW  1B
51D2:  MOVLB  1
51D4:  MOVWF  x64
51D6:  MOVLB  0
51D8:  CALL   0B6E
51DC:  CLRF   19
51DE:  BTFSC  FF2.7
51E0:  BSF    19.7
51E2:  BCF    FF2.7
51E4:  MOVLW  54
51E6:  MOVLB  1
51E8:  MOVWF  x85
51EA:  MOVLB  0
51EC:  CALL   0884
51F0:  BTFSC  19.7
51F2:  BSF    FF2.7
51F4:  CLRF   19
51F6:  BTFSC  FF2.7
51F8:  BSF    19.7
51FA:  BCF    FF2.7
51FC:  MOVLW  4C
51FE:  MOVLB  1
5200:  MOVWF  x85
5202:  MOVLB  0
5204:  CALL   0884
5208:  BTFSC  19.7
520A:  BSF    FF2.7
....................  
....................             jetonAtildiIslem(); 
520C:  GOTO   1B06
....................              
....................              
....................         }else{ 
5210:  MOVLB  1
....................            // output_low(ticket_out_pin) ;  
....................            // rgb_beyaz_off(); 
....................         } 
....................         
....................         if(jetonDurum==TRUE){     // Oyun baþatýldý 
5212:  BTFSS  x40.0
5214:  GOTO   5A2E
....................              
....................            // P10_calisma_ani(millis()-oyunSureSayBasla);  
....................             jetonAtildi=FALSE ; 
5218:  BCF    x40.1
....................             time_sens_oku=millis(); 
521A:  MOVFF  33,D7
521E:  MOVFF  32,D6
5222:  MOVFF  31,D5
5226:  MOVFF  30,D4
....................              
....................              
....................             enable_interrupts(INT_TIMER0); 
522A:  BSF    FF2.5
....................              
....................             setMillis(0); 
522C:  CLRF   33
522E:  CLRF   32
5230:  CLRF   31
5232:  CLRF   30
....................              
....................             int last_sw1=0, last_sw2=0; 
....................             int islem_durum1=0, islem_durum2=0; 
....................             long m1_sure=0; 
....................             long m2_sure=0; 
....................             unsigned long long time_mp3_remix=0;   //32 bit int 
....................             unsigned long long time_sens_hata=0; 
5234:  CLRF   x4F
5236:  CLRF   x50
5238:  CLRF   x51
523A:  CLRF   x52
523C:  CLRF   x54
523E:  CLRF   x53
5240:  CLRF   x56
5242:  CLRF   x55
5244:  CLRF   x5A
5246:  CLRF   x59
5248:  CLRF   x58
524A:  CLRF   x57
524C:  CLRF   x5E
524E:  CLRF   x5D
5250:  CLRF   x5C
5252:  CLRF   x5B
....................            // rgb_beyaz_off(); 
....................              
....................             hc_595_clr_allPins(); 
5254:  CLRF   x6C
5256:  CLRF   x6D
5258:  CLRF   x6E
525A:  MOVLB  0
525C:  CALL   092A
....................             rgb_beyaz_on(); 
5260:  BSF    48.6
5262:  BSF    48.7
5264:  BSF    47.0
5266:  MOVFF  46,16C
526A:  MOVFF  47,16D
526E:  MOVFF  48,16E
5272:  CALL   092A
....................             oyunBitisSureBasla=millis(); 
5276:  MOVFF  33,85
527A:  MOVFF  32,84
527E:  MOVFF  31,83
5282:  MOVFF  30,82
....................             // oyun oynanýyor.... 
....................             do{ 
....................                  
....................                 if(millis()-time_mp3_remix>2000){ 
5286:  MOVLB  1
5288:  MOVF   x57,W
528A:  SUBWF  30,W
528C:  MOVWF  x5F
528E:  MOVF   x58,W
5290:  SUBWFB 31,W
5292:  MOVWF  x60
5294:  MOVF   x59,W
5296:  SUBWFB 32,W
5298:  MOVWF  x61
529A:  MOVF   x5A,W
529C:  SUBWFB 33,W
529E:  MOVWF  x62
52A0:  MOVF   x62,F
52A2:  BNZ   52B8
52A4:  MOVF   x61,F
52A6:  BNZ   52B8
52A8:  MOVF   x60,W
52AA:  SUBLW  06
52AC:  BC    52F0
52AE:  XORLW  FF
52B0:  BNZ   52B8
52B2:  MOVF   x5F,W
52B4:  SUBLW  D0
52B6:  BC    52F0
....................                      
....................                    if(input(DF_BUSY_PIN)){ 
52B8:  BTFSS  F81.1
52BA:  BRA    52E0
....................                        mp3_stop(); 
52BC:  MOVLB  0
52BE:  CALL   11A8
....................                        delay_m_us(100);//delay_ms(100); 
52C2:  MOVLB  1
52C4:  CLRF   x67
52C6:  MOVLW  64
52C8:  MOVWF  x66
52CA:  MOVLB  0
52CC:  CALL   0E9A
....................                        mp3_play(mp3_remix); 
52D0:  MOVLB  1
52D2:  CLRF   x67
52D4:  MOVLW  0A
52D6:  MOVWF  x66
52D8:  MOVLB  0
52DA:  CALL   11B8
52DE:  MOVLB  1
....................                    }  
....................                    time_mp3_remix=millis(); 
52E0:  MOVFF  33,15A
52E4:  MOVFF  32,159
52E8:  MOVFF  31,158
52EC:  MOVFF  30,157
....................                 } 
....................                 
....................                 if(millis()-time_sens_oku>time_sens_okuma_sayisi)       //  50 defa olçüm yap 20mS de bir. 
52F0:  MOVLB  0
52F2:  MOVF   xD4,W
52F4:  SUBWF  30,W
52F6:  MOVLB  1
52F8:  MOVWF  x5F
52FA:  MOVLB  0
52FC:  MOVF   xD5,W
52FE:  SUBWFB 31,W
5300:  MOVLB  1
5302:  MOVWF  x60
5304:  MOVLB  0
5306:  MOVF   xD6,W
5308:  SUBWFB 32,W
530A:  MOVLB  1
530C:  MOVWF  x61
530E:  MOVLB  0
5310:  MOVF   xD7,W
5312:  SUBWFB 33,W
5314:  MOVLB  1
5316:  MOVWF  x62
5318:  MOVF   x62,F
531A:  BNZ   532A
531C:  MOVF   x61,F
531E:  BNZ   532A
5320:  MOVF   x60,F
5322:  BNZ   532A
5324:  MOVF   x5F,W
5326:  SUBWF  55,W
5328:  BC    534A
....................                 { 
....................                     sw_sa_algila=swSaAlgila(SENS_OKU_H_L);   //yaklaþýk (100us*16)*6=10mS iþlem süresi 
532A:  MOVLW  4C
532C:  MOVWF  x65
532E:  MOVLB  0
5330:  CALL   1986
5334:  MOVFF  01,4E
....................                     time_sens_oku=millis(); 
5338:  MOVFF  33,D7
533C:  MOVFF  32,D6
5340:  MOVFF  31,D5
5344:  MOVFF  30,D4
5348:  MOVLB  1
....................                      
....................                 }//else sw_sa_algila=0xFF; 
....................                  
....................                 if(!sw_sa_algila)f_oyunBitti=TRUE; 
534A:  MOVF   4E,F
534C:  BNZ   5354
534E:  MOVLB  0
5350:  BSF    x81.2
5352:  MOVLB  1
....................                  
....................                 if(sw_sa_algila!=0xFF) 
5354:  INCFSZ 4E,W
5356:  BRA    535A
5358:  BRA    53F4
....................                 {        
....................                     sw_ses_oynat(sw_sa_algila); 
535A:  MOVFF  4E,165
535E:  MOVLB  0
5360:  CALL   20A8
....................  
....................                     islem_durum1=islem_durum2=0; 
5364:  MOVLB  1
5366:  CLRF   x52
5368:  MOVFF  152,151
....................                      
....................                     if(sw_sa_algila==sw_11 || sw_sa_algila==sw_12 || sw_sa_algila==sw_13){ 
536C:  MOVF   4E,W
536E:  SUBLW  0B
5370:  BZ    537E
5372:  MOVF   4E,W
5374:  SUBLW  0C
5376:  BZ    537E
5378:  MOVF   4E,W
537A:  SUBLW  0D
537C:  BNZ   53A0
....................                        m1_sure+=(long)(m_sure_hesapla(sw_sa_algila)/2);  
537E:  MOVFF  4E,15F
5382:  MOVLB  0
5384:  CALL   2100
5388:  MOVFF  02,160
538C:  BCF    FD8.0
538E:  MOVLB  1
5390:  RRCF   02,W
5392:  MOVWF  03
5394:  RRCF   01,W
5396:  ADDWF  x53,F
5398:  MOVF   03,W
539A:  ADDWFC x54,F
....................                        last_sw1=sw_sa_algila; 
539C:  MOVFF  4E,14F
....................                     } 
....................                     if(sw_sa_algila==sw_21 || sw_sa_algila==sw_22 || sw_sa_algila==sw_23){ 
53A0:  MOVF   4E,W
53A2:  SUBLW  15
53A4:  BZ    53B2
53A6:  MOVF   4E,W
53A8:  SUBLW  16
53AA:  BZ    53B2
53AC:  MOVF   4E,W
53AE:  SUBLW  17
53B0:  BNZ   53D4
....................                        m2_sure+=(long)(m_sure_hesapla(sw_sa_algila)/2);  
53B2:  MOVFF  4E,15F
53B6:  MOVLB  0
53B8:  CALL   2100
53BC:  MOVFF  02,160
53C0:  BCF    FD8.0
53C2:  MOVLB  1
53C4:  RRCF   02,W
53C6:  MOVWF  03
53C8:  RRCF   01,W
53CA:  ADDWF  x55,F
53CC:  MOVF   03,W
53CE:  ADDWFC x56,F
....................                        last_sw2=sw_sa_algila; 
53D0:  MOVFF  4E,150
....................                     } 
....................                      
....................                     time_mp3_remix=millis(); 
53D4:  MOVFF  33,15A
53D8:  MOVFF  32,159
53DC:  MOVFF  31,158
53E0:  MOVFF  30,157
....................                     time_sens_hata=millis(); 
53E4:  MOVFF  33,15E
53E8:  MOVFF  32,15D
53EC:  MOVFF  31,15C
53F0:  MOVFF  30,15B
....................                 }                 
....................  
....................                 if(last_sw1==sw_11 || last_sw1==sw_12 || last_sw1==sw_13)  //boylece motorlar için süreklilik saðlanmýþ olur. 
53F4:  MOVF   x4F,W
53F6:  SUBLW  0B
53F8:  BZ    5406
53FA:  MOVF   x4F,W
53FC:  SUBLW  0C
53FE:  BZ    5406
5400:  MOVF   x4F,W
5402:  SUBLW  0D
5404:  BNZ   541E
....................                 { 
....................                     islem_durum1=sw_motor_oynat(last_sw1,m1_sure); 
5406:  MOVFF  14F,15F
540A:  MOVFF  154,161
540E:  MOVFF  153,160
5412:  MOVLB  0
5414:  CALL   21EC
5418:  MOVFF  01,151
541C:  MOVLB  1
....................                      
....................                 } 
....................                 if(last_sw2==sw_21 || last_sw2==sw_22 || last_sw2==sw_23) 
541E:  MOVF   x50,W
5420:  SUBLW  15
5422:  BZ    5430
5424:  MOVF   x50,W
5426:  SUBLW  16
5428:  BZ    5430
542A:  MOVF   x50,W
542C:  SUBLW  17
542E:  BNZ   5448
....................                 { 
....................                     islem_durum2=sw_motor_oynat(last_sw2,m2_sure); 
5430:  MOVFF  150,15F
5434:  MOVFF  156,161
5438:  MOVFF  155,160
543C:  MOVLB  0
543E:  CALL   21EC
5442:  MOVFF  01,152
5446:  MOVLB  1
....................                 } 
....................      
....................                 if(islem_durum1){ 
5448:  MOVF   x51,F
544A:  BZ    5458
....................                     last_sw1=sw_sa_algila;  //motor iþlemi bitti ise yeni sensor blgisini yükle. 
544C:  MOVFF  4E,14F
....................                     if(sw_sa_algila==0xFF) m1_sure=0;   //sensor yoksa süre 0 
5450:  INCFSZ 4E,W
5452:  BRA    5458
5454:  CLRF   x54
5456:  CLRF   x53
....................                 } 
....................                 if(islem_durum2){ 
5458:  MOVF   x52,F
545A:  BZ    5468
....................                     last_sw2=sw_sa_algila; 
545C:  MOVFF  4E,150
....................                     if(sw_sa_algila==0xFF) m2_sure=0; 
5460:  INCFSZ 4E,W
5462:  BRA    5468
5464:  CLRF   x56
5466:  CLRF   x55
....................                 } 
....................  
....................                 printf(lcd_putc,"\fSENS: %lu ",last_adc_deger); 
5468:  MOVLW  4E
546A:  MOVWF  FF6
546C:  MOVLW  07
546E:  MOVWF  FF7
5470:  MOVLW  07
5472:  MOVWF  x69
5474:  MOVLB  0
5476:  CALL   0C0E
547A:  MOVLW  10
547C:  MOVWF  FE9
547E:  MOVFF  50,167
5482:  MOVFF  4F,166
5486:  CALL   12F4
548A:  CLRF   19
548C:  BTFSC  FF2.7
548E:  BSF    19.7
5490:  BCF    FF2.7
5492:  MOVLW  20
5494:  MOVLB  1
5496:  MOVWF  x85
5498:  MOVLB  0
549A:  CALL   0884
549E:  BTFSC  19.7
54A0:  BSF    FF2.7
....................                 printf(lcd_putc,"\nOyun: %Lu",(millis()-oyunBitisSureBasla)); 
54A2:  MOVF   x82,W
54A4:  SUBWF  30,W
54A6:  MOVLB  1
54A8:  MOVWF  x5F
54AA:  MOVLB  0
54AC:  MOVF   x83,W
54AE:  SUBWFB 31,W
54B0:  MOVLB  1
54B2:  MOVWF  x60
54B4:  MOVLB  0
54B6:  MOVF   x84,W
54B8:  SUBWFB 32,W
54BA:  MOVLB  1
54BC:  MOVWF  x61
54BE:  MOVLB  0
54C0:  MOVF   x85,W
54C2:  SUBWFB 33,W
54C4:  MOVLB  1
54C6:  MOVWF  x62
54C8:  MOVLW  5A
54CA:  MOVWF  FF6
54CC:  MOVLW  07
54CE:  MOVWF  FF7
54D0:  MOVLW  07
54D2:  MOVWF  x69
54D4:  MOVLB  0
54D6:  CALL   0C0E
54DA:  MOVLW  41
54DC:  MOVWF  FE9
54DE:  MOVFF  162,166
54E2:  MOVFF  161,165
54E6:  MOVFF  160,164
54EA:  MOVFF  15F,163
54EE:  CALL   0CD6
....................                  
....................                 if(f_oyunBitti||(millis()-oyunBitisSureBasla) > ((unsigned long long)(_mul(ee_oyunSure,60000LL)))  // 3*60*1000 mS 
....................                    ||(sa_m1_2())||(sa_m2_2())) 
54F2:  BTFSC  x81.2
54F4:  BRA    557A
54F6:  MOVF   x82,W
54F8:  SUBWF  30,W
54FA:  MOVLB  1
54FC:  MOVWF  x5F
54FE:  MOVLB  0
5500:  MOVF   x83,W
5502:  SUBWFB 31,W
5504:  MOVLB  1
5506:  MOVWF  x60
5508:  MOVLB  0
550A:  MOVF   x84,W
550C:  SUBWFB 32,W
550E:  MOVLB  1
5510:  MOVWF  x61
5512:  MOVLB  0
5514:  MOVF   x85,W
5516:  SUBWFB 33,W
5518:  MOVLB  1
551A:  MOVWF  x62
551C:  CLRF   x64
551E:  MOVFF  86,163
5522:  MOVLW  EA
5524:  MOVWF  x66
5526:  MOVLW  60
5528:  MOVWF  x65
552A:  MOVLB  0
552C:  GOTO   2366
5530:  MOVF   03,W
5532:  MOVLB  1
5534:  SUBWF  x62,W
5536:  BNC   5568
5538:  BTFSC  FD8.2
553A:  BRA    5540
553C:  MOVLB  0
553E:  BRA    557A
5540:  MOVF   02,W
5542:  SUBWF  x61,W
5544:  BNC   5568
5546:  BTFSC  FD8.2
5548:  BRA    554E
554A:  MOVLB  0
554C:  BRA    557A
554E:  MOVF   01,W
5550:  SUBWF  x60,W
5552:  BNC   5568
5554:  BTFSC  FD8.2
5556:  BRA    555C
5558:  MOVLB  0
555A:  BRA    557A
555C:  MOVF   x5F,W
555E:  SUBWF  00,W
5560:  BTFSC  FD8.0
5562:  BRA    5568
5564:  MOVLB  0
5566:  BRA    557A
5568:  MOVLB  0
556A:  CALL   13C6
556E:  MOVF   01,F
5570:  BNZ   557A
5572:  CALL   142A
5576:  MOVF   01,F
5578:  BZ    557C
....................                 { 
....................                     f_oyunBitti=TRUE;  
557A:  BSF    x81.2
....................                 } 
....................                   
....................             }while(!f_oyunBitti); 
557C:  BTFSS  x81.2
557E:  BRA    5286
....................  
....................             //p10_oyun_puan_goster(o1_puan,o2_puan); 
....................             //disable_interrupts(INT_TIMER0); 
....................             // Oyun bitti... 
....................                 f_oyunBitti=FALSE; 
5580:  BCF    x81.2
....................                 enable_interrupts(INT_EXT); 
5582:  BSF    FF2.4
....................                  
....................                 mp3_stop();delay_ms(100); 
5584:  CALL   11A8
5588:  CLRF   19
558A:  BTFSC  FF2.7
558C:  BSF    19.7
558E:  BCF    FF2.7
5590:  MOVLW  64
5592:  MOVLB  1
5594:  MOVWF  x86
5596:  MOVLB  0
5598:  CALL   0834
559C:  BTFSC  19.7
559E:  BSF    FF2.7
....................                 mp3_play(wav_heySesi); 
55A0:  MOVLB  1
55A2:  CLRF   x67
55A4:  MOVLW  04
55A6:  MOVWF  x66
55A8:  MOVLB  0
55AA:  CALL   11B8
....................  
....................                 printf(lcd_putc,"\fOyun Bitti"); 
55AE:  MOVLW  66
55B0:  MOVWF  FF6
55B2:  MOVLW  07
55B4:  MOVWF  FF7
55B6:  CLRF   19
55B8:  BTFSC  FF2.7
55BA:  BSF    19.7
55BC:  BCF    FF2.7
55BE:  CALL   08DE
55C2:  BTFSC  19.7
55C4:  BSF    FF2.7
....................                 rgb_beyaz_off(); 
55C6:  BCF    48.6
55C8:  BCF    48.7
55CA:  BCF    47.0
55CC:  MOVFF  46,16C
55D0:  MOVFF  47,16D
55D4:  MOVFF  48,16E
55D8:  CALL   092A
....................                 sw_led_on(); 
55DC:  BSF    48.3
55DE:  MOVFF  46,16C
55E2:  MOVFF  47,16D
55E6:  MOVFF  48,16E
55EA:  CALL   092A
55EE:  BSF    48.4
55F0:  MOVFF  46,16C
55F4:  MOVFF  47,16D
55F8:  MOVFF  48,16E
55FC:  CALL   092A
5600:  BSF    48.5
5602:  MOVFF  46,16C
5606:  MOVFF  47,16D
560A:  MOVFF  48,16E
560E:  CALL   092A
5612:  BSF    48.0
5614:  MOVFF  46,16C
5618:  MOVFF  47,16D
561C:  MOVFF  48,16E
5620:  CALL   092A
5624:  BSF    48.1
5626:  MOVFF  46,16C
562A:  MOVFF  47,16D
562E:  MOVFF  48,16E
5632:  CALL   092A
5636:  BSF    48.2
5638:  MOVFF  46,16C
563C:  MOVFF  47,16D
5640:  MOVFF  48,16E
5644:  CALL   092A
....................                  
....................                 motor1_dur(); 
5648:  BCF    46.0
564A:  BCF    46.1
564C:  MOVFF  46,16C
5650:  MOVFF  47,16D
5654:  MOVFF  48,16E
5658:  CALL   092A
....................                 motor2_dur(); 
565C:  BCF    46.2
565E:  BCF    46.3
5660:  MOVFF  46,16C
5664:  MOVFF  47,16D
5668:  MOVFF  48,16E
566C:  CALL   092A
....................                 motor3_geri();delay_ms(1000);motor3_dur();  //Oyun biter bitmez top haznesini kapat...Çekme motor suresi uzun olursa >5-10 saniye  
5670:  BSF    46.5
5672:  BCF    46.4
5674:  MOVFF  46,16C
5678:  MOVFF  47,16D
567C:  MOVFF  48,16E
5680:  CALL   092A
5684:  MOVLW  04
5686:  MOVLB  1
5688:  MOVWF  x5F
568A:  CLRF   19
568C:  BTFSC  FF2.7
568E:  BSF    19.7
5690:  BCF    FF2.7
5692:  MOVLW  FA
5694:  MOVWF  x86
5696:  MOVLB  0
5698:  CALL   0834
569C:  BTFSC  19.7
569E:  BSF    FF2.7
56A0:  MOVLB  1
56A2:  DECFSZ x5F,F
56A4:  BRA    568A
56A6:  BCF    46.4
56A8:  BCF    46.5
56AA:  MOVFF  46,16C
56AE:  MOVFF  47,16D
56B2:  MOVFF  48,16E
56B6:  MOVLB  0
56B8:  CALL   092A
....................                 delay_ms(1000);                             // çekme motoru yanabilir. 
56BC:  MOVLW  04
56BE:  MOVLB  1
56C0:  MOVWF  x5F
56C2:  CLRF   19
56C4:  BTFSC  FF2.7
56C6:  BSF    19.7
56C8:  BCF    FF2.7
56CA:  MOVLW  FA
56CC:  MOVWF  x86
56CE:  MOVLB  0
56D0:  CALL   0834
56D4:  BTFSC  19.7
56D6:  BSF    FF2.7
56D8:  MOVLB  1
56DA:  DECFSZ x5F,F
56DC:  BRA    56C2
....................                  
....................                 if((unsigned int16)(oyunSureSaySaniye/1000)<maxOyunSure)// en az süre için 
56DE:  BCF    FD8.1
56E0:  MOVFF  37,179
56E4:  MOVFF  36,178
56E8:  MOVFF  35,177
56EC:  MOVFF  34,176
56F0:  CLRF   x7D
56F2:  CLRF   x7C
56F4:  MOVLW  03
56F6:  MOVWF  x7B
56F8:  MOVLW  E8
56FA:  MOVWF  x7A
56FC:  MOVLB  0
56FE:  CALL   0C42
5702:  MOVFF  01,160
5706:  MOVFF  00,15F
570A:  MOVLB  1
570C:  MOVF   01,W
570E:  SUBWF  x44,W
5710:  BNC   5748
5712:  BNZ   571A
5714:  MOVF   x43,W
5716:  SUBWF  x5F,W
5718:  BC    5748
....................                     maxOyunSure=(unsigned int16)(oyunSureSaySaniye/1000);       //1000uS kesme olduðu için TIMER0 
571A:  BCF    FD8.1
571C:  MOVFF  37,179
5720:  MOVFF  36,178
5724:  MOVFF  35,177
5728:  MOVFF  34,176
572C:  CLRF   x7D
572E:  CLRF   x7C
5730:  MOVLW  03
5732:  MOVWF  x7B
5734:  MOVLW  E8
5736:  MOVWF  x7A
5738:  MOVLB  0
573A:  CALL   0C42
573E:  MOVFF  01,144
5742:  MOVFF  00,143
5746:  MOVLB  1
....................                  
....................                 //p10_oyun_bitti(o1_puan,o2_puan,(unsigned int16)(oyunSureSaySaniye/1250)); 
....................                 oyunSureSaySaniye=0; 
5748:  CLRF   37
574A:  CLRF   36
574C:  CLRF   35
574E:  CLRF   34
....................                 delayMsSay=0; //motorlar baþlangýç konumuna gelirkne ledanim+max switc bekleme süresi. 
5750:  CLRF   x46
5752:  CLRF   x45
....................                  //motorlar geri ilk konumlarýna  
....................                 sw_led_off(); 
5754:  BCF    48.3
5756:  MOVFF  46,16C
575A:  MOVFF  47,16D
575E:  MOVFF  48,16E
5762:  MOVLB  0
5764:  CALL   092A
5768:  BCF    48.4
576A:  MOVFF  46,16C
576E:  MOVFF  47,16D
5772:  MOVFF  48,16E
5776:  CALL   092A
577A:  BCF    48.5
577C:  MOVFF  46,16C
5780:  MOVFF  47,16D
5784:  MOVFF  48,16E
5788:  CALL   092A
578C:  BCF    48.0
578E:  MOVFF  46,16C
5792:  MOVFF  47,16D
5796:  MOVFF  48,16E
579A:  CALL   092A
579E:  BCF    48.1
57A0:  MOVFF  46,16C
57A4:  MOVFF  47,16D
57A8:  MOVFF  48,16E
57AC:  CALL   092A
57B0:  BCF    48.5
57B2:  MOVFF  46,16C
57B6:  MOVFF  47,16D
57BA:  MOVFF  48,16E
57BE:  CALL   092A
....................                  
....................                 //motor1_geri(); 
....................                 //motor2_geri(); 
....................                  
....................                 if(!sa_m1_1()){ // motor 1 baslangýçta deðilse 
57C2:  CALL   0DD2
57C6:  MOVF   01,F
57C8:  BNZ   57DE
....................                     motor1_geri();       
57CA:  BSF    46.1
57CC:  BCF    46.0
57CE:  MOVFF  46,16C
57D2:  MOVFF  47,16D
57D6:  MOVFF  48,16E
57DA:  CALL   092A
....................                 } 
....................                 if(!sa_m2_1()){ // motor 2 baslangýçta deðilse 
57DE:  CALL   0E36
57E2:  MOVF   01,F
57E4:  BNZ   57FA
....................                    motor2_geri(); 
57E6:  BSF    46.3
57E8:  BCF    46.2
57EA:  MOVFF  46,16C
57EE:  MOVFF  47,16D
57F2:  MOVFF  48,16E
57F6:  CALL   092A
....................                 } 
....................                  
....................                 mp3_stop();delay_ms(100); 
57FA:  CALL   11A8
57FE:  CLRF   19
5800:  BTFSC  FF2.7
5802:  BSF    19.7
5804:  BCF    FF2.7
5806:  MOVLW  64
5808:  MOVLB  1
580A:  MOVWF  x86
580C:  MOVLB  0
580E:  CALL   0834
5812:  BTFSC  19.7
5814:  BSF    FF2.7
....................                 mp3_play(wav_alkisSesi); 
5816:  MOVLB  1
5818:  CLRF   x67
581A:  MOVLW  05
581C:  MOVWF  x66
581E:  MOVLB  0
5820:  CALL   11B8
....................                  
....................                 do{  
....................                     sw_led_off();   
5824:  BCF    48.3
5826:  MOVFF  46,16C
582A:  MOVFF  47,16D
582E:  MOVFF  48,16E
5832:  CALL   092A
5836:  BCF    48.4
5838:  MOVFF  46,16C
583C:  MOVFF  47,16D
5840:  MOVFF  48,16E
5844:  CALL   092A
5848:  BCF    48.5
584A:  MOVFF  46,16C
584E:  MOVFF  47,16D
5852:  MOVFF  48,16E
5856:  CALL   092A
585A:  BCF    48.0
585C:  MOVFF  46,16C
5860:  MOVFF  47,16D
5864:  MOVFF  48,16E
5868:  CALL   092A
586C:  BCF    48.1
586E:  MOVFF  46,16C
5872:  MOVFF  47,16D
5876:  MOVFF  48,16E
587A:  CALL   092A
587E:  BCF    48.5
5880:  MOVFF  46,16C
5884:  MOVFF  47,16D
5888:  MOVFF  48,16E
588C:  CALL   092A
....................                     if(sa_m1_1()){ // motor 1 baslangýç SA 
5890:  CALL   0DD2
5894:  MOVF   01,F
5896:  BZ    58AC
....................                          motor1_dur(); 
5898:  BCF    46.0
589A:  BCF    46.1
589C:  MOVFF  46,16C
58A0:  MOVFF  47,16D
58A4:  MOVFF  48,16E
58A8:  CALL   092A
....................                     } 
....................                     if(sa_m2_1()){ // motor 2 baslangýç SA 
58AC:  CALL   0E36
58B0:  MOVF   01,F
58B2:  BZ    58C8
....................                          motor2_dur(); 
58B4:  BCF    46.2
58B6:  BCF    46.3
58B8:  MOVFF  46,16C
58BC:  MOVFF  47,16D
58C0:  MOVFF  48,16E
58C4:  CALL   092A
....................                     } 
....................                     // Eðer çekme motoru yerine motor kullanýýrsa... 
.................... //                    if(sa_m3_1()){ // motor 3 baslangýç SA 
.................... //                         motor3_dur(); 
.................... //                    } 
....................                     if((sa_m1_1())&&(sa_m2_1())){ 
58C8:  CALL   0DD2
58CC:  MOVF   01,F
58CE:  BZ    58DA
58D0:  CALL   0E36
58D4:  MOVF   01,F
58D6:  BZ    58DA
....................                         //P10_baslangic(); 
....................                         break; 
58D8:  BRA    58E0
....................                     } 
....................                      
....................                   motorGeriLedAnim();  //switch max bekleme süresi eklendi 
58DA:  GOTO   23A8
....................  
....................                 }while(1); 
58DE:  BRA    5824
....................                  
....................                 delay_mt_geri=0; 
58E0:  MOVLB  1
58E2:  CLRF   x48
58E4:  CLRF   x47
....................                 delayMsSay=0; 
58E6:  CLRF   x46
58E8:  CLRF   x45
....................                 sw_led_off(); 
58EA:  BCF    48.3
58EC:  MOVFF  46,16C
58F0:  MOVFF  47,16D
58F4:  MOVFF  48,16E
58F8:  MOVLB  0
58FA:  CALL   092A
58FE:  BCF    48.4
5900:  MOVFF  46,16C
5904:  MOVFF  47,16D
5908:  MOVFF  48,16E
590C:  CALL   092A
5910:  BCF    48.5
5912:  MOVFF  46,16C
5916:  MOVFF  47,16D
591A:  MOVFF  48,16E
591E:  CALL   092A
5922:  BCF    48.0
5924:  MOVFF  46,16C
5928:  MOVFF  47,16D
592C:  MOVFF  48,16E
5930:  CALL   092A
5934:  BCF    48.1
5936:  MOVFF  46,16C
593A:  MOVFF  47,16D
593E:  MOVFF  48,16E
5942:  CALL   092A
5946:  BCF    48.5
5948:  MOVFF  46,16C
594C:  MOVFF  47,16D
5950:  MOVFF  48,16E
5954:  CALL   092A
....................                 motor1_dur(); 
5958:  BCF    46.0
595A:  BCF    46.1
595C:  MOVFF  46,16C
5960:  MOVFF  47,16D
5964:  MOVFF  48,16E
5968:  CALL   092A
....................                 motor2_dur(); 
596C:  BCF    46.2
596E:  BCF    46.3
5970:  MOVFF  46,16C
5974:  MOVFF  47,16D
5978:  MOVFF  48,16E
597C:  CALL   092A
....................                 motor3_dur(); 
5980:  BCF    46.4
5982:  BCF    46.5
5984:  MOVFF  46,16C
5988:  MOVFF  47,16D
598C:  MOVFF  48,16E
5990:  CALL   092A
....................                  
....................                 mp3_stop();  
5994:  CALL   11A8
5998:  CLRF   19
599A:  BTFSC  FF2.7
599C:  BSF    19.7
599E:  BCF    FF2.7
....................                 delay_ms(100); 
59A0:  MOVLW  64
59A2:  MOVLB  1
59A4:  MOVWF  x86
59A6:  MOVLB  0
59A8:  CALL   0834
59AC:  BTFSC  19.7
59AE:  BSF    FF2.7
.................... //               // mp3_enableLoopAll(); 
....................                 mp3_play(mp3_remix); 
59B0:  MOVLB  1
59B2:  CLRF   x67
59B4:  MOVLW  0A
59B6:  MOVWF  x66
59B8:  MOVLB  0
59BA:  CALL   11B8
....................                 
....................                 jetonDurum=FALSE; 
59BE:  MOVLB  1
59C0:  BCF    x40.0
....................                 f_oyunBitti=FALSE; 
59C2:  MOVLB  0
59C4:  BCF    x81.2
....................     
....................                  
....................                 if(read_eeprom(ee_adres_dfSes)!=0xFF)  
59C6:  MOVFF  FF2,15F
59CA:  BCF    FF2.7
59CC:  MOVLW  0C
59CE:  MOVWF  FA9
59D0:  BCF    FA6.6
59D2:  BCF    FA6.7
59D4:  BSF    FA6.0
59D6:  MOVF   FA8,W
59D8:  MOVLB  1
59DA:  BTFSC  x5F.7
59DC:  BSF    FF2.7
59DE:  SUBLW  FF
59E0:  BZ    5A08
....................                     mp3_set_volume(read_eeprom(ee_adres_dfSes)); 
59E2:  MOVFF  FF2,15F
59E6:  BCF    FF2.7
59E8:  MOVLW  0C
59EA:  MOVWF  FA9
59EC:  BCF    FA6.6
59EE:  BCF    FA6.7
59F0:  BSF    FA6.0
59F2:  MOVF   FA8,W
59F4:  BTFSC  x5F.7
59F6:  BSF    FF2.7
59F8:  MOVWF  x60
59FA:  MOVFF  160,165
59FE:  MOVLB  0
5A00:  CALL   1182
5A04:  BRA    5A12
5A06:  MOVLB  1
....................                 else dfPlayerNormSes(); 
5A08:  MOVLW  14
5A0A:  MOVWF  x65
5A0C:  MOVLB  0
5A0E:  CALL   1182
5A12:  CLRF   19
5A14:  BTFSC  FF2.7
5A16:  BSF    19.7
5A18:  BCF    FF2.7
5A1A:  MOVLW  64
5A1C:  MOVLB  1
5A1E:  MOVWF  x86
5A20:  MOVLB  0
5A22:  CALL   0834
5A26:  BTFSC  19.7
5A28:  BSF    FF2.7
....................                  
....................                 //reset_cpu(); //motorlar geri geldfiktren sonra 
....................             //oyun bitti 
....................         }else if(!jetonDurum){ 
5A2A:  BRA    5D76
5A2C:  MOVLB  1
5A2E:  BTFSC  x40.0
5A30:  BRA    5D76
....................             //Oyun oynanmýyor Oyuncak BOÞTA.... 
....................              
....................             if(read_eeprom(ee_adres_jtnTL)!=0xFF) jtnTLMik=read_eeprom(ee_adres_jtnTL); 
5A32:  MOVFF  FF2,15F
5A36:  BCF    FF2.7
5A38:  MOVLW  04
5A3A:  MOVWF  FA9
5A3C:  BCF    FA6.6
5A3E:  BCF    FA6.7
5A40:  BSF    FA6.0
5A42:  MOVF   FA8,W
5A44:  BTFSC  x5F.7
5A46:  BSF    FF2.7
5A48:  SUBLW  FF
5A4A:  BZ    5A66
5A4C:  MOVFF  FF2,15F
5A50:  BCF    FF2.7
5A52:  MOVLW  04
5A54:  MOVWF  FA9
5A56:  BCF    FA6.6
5A58:  BCF    FA6.7
5A5A:  BSF    FA6.0
5A5C:  MOVF   FA8,W
5A5E:  BTFSC  x5F.7
5A60:  BSF    FF2.7
5A62:  MOVWF  x41
5A64:  BRA    5A84
....................                 else if(read_eeprom(ee_adres_jtnTL)==0xFF) jtnTLMik=1; 
5A66:  MOVFF  FF2,15F
5A6A:  BCF    FF2.7
5A6C:  MOVLW  04
5A6E:  MOVWF  FA9
5A70:  BCF    FA6.6
5A72:  BCF    FA6.7
5A74:  BSF    FA6.0
5A76:  MOVF   FA8,W
5A78:  BTFSC  x5F.7
5A7A:  BSF    FF2.7
5A7C:  SUBLW  FF
5A7E:  BNZ   5A84
5A80:  MOVLW  01
5A82:  MOVWF  x41
....................                  
....................             printf(lcd_putc,"\fKOSTUR KART V1.0"); 
5A84:  MOVLW  72
5A86:  MOVWF  FF6
5A88:  MOVLW  07
5A8A:  MOVWF  FF7
5A8C:  CLRF   19
5A8E:  BTFSC  FF2.7
5A90:  BSF    19.7
5A92:  BCF    FF2.7
5A94:  MOVLB  0
5A96:  CALL   08DE
5A9A:  BTFSC  19.7
5A9C:  BSF    FF2.7
5A9E:  CLRF   19
5AA0:  BTFSC  FF2.7
5AA2:  BSF    19.7
5AA4:  BCF    FF2.7
....................             printf(lcd_putc,"\n%05Lu  jtn:%uTL",jtnCounter,jtnTLMik); 
5AA6:  MOVLW  0A
5AA8:  MOVLB  1
5AAA:  MOVWF  x85
5AAC:  MOVLB  0
5AAE:  CALL   0884
5AB2:  BTFSC  19.7
5AB4:  BSF    FF2.7
5AB6:  MOVLW  45
5AB8:  MOVWF  FE9
5ABA:  MOVFF  54,166
5ABE:  MOVFF  53,165
5AC2:  MOVFF  52,164
5AC6:  MOVFF  51,163
5ACA:  CALL   0CD6
5ACE:  MOVLW  8A
5AD0:  MOVWF  FF6
5AD2:  MOVLW  07
5AD4:  MOVWF  FF7
5AD6:  MOVLW  06
5AD8:  MOVLB  1
5ADA:  MOVWF  x69
5ADC:  MOVLB  0
5ADE:  CALL   0C0E
5AE2:  MOVFF  141,163
5AE6:  MOVLW  1B
5AE8:  MOVLB  1
5AEA:  MOVWF  x64
5AEC:  MOVLB  0
5AEE:  CALL   0B6E
5AF2:  CLRF   19
5AF4:  BTFSC  FF2.7
5AF6:  BSF    19.7
5AF8:  BCF    FF2.7
5AFA:  MOVLW  54
5AFC:  MOVLB  1
5AFE:  MOVWF  x85
5B00:  MOVLB  0
5B02:  CALL   0884
5B06:  BTFSC  19.7
5B08:  BSF    FF2.7
5B0A:  CLRF   19
5B0C:  BTFSC  FF2.7
5B0E:  BSF    19.7
5B10:  BCF    FF2.7
5B12:  MOVLW  4C
5B14:  MOVLB  1
5B16:  MOVWF  x85
5B18:  MOVLB  0
5B1A:  CALL   0884
5B1E:  BTFSC  19.7
5B20:  BSF    FF2.7
....................                        
....................             ledAnimSureBasla=millis(); 
5B22:  MOVFF  33,D2
5B26:  MOVFF  32,D1
5B2A:  MOVFF  31,D0
5B2E:  MOVFF  30,CF
....................             enable_interrupts(INT_TIMER0); 
5B32:  BSF    FF2.5
....................              
....................             do{ 
....................               // dfSesAyarla();  
....................               // jetonKontrol(); 
....................                  
....................                 if(input(DF_BUSY_PIN)){ 
5B34:  BTFSS  F81.1
5B36:  BRA    5B3C
....................                     mp3_rastgele(); 
5B38:  GOTO   263C
....................                 } 
....................                  
....................                 if(!input(btn2)){ 
5B3C:  BTFSC  F80.3
5B3E:  BRA    5BBA
....................                   //delay_ms(250); 
....................                    btnBasSay++; 
5B40:  MOVLB  1
5B42:  INCF   x42,F
....................                    output_high(lcd_led); 
5B44:  BSF    F8A.2
....................                    if(btnBasSay>2){ 
5B46:  MOVF   x42,W
5B48:  SUBLW  02
5B4A:  BC    5BB6
....................                         btnBasSay=0; 
5B4C:  CLRF   x42
....................                         output_high(lcd_led); 
5B4E:  BSF    F8A.2
....................                         printf(lcd_putc,"\f ...AYARLAR... "); 
5B50:  MOVLW  96
5B52:  MOVWF  FF6
5B54:  MOVLW  07
5B56:  MOVWF  FF7
5B58:  CLRF   19
5B5A:  BTFSC  FF2.7
5B5C:  BSF    19.7
5B5E:  BCF    FF2.7
5B60:  MOVLB  0
5B62:  CALL   08DE
5B66:  BTFSC  19.7
5B68:  BSF    FF2.7
....................                         printf(lcd_putc,"\n<<<    <>    >>>"); 
5B6A:  MOVLW  A8
5B6C:  MOVWF  FF6
5B6E:  MOVLW  07
5B70:  MOVWF  FF7
5B72:  CLRF   19
5B74:  BTFSC  FF2.7
5B76:  BSF    19.7
5B78:  BCF    FF2.7
5B7A:  CALL   08DE
5B7E:  BTFSC  19.7
5B80:  BSF    FF2.7
....................                         delay_ms(1000); 
5B82:  MOVLW  04
5B84:  MOVLB  1
5B86:  MOVWF  x5F
5B88:  CLRF   19
5B8A:  BTFSC  FF2.7
5B8C:  BSF    19.7
5B8E:  BCF    FF2.7
5B90:  MOVLW  FA
5B92:  MOVWF  x86
5B94:  MOVLB  0
5B96:  CALL   0834
5B9A:  BTFSC  19.7
5B9C:  BSF    FF2.7
5B9E:  MOVLB  1
5BA0:  DECFSZ x5F,F
5BA2:  BRA    5B88
....................                         hc_595_clr_allPins(); 
5BA4:  CLRF   x6C
5BA6:  CLRF   x6D
5BA8:  CLRF   x6E
5BAA:  MOVLB  0
5BAC:  CALL   092A
....................                         lcdMenuIslem();   
5BB0:  GOTO   4058
5BB4:  MOVLB  1
....................                          
....................                     } 
....................                 }else{ 
5BB6:  BRA    5BBE
5BB8:  MOVLB  0
....................                    // output_low(lcd_led); 
....................                     btnBasSay=0; 
5BBA:  MOVLB  1
5BBC:  CLRF   x42
....................                 } 
....................                  
....................                 switch(anim){ 
5BBE:  MOVF   x4E,W
5BC0:  ADDLW  F8
5BC2:  BTFSC  FD8.0
5BC4:  BRA    5D6E
5BC6:  ADDLW  08
5BC8:  MOVLB  0
5BCA:  GOTO   5D7E
....................                      
....................                     case led_animKarasimsek: 
....................                         
....................                         if(millis()-ledAnimSureBasla>7210LL){ 
5BCE:  MOVF   xCF,W
5BD0:  SUBWF  30,W
5BD2:  MOVLB  1
5BD4:  MOVWF  x5F
5BD6:  MOVLB  0
5BD8:  MOVF   xD0,W
5BDA:  SUBWFB 31,W
5BDC:  MOVLB  1
5BDE:  MOVWF  x60
5BE0:  MOVLB  0
5BE2:  MOVF   xD1,W
5BE4:  SUBWFB 32,W
5BE6:  MOVLB  1
5BE8:  MOVWF  x61
5BEA:  MOVLB  0
5BEC:  MOVF   xD2,W
5BEE:  SUBWFB 33,W
5BF0:  MOVLB  1
5BF2:  MOVWF  x62
5BF4:  MOVF   x62,F
5BF6:  BNZ   5C0C
5BF8:  MOVF   x61,F
5BFA:  BNZ   5C0C
5BFC:  MOVF   x60,W
5BFE:  SUBLW  1B
5C00:  BC    5C34
5C02:  XORLW  FF
5C04:  BNZ   5C0C
5C06:  MOVF   x5F,W
5C08:  SUBLW  2A
5C0A:  BC    5C34
....................                            anim=P10_animTL; 
5C0C:  MOVLW  06
5C0E:  MOVWF  x4E
....................                            ledAnimSureBasla=millis(); 
5C10:  MOVFF  33,D2
5C14:  MOVFF  32,D1
5C18:  MOVFF  31,D0
5C1C:  MOVFF  30,CF
....................                            animSay=0; 
5C20:  MOVLB  0
5C22:  CLRF   xD3
....................                            hc_595_clr_allPins(); 
5C24:  MOVLB  1
5C26:  CLRF   x6C
5C28:  CLRF   x6D
5C2A:  CLRF   x6E
5C2C:  MOVLB  0
5C2E:  CALL   092A
5C32:  MOVLB  1
....................                            
....................                         } 
....................                         ////delay_ms(175);delay_ms boyunca millis() çalýþmadý. timer interruyput delay_ms den sonra çalýþmaya devam etti 
....................                         delay_m_us(150);// delay_ms yerine  timer0 saymasý çok etkilenmedi.  
5C34:  CLRF   x67
5C36:  MOVLW  96
5C38:  MOVWF  x66
5C3A:  MOVLB  0
5C3C:  CALL   0E9A
....................                         led_anim_bosta(animSay++); 
5C40:  MOVF   xD3,W
5C42:  INCF   xD3,F
5C44:  MOVLB  1
5C46:  MOVWF  x5F
5C48:  MOVWF  x60
5C4A:  MOVLB  0
5C4C:  GOTO   44D6
....................                         //printf(lcd_putc,"\f anim_bosta"); 
....................                         //printf(lcd_putc,"\nmS:%Lu",(millis()-ledAnimSureBasla)); 
....................                          
....................                         if(animSay>9)animSay=0; 
5C50:  MOVF   xD3,W
5C52:  SUBLW  09
5C54:  BC    5C58
5C56:  CLRF   xD3
....................                         break; 
5C58:  MOVLB  1
5C5A:  BRA    5D6E
....................                          
....................                     case P10_animKosturBlink: 
....................                          p10_kosturAnim(); 
5C5C:  GOTO   4704
....................                          anim=led_animKarasimsek; 
5C60:  MOVLB  1
5C62:  CLRF   x4E
....................                          ledAnimSureBasla=millis(); 
5C64:  MOVFF  33,D2
5C68:  MOVFF  32,D1
5C6C:  MOVFF  31,D0
5C70:  MOVFF  30,CF
....................                          animSay=0; 
5C74:  MOVLB  0
5C76:  CLRF   xD3
....................                         break; 
5C78:  MOVLB  1
5C7A:  BRA    5D6E
....................                     case led_animKarinca: 
....................                         
....................                         if(millis()-ledAnimSureBasla>8500LL){ 
5C7C:  MOVF   xCF,W
5C7E:  SUBWF  30,W
5C80:  MOVLB  1
5C82:  MOVWF  x5F
5C84:  MOVLB  0
5C86:  MOVF   xD0,W
5C88:  SUBWFB 31,W
5C8A:  MOVLB  1
5C8C:  MOVWF  x60
5C8E:  MOVLB  0
5C90:  MOVF   xD1,W
5C92:  SUBWFB 32,W
5C94:  MOVLB  1
5C96:  MOVWF  x61
5C98:  MOVLB  0
5C9A:  MOVF   xD2,W
5C9C:  SUBWFB 33,W
5C9E:  MOVLB  1
5CA0:  MOVWF  x62
5CA2:  MOVF   x62,F
5CA4:  BNZ   5CBA
5CA6:  MOVF   x61,F
5CA8:  BNZ   5CBA
5CAA:  MOVF   x60,W
5CAC:  SUBLW  20
5CAE:  BC    5CE2
5CB0:  XORLW  FF
5CB2:  BNZ   5CBA
5CB4:  MOVF   x5F,W
5CB6:  SUBLW  34
5CB8:  BC    5CE2
....................                            anim=P10_animMaxSurePuan; 
5CBA:  MOVLW  07
5CBC:  MOVWF  x4E
....................                            ledAnimSureBasla=millis(); 
5CBE:  MOVFF  33,D2
5CC2:  MOVFF  32,D1
5CC6:  MOVFF  31,D0
5CCA:  MOVFF  30,CF
....................                            animSay=0; 
5CCE:  MOVLB  0
5CD0:  CLRF   xD3
....................                            hc_595_clr_allPins(); 
5CD2:  MOVLB  1
5CD4:  CLRF   x6C
5CD6:  CLRF   x6D
5CD8:  CLRF   x6E
5CDA:  MOVLB  0
5CDC:  CALL   092A
5CE0:  MOVLB  1
....................                            
....................                         } 
....................                         //delay_ms(175); 
....................                         delay_m_us(150); 
5CE2:  CLRF   x67
5CE4:  MOVLW  96
5CE6:  MOVWF  x66
5CE8:  MOVLB  0
5CEA:  CALL   0E9A
....................                         ledAnimKarinca(animSay++); 
5CEE:  MOVF   xD3,W
5CF0:  INCF   xD3,F
5CF2:  MOVLB  1
5CF4:  MOVWF  x5F
5CF6:  MOVWF  x60
5CF8:  MOVLB  0
5CFA:  GOTO   477E
....................                          
....................                         if(animSay>11)animSay=0; 
5CFE:  MOVF   xD3,W
5D00:  SUBLW  0B
5D02:  BC    5D06
5D04:  CLRF   xD3
....................                         break; 
5D06:  MOVLB  1
5D08:  BRA    5D6E
....................                     case P10_animTL: 
....................                          
....................                         p10_TL_anim(); 
5D0A:  GOTO   491E
....................                          
....................                         anim=P10_SirketReklam; 
5D0E:  MOVLW  05
5D10:  MOVLB  1
5D12:  MOVWF  x4E
....................                         ledAnimSureBasla=millis(); 
5D14:  MOVFF  33,D2
5D18:  MOVFF  32,D1
5D1C:  MOVFF  31,D0
5D20:  MOVFF  30,CF
....................                         animSay=0; 
5D24:  MOVLB  0
5D26:  CLRF   xD3
....................                         break; 
5D28:  MOVLB  1
5D2A:  BRA    5D6E
....................                     case P10_animMaxSurePuan: 
....................                          
.................... //                        if(o1_puan>o2_puan)P10_animMaxPuanMinSure(o1_puan,maxOyunSure); 
.................... //                        else if(o1_puan<o2_puan)P10_animMaxPuanMinSure(o2_puan,maxOyunSure); 
.................... //                        else if(o1_puan==o2_puan)P10_animMaxPuanMinSure(o1_puan,maxOyunSure); 
....................                          
....................                         anim= P10_animKosturBlink; 
5D2C:  MOVLW  04
5D2E:  MOVLB  1
5D30:  MOVWF  x4E
....................                         ledAnimSureBasla=millis(); 
5D32:  MOVFF  33,D2
5D36:  MOVFF  32,D1
5D3A:  MOVFF  31,D0
5D3E:  MOVFF  30,CF
....................                         animSay=0; 
5D42:  MOVLB  0
5D44:  CLRF   xD3
....................                         break; 
5D46:  MOVLB  1
5D48:  BRA    5D6E
....................                     case P10_SirketReklam : 
....................                         P10_animkosturSirket(); 
5D4A:  GOTO   4A10
....................                         anim=led_animKarinca; 
5D4E:  MOVLW  01
5D50:  MOVLB  1
5D52:  MOVWF  x4E
....................                         ledAnimSureBasla=millis(); 
5D54:  MOVFF  33,D2
5D58:  MOVFF  32,D1
5D5C:  MOVFF  31,D0
5D60:  MOVFF  30,CF
....................                         animSay=0; 
5D64:  MOVLB  0
5D66:  CLRF   xD3
....................                         break; 
5D68:  MOVLB  1
5D6A:  BRA    5D6E
5D6C:  MOVLB  1
....................  
....................                 } 
....................                  
....................             }while(!jetonAtildi); 
5D6E:  BTFSC  x40.1
5D70:  BRA    5D76
5D72:  MOVLB  0
5D74:  BRA    5B34
....................         }//else oyuncak boþta ... 
5D76:  MOVLB  1
5D78:  GOTO   509C
....................          
....................     }//while(TRUE) 
....................      
.................... }//main 
....................  
.................... /********************************Kesme Alt Program****************************/ 
.................... #INT_EXT //HIGH      //Set external interrupt on pin RB0  
.................... void ISR_RB0()  
5D7C:  SLEEP 
.................... {  
....................   // mp3_stop(); 
....................   // mp3_play_physical(wav_jeton); 
....................    printf(lcd_putc,"\fJETON"); 
*
08FE:  MOVLW  22
0900:  MOVWF  FF6
0902:  MOVLW  09
0904:  MOVWF  FF7
0906:  RCALL  08DE
....................  
....................    jetonKontrol(); 
0908:  BTFSC  F81.0
090A:  BRA    090E
090C:  INCF   49,F
090E:  MOVLB  1
0910:  MOVF   x41,W
0912:  SUBWF  49,W
0914:  BNC   091A
0916:  BSF    x40.1
0918:  CLRF   49
....................    //if(jetonAtildi) jetonAtildiIslem(); 
091A:  BCF    FF2.1
091C:  MOVLB  0
091E:  GOTO   0116
.................... } 
....................  
.................... // **!!! delay_ms boyunca millis() çalýþmadý. timer interrupt delay_ms den sonra çalýþmaya devam etti 
.................... // delay_ms yerine  kullanýulýnca timer0 kesmesi çok etkilenmedi.  
.................... void delay_m_us(unsigned int16 n) { 
....................      
....................     for (;n!=0; n--) 
*
0E9A:  MOVLB  1
0E9C:  MOVF   x66,F
0E9E:  BNZ   0EA4
0EA0:  MOVF   x67,F
0EA2:  BZ    0EC4
....................         delay_us(1000); 
0EA4:  CLRF   19
0EA6:  BTFSC  FF2.7
0EA8:  BSF    19.7
0EAA:  BCF    FF2.7
0EAC:  MOVLW  01
0EAE:  MOVWF  x86
0EB0:  MOVLB  0
0EB2:  RCALL  0834
0EB4:  BTFSC  19.7
0EB6:  BSF    FF2.7
0EB8:  MOVLB  1
0EBA:  MOVF   x66,W
0EBC:  BTFSC  FD8.2
0EBE:  DECF   x67,F
0EC0:  DECF   x66,F
0EC2:  BRA    0E9C
0EC4:  MOVLB  0
0EC6:  RETURN 0
.................... } 
....................  
....................   
....................  
.................... long map(long x, long in_min, long in_max, long out_min, long out_max) 
.................... { 
....................  	    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; 
.................... } 
....................  
.................... void mtr1Mtr2IlkKonum(){ 
....................      
....................    delayMsSay=0; 
0EC8:  MOVLB  1
0ECA:  CLRF   x46
0ECC:  CLRF   x45
....................    int1 motor3_dur=FALSE; 
0ECE:  BCF    x5F.0
....................    if(!sa_m1_1())       //baþlangýc sýnýr anahtarlarý düþen kenarý algýlar düþen kenarda 1 degeri verir 
0ED0:  MOVLB  0
0ED2:  RCALL  0DD2
0ED4:  MOVF   01,F
0ED6:  BNZ   0EEA
....................    { 
....................        motor1_geri(); 
0ED8:  BSF    46.1
0EDA:  BCF    46.0
0EDC:  MOVFF  46,16C
0EE0:  MOVFF  47,16D
0EE4:  MOVFF  48,16E
0EE8:  RCALL  092A
....................       // motor3_geri(); //çekme motoru 
....................    } 
....................    if(!sa_m2_1()){ 
0EEA:  RCALL  0E36
0EEC:  MOVF   01,F
0EEE:  BNZ   0F02
....................        motor2_geri(); 
0EF0:  BSF    46.3
0EF2:  BCF    46.2
0EF4:  MOVFF  46,16C
0EF8:  MOVFF  47,16D
0EFC:  MOVFF  48,16E
0F00:  RCALL  092A
....................       // motor3_geri(); //çekme motoru 
....................    } 
....................    motor3_geri(); //çekme motoru 
0F02:  BSF    46.5
0F04:  BCF    46.4
0F06:  MOVFF  46,16C
0F0A:  MOVFF  47,16D
0F0E:  MOVFF  48,16E
0F12:  RCALL  092A
....................     
....................     do{  
....................         if(sa_m2_1()){ 
0F14:  RCALL  0E36
0F16:  MOVF   01,F
0F18:  BZ    0F2C
....................             motor2_dur(); 
0F1A:  BCF    46.2
0F1C:  BCF    46.3
0F1E:  MOVFF  46,16C
0F22:  MOVFF  47,16D
0F26:  MOVFF  48,16E
0F2A:  RCALL  092A
....................         } 
....................         if(sa_m1_1()) { 
0F2C:  RCALL  0DD2
0F2E:  MOVF   01,F
0F30:  BZ    0F44
....................             motor1_dur();  // makro ifadelere dikkat... {} parantez kullanýlmalý... 
0F32:  BCF    46.0
0F34:  BCF    46.1
0F36:  MOVFF  46,16C
0F3A:  MOVFF  47,16D
0F3E:  MOVFF  48,16E
0F42:  RCALL  092A
....................         }  
....................          
....................         if((sa_m1_1())&&(sa_m2_1()))  
0F44:  RCALL  0DD2
0F46:  MOVF   01,F
0F48:  BZ    0F52
0F4A:  RCALL  0E36
0F4C:  MOVF   01,F
0F4E:  BZ    0F52
....................             break; 
0F50:  BRA    1088
....................  
....................         if(delay_mt_geri>100) //100 ün katlarýnda 
0F52:  MOVLB  1
0F54:  MOVF   x48,F
0F56:  BNZ   0F5E
0F58:  MOVF   x47,W
0F5A:  SUBLW  64
0F5C:  BC    0FC2
....................         { 
....................             sw_led_on(); 
0F5E:  BSF    48.3
0F60:  MOVFF  46,16C
0F64:  MOVFF  47,16D
0F68:  MOVFF  48,16E
0F6C:  MOVLB  0
0F6E:  RCALL  092A
0F70:  BSF    48.4
0F72:  MOVFF  46,16C
0F76:  MOVFF  47,16D
0F7A:  MOVFF  48,16E
0F7E:  RCALL  092A
0F80:  BSF    48.5
0F82:  MOVFF  46,16C
0F86:  MOVFF  47,16D
0F8A:  MOVFF  48,16E
0F8E:  RCALL  092A
0F90:  BSF    48.0
0F92:  MOVFF  46,16C
0F96:  MOVFF  47,16D
0F9A:  MOVFF  48,16E
0F9E:  RCALL  092A
0FA0:  BSF    48.1
0FA2:  MOVFF  46,16C
0FA6:  MOVFF  47,16D
0FAA:  MOVFF  48,16E
0FAE:  RCALL  092A
0FB0:  BSF    48.2
0FB2:  MOVFF  46,16C
0FB6:  MOVFF  47,16D
0FBA:  MOVFF  48,16E
0FBE:  RCALL  092A
0FC0:  MOVLB  1
....................         } 
....................          
....................         if(delay_mt_geri>200){ 
0FC2:  MOVF   x48,F
0FC4:  BNZ   0FCC
0FC6:  MOVF   x47,W
0FC8:  SUBLW  C8
0FCA:  BC    1036
....................             spiDataL=0; 
0FCC:  CLRF   48
....................             delay_mt_geri=0; 
0FCE:  CLRF   x48
0FD0:  CLRF   x47
....................             sw_led_off(); 
0FD2:  BCF    48.3
0FD4:  MOVFF  46,16C
0FD8:  MOVFF  47,16D
0FDC:  MOVFF  48,16E
0FE0:  MOVLB  0
0FE2:  RCALL  092A
0FE4:  BCF    48.4
0FE6:  MOVFF  46,16C
0FEA:  MOVFF  47,16D
0FEE:  MOVFF  48,16E
0FF2:  RCALL  092A
0FF4:  BCF    48.5
0FF6:  MOVFF  46,16C
0FFA:  MOVFF  47,16D
0FFE:  MOVFF  48,16E
1002:  RCALL  092A
1004:  BCF    48.0
1006:  MOVFF  46,16C
100A:  MOVFF  47,16D
100E:  MOVFF  48,16E
1012:  RCALL  092A
1014:  BCF    48.1
1016:  MOVFF  46,16C
101A:  MOVFF  47,16D
101E:  MOVFF  48,16E
1022:  RCALL  092A
1024:  BCF    48.5
1026:  MOVFF  46,16C
102A:  MOVFF  47,16D
102E:  MOVFF  48,16E
1032:  RCALL  092A
1034:  MOVLB  1
....................         } 
....................         if(delayMsSay>200 && !motor3_dur) { 
1036:  MOVF   x46,F
1038:  BNZ   1040
103A:  MOVF   x45,W
103C:  SUBLW  C8
103E:  BC    105C
1040:  BTFSC  x5F.0
1042:  BRA    105C
....................             //delayMsSay=0; 
....................             motor3_dur=TRUE; 
1044:  BSF    x5F.0
....................             motor3_dur();       //çekme motoru 
1046:  BCF    46.4
1048:  BCF    46.5
104A:  MOVFF  46,16C
104E:  MOVFF  47,16D
1052:  MOVFF  48,16E
1056:  MOVLB  0
1058:  RCALL  092A
105A:  MOVLB  1
....................         } 
....................          
....................         if(delayMsSay>15000) 
105C:  MOVF   x46,W
105E:  SUBLW  39
1060:  BC    1076
1062:  XORLW  FF
1064:  BNZ   106C
1066:  MOVF   x45,W
1068:  SUBLW  98
106A:  BC    1076
....................         { 
....................             delayMsSay=0; 
106C:  CLRF   x46
106E:  CLRF   x45
....................             break; 
1070:  MOVLB  0
1072:  BRA    1088
1074:  MOVLB  1
....................         } 
....................          
....................         delayMsSay++; 
1076:  INCF   x45,F
1078:  BTFSC  FD8.2
107A:  INCF   x46,F
....................         delay_m_us(1); 
107C:  CLRF   x67
107E:  MOVLW  01
1080:  MOVWF  x66
1082:  MOVLB  0
1084:  RCALL  0E9A
....................             
....................     }while(1); 
1086:  BRA    0F14
....................     delay_mt_geri=0; 
1088:  MOVLB  1
108A:  CLRF   x48
108C:  CLRF   x47
....................     delayMsSay=0; 
108E:  CLRF   x46
1090:  CLRF   x45
....................     motor1_dur(); 
1092:  BCF    46.0
1094:  BCF    46.1
1096:  MOVFF  46,16C
109A:  MOVFF  47,16D
109E:  MOVFF  48,16E
10A2:  MOVLB  0
10A4:  RCALL  092A
....................     motor2_dur(); 
10A6:  BCF    46.2
10A8:  BCF    46.3
10AA:  MOVFF  46,16C
10AE:  MOVFF  47,16D
10B2:  MOVFF  48,16E
10B6:  RCALL  092A
....................     motor3_dur(); 
10B8:  BCF    46.4
10BA:  BCF    46.5
10BC:  MOVFF  46,16C
10C0:  MOVFF  47,16D
10C4:  MOVFF  48,16E
10C8:  RCALL  092A
10CA:  GOTO   5034 (RETURN)
.................... } 
....................  
.................... void motorGeriLedAnim(){ 
....................                  
....................     if(delay_mt_geri>100) //100 un katlarýnda 
*
23A8:  MOVLB  1
23AA:  MOVF   x48,F
23AC:  BNZ   23B4
23AE:  MOVF   x47,W
23B0:  SUBLW  64
23B2:  BC    2424
....................     { 
....................             sw_led_on(); 
23B4:  BSF    48.3
23B6:  MOVFF  46,16C
23BA:  MOVFF  47,16D
23BE:  MOVFF  48,16E
23C2:  MOVLB  0
23C4:  CALL   092A
23C8:  BSF    48.4
23CA:  MOVFF  46,16C
23CE:  MOVFF  47,16D
23D2:  MOVFF  48,16E
23D6:  CALL   092A
23DA:  BSF    48.5
23DC:  MOVFF  46,16C
23E0:  MOVFF  47,16D
23E4:  MOVFF  48,16E
23E8:  CALL   092A
23EC:  BSF    48.0
23EE:  MOVFF  46,16C
23F2:  MOVFF  47,16D
23F6:  MOVFF  48,16E
23FA:  CALL   092A
23FE:  BSF    48.1
2400:  MOVFF  46,16C
2404:  MOVFF  47,16D
2408:  MOVFF  48,16E
240C:  CALL   092A
2410:  BSF    48.2
2412:  MOVFF  46,16C
2416:  MOVFF  47,16D
241A:  MOVFF  48,16E
241E:  CALL   092A
2422:  MOVLB  1
....................     } 
....................  
....................     if(delay_mt_geri>200){ 
2424:  MOVF   x48,F
2426:  BNZ   242E
2428:  MOVF   x47,W
242A:  SUBLW  C8
242C:  BC    24A4
....................         spiDataL=0; 
242E:  CLRF   48
....................         delay_mt_geri=0; 
2430:  CLRF   x48
2432:  CLRF   x47
....................         sw_led_off(); 
2434:  BCF    48.3
2436:  MOVFF  46,16C
243A:  MOVFF  47,16D
243E:  MOVFF  48,16E
2442:  MOVLB  0
2444:  CALL   092A
2448:  BCF    48.4
244A:  MOVFF  46,16C
244E:  MOVFF  47,16D
2452:  MOVFF  48,16E
2456:  CALL   092A
245A:  BCF    48.5
245C:  MOVFF  46,16C
2460:  MOVFF  47,16D
2464:  MOVFF  48,16E
2468:  CALL   092A
246C:  BCF    48.0
246E:  MOVFF  46,16C
2472:  MOVFF  47,16D
2476:  MOVFF  48,16E
247A:  CALL   092A
247E:  BCF    48.1
2480:  MOVFF  46,16C
2484:  MOVFF  47,16D
2488:  MOVFF  48,16E
248C:  CALL   092A
2490:  BCF    48.5
2492:  MOVFF  46,16C
2496:  MOVFF  47,16D
249A:  MOVFF  48,16E
249E:  CALL   092A
24A2:  MOVLB  1
....................     } 
.................... //    if(delayMsSay>200) { 
.................... //        //delayMsSay=0; 
.................... //    } 
....................     if(delayMsSay==3000){ 
24A4:  MOVF   x45,W
24A6:  SUBLW  B8
24A8:  BNZ   24C8
24AA:  MOVF   x46,W
24AC:  SUBLW  0B
24AE:  BNZ   24C8
....................         motor3_geri(); 
24B0:  BSF    46.5
24B2:  BCF    46.4
24B4:  MOVFF  46,16C
24B8:  MOVFF  47,16D
24BC:  MOVFF  48,16E
24C0:  MOVLB  0
24C2:  CALL   092A
24C6:  MOVLB  1
....................     } 
....................     if(delayMsSay==3500){ 
24C8:  MOVF   x45,W
24CA:  SUBLW  AC
24CC:  BNZ   24EC
24CE:  MOVF   x46,W
24D0:  SUBLW  0D
24D2:  BNZ   24EC
....................         motor3_dur(); 
24D4:  BCF    46.4
24D6:  BCF    46.5
24D8:  MOVFF  46,16C
24DC:  MOVFF  47,16D
24E0:  MOVFF  48,16E
24E4:  MOVLB  0
24E6:  CALL   092A
24EA:  MOVLB  1
....................     } 
....................     if(delayMsSay>15000) 
24EC:  MOVF   x46,W
24EE:  SUBLW  39
24F0:  BC    2500
24F2:  XORLW  FF
24F4:  BNZ   24FC
24F6:  MOVF   x45,W
24F8:  SUBLW  98
24FA:  BC    2500
....................     { 
....................           delayMsSay=0; 
24FC:  CLRF   x46
24FE:  CLRF   x45
....................           break; 
....................     } 
....................     delayMsSay++; 
2500:  INCF   x45,F
2502:  BTFSC  FD8.2
2504:  INCF   x46,F
....................     delay_mt_geri++; 
2506:  INCF   x47,F
2508:  BTFSC  FD8.2
250A:  INCF   x48,F
....................     delay_m_us(1); 
250C:  CLRF   x67
250E:  MOVLW  01
2510:  MOVWF  x66
2512:  MOVLB  0
2514:  CALL   0E9A
2518:  GOTO   58DE (RETURN)
....................      
.................... } 

Configuration Fuses:
   Word  1: 3300   HSM PLLEN PRIMARY_ON NOFCMEN NOIESO
   Word  2: 1C18   PUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: B500   CCP2C1 NOPBADEN CCP3B5 NOHFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0080   NOSTVREN NOLVP NOXINST NODEBUG
   Word  5: 8000   PROTECT CPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
